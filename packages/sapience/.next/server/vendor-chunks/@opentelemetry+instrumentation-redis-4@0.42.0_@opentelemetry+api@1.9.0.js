"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGlOQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsNkxBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy9pbmRleC5qcz82YzEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXJlZGlzLTRAMC40Mi4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQvYnVpbGQvc3JjL3R5cGVzLmpzPzFkMmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getClientAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nfunction getClientAttributes(diag, options) {\n    var _a, _b;\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: (_a = options === null || options === void 0 ? void 0 : options.socket) === null || _a === void 0 ? void 0 : _a.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: (_b = options === null || options === void 0 ? void 0 : options.socket) === null || _b === void 0 ? void 0 : _b.port,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: removeCredentialsFromDBConnectionStringAttribute(diag, options === null || options === void 0 ? void 0 : options.url),\n    };\n}\nexports.getClientAttributes = getClientAttributes;\n/**\n * removeCredentialsFromDBConnectionStringAttribute removes basic auth from url and user_pwd from query string\n *\n * Examples:\n *   redis://user:pass@localhost:6379/mydb => redis://localhost:6379/mydb\n *   redis://localhost:6379?db=mydb&user_pwd=pass => redis://localhost:6379?db=mydb\n */\nfunction removeCredentialsFromDBConnectionStringAttribute(diag, url) {\n    if (typeof url !== 'string') {\n        return;\n    }\n    try {\n        const u = new URL(url);\n        u.searchParams.delete('user_pwd');\n        u.username = '';\n        u.password = '';\n        return u.href;\n    }\n    catch (err) {\n        diag.error('failed to sanitize redis connection url', err);\n    }\n    return;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsK0JBQStCLG1CQUFPLENBQUMsMExBQXFDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy91dGlscy5qcz84NmUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDbGllbnRBdHRyaWJ1dGVzID0gdm9pZCAwO1xuY29uc3Qgc2VtYW50aWNfY29udmVudGlvbnNfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9uc1wiKTtcbmZ1bmN0aW9uIGdldENsaWVudEF0dHJpYnV0ZXMoZGlhZywgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfREJfU1lTVEVNXTogc2VtYW50aWNfY29udmVudGlvbnNfMS5EQlNZU1RFTVZBTFVFU19SRURJUyxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV06IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ob3N0LFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9QT1JUXTogKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBvcnQsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX0NPTk5FQ1RJT05fU1RSSU5HXTogcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlKGRpYWcsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51cmwpLFxuICAgIH07XG59XG5leHBvcnRzLmdldENsaWVudEF0dHJpYnV0ZXMgPSBnZXRDbGllbnRBdHRyaWJ1dGVzO1xuLyoqXG4gKiByZW1vdmVDcmVkZW50aWFsc0Zyb21EQkNvbm5lY3Rpb25TdHJpbmdBdHRyaWJ1dGUgcmVtb3ZlcyBiYXNpYyBhdXRoIGZyb20gdXJsIGFuZCB1c2VyX3B3ZCBmcm9tIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEV4YW1wbGVzOlxuICogICByZWRpczovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NjM3OS9teWRiID0+IHJlZGlzOi8vbG9jYWxob3N0OjYzNzkvbXlkYlxuICogICByZWRpczovL2xvY2FsaG9zdDo2Mzc5P2RiPW15ZGImdXNlcl9wd2Q9cGFzcyA9PiByZWRpczovL2xvY2FsaG9zdDo2Mzc5P2RiPW15ZGJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlKGRpYWcsIHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIHUuc2VhcmNoUGFyYW1zLmRlbGV0ZSgndXNlcl9wd2QnKTtcbiAgICAgICAgdS51c2VybmFtZSA9ICcnO1xuICAgICAgICB1LnBhc3N3b3JkID0gJyc7XG4gICAgICAgIHJldHVybiB1LmhyZWY7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgZGlhZy5lcnJvcignZmFpbGVkIHRvIHNhbml0aXplIHJlZGlzIGNvbm5lY3Rpb24gdXJsJywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.42.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-redis-4';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy92ZXJzaW9uLmpzPzI4NGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40Mi4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+redis-common@0.36.2/node_modules/@opentelemetry/redis-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst OTEL_OPEN_SPANS = Symbol('opentelemetry.instrumentation.redis.open_spans');\nconst MULTI_COMMAND_OPTIONS = Symbol('opentelemetry.instrumentation.redis.multi_command_options');\nconst DEFAULT_CONFIG = {\n    requireParentSpan: false,\n};\nclass RedisInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    setConfig(config = {}) {\n        super.setConfig(Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    init() {\n        // @node-redis/client is a new package introduced and consumed by 'redis 4.0.x'\n        // on redis@4.1.0 it was changed to @redis/client.\n        // we will instrument both packages\n        return [\n            this._getInstrumentationNodeModuleDefinition('@redis/client'),\n            this._getInstrumentationNodeModuleDefinition('@node-redis/client'),\n        ];\n    }\n    _getInstrumentationNodeModuleDefinition(basePackageName) {\n        const commanderModuleFile = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/commander.js`, ['^1.0.0'], (moduleExports, moduleVersion) => {\n            const transformCommandArguments = moduleExports.transformCommandArguments;\n            if (!transformCommandArguments) {\n                this._diag.error('internal instrumentation error, missing transformCommandArguments function');\n                return moduleExports;\n            }\n            // function name and signature changed in redis 4.1.0 from 'extendWithCommands' to 'attachCommands'\n            // the matching internal package names starts with 1.0.x (for redis 4.0.x)\n            const functionToPatch = (moduleVersion === null || moduleVersion === void 0 ? void 0 : moduleVersion.startsWith('1.0.'))\n                ? 'extendWithCommands'\n                : 'attachCommands';\n            // this is the function that extend a redis client with a list of commands.\n            // the function patches the commandExecutor to record a span\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports[functionToPatch])) {\n                this._unwrap(moduleExports, functionToPatch);\n            }\n            this._wrap(moduleExports, functionToPatch, this._getPatchExtendWithCommands(transformCommandArguments));\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.extendWithCommands)) {\n                this._unwrap(moduleExports, 'extendWithCommands');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.attachCommands)) {\n                this._unwrap(moduleExports, 'attachCommands');\n            }\n        });\n        const multiCommanderModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/multi-command.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'exec', this._getPatchMultiCommandsExec());\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'addCommand', this._getPatchMultiCommandsAddCommand());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n        });\n        const clientIndexModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/index.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            // In some @redis/client versions 'multi' is a method. In later\n            // versions, as of https://github.com/redis/node-redis/pull/2324,\n            // 'MULTI' is a method and 'multi' is a property defined in the\n            // constructor that points to 'MULTI', and therefore it will not\n            // be defined on the prototype.\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                    this._unwrap(redisClientPrototype, 'multi');\n                }\n                this._wrap(redisClientPrototype, 'multi', this._getPatchRedisClientMulti());\n            }\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                    this._unwrap(redisClientPrototype, 'MULTI');\n                }\n                this._wrap(redisClientPrototype, 'MULTI', this._getPatchRedisClientMulti());\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n            this._wrap(redisClientPrototype, 'sendCommand', this._getPatchRedisClientSendCommand());\n            this._wrap(redisClientPrototype, 'connect', this._getPatchedClientConnect());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                this._unwrap(redisClientPrototype, 'multi');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                this._unwrap(redisClientPrototype, 'MULTI');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n        });\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(basePackageName, ['^1.0.0'], (moduleExports) => {\n            return moduleExports;\n        }, () => { }, [commanderModuleFile, multiCommanderModule, clientIndexModule]);\n    }\n    // serves both for redis 4.0.x where function name is extendWithCommands\n    // and redis ^4.1.0 where function name is attachCommands\n    _getPatchExtendWithCommands(transformCommandArguments) {\n        const plugin = this;\n        return function extendWithCommandsPatchWrapper(original) {\n            return function extendWithCommandsPatch(config) {\n                var _a;\n                if (((_a = config === null || config === void 0 ? void 0 : config.BaseClass) === null || _a === void 0 ? void 0 : _a.name) !== 'RedisClient') {\n                    return original.apply(this, arguments);\n                }\n                const origExecutor = config.executor;\n                config.executor = function (command, args) {\n                    const redisCommandArguments = transformCommandArguments(command, args).args;\n                    return plugin._traceClientCommand(origExecutor, this, arguments, redisCommandArguments);\n                };\n                return original.apply(this, arguments);\n            };\n        };\n    }\n    _getPatchMultiCommandsExec() {\n        const plugin = this;\n        return function execPatchWrapper(original) {\n            return function execPatch() {\n                const execRes = original.apply(this, arguments);\n                if (typeof (execRes === null || execRes === void 0 ? void 0 : execRes.then) !== 'function') {\n                    plugin._diag.error('got non promise result when patching RedisClientMultiCommand.exec');\n                    return execRes;\n                }\n                return execRes\n                    .then((redisRes) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    plugin._endSpansWithRedisReplies(openSpans, redisRes);\n                    return redisRes;\n                })\n                    .catch((err) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    if (!openSpans) {\n                        plugin._diag.error('cannot find open spans to end for redis multi command');\n                    }\n                    else {\n                        const replies = err.constructor.name === 'MultiErrorReply'\n                            ? err.replies\n                            : new Array(openSpans.length).fill(err);\n                        plugin._endSpansWithRedisReplies(openSpans, replies);\n                    }\n                    return Promise.reject(err);\n                });\n            };\n        };\n    }\n    _getPatchMultiCommandsAddCommand() {\n        const plugin = this;\n        return function addCommandWrapper(original) {\n            return function addCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchRedisClientMulti() {\n        return function multiPatchWrapper(original) {\n            return function multiPatch() {\n                const multiRes = original.apply(this, arguments);\n                multiRes[MULTI_COMMAND_OPTIONS] = this.options;\n                return multiRes;\n            };\n        };\n    }\n    _getPatchRedisClientSendCommand() {\n        const plugin = this;\n        return function sendCommandWrapper(original) {\n            return function sendCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchedClientConnect() {\n        const plugin = this;\n        return function connectWrapper(original) {\n            return function patchedConnect() {\n                const options = this.options;\n                const attributes = (0, utils_1.getClientAttributes)(plugin._diag, options);\n                const span = plugin.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-connect`, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes,\n                });\n                const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.apply(this);\n                });\n                return res\n                    .then((result) => {\n                    span.end();\n                    return result;\n                })\n                    .catch((error) => {\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                    span.end();\n                    return Promise.reject(error);\n                });\n            };\n        };\n    }\n    _traceClientCommand(origFunction, origThis, origArguments, redisCommandArguments) {\n        const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n        if (hasNoParentSpan && this.getConfig().requireParentSpan) {\n            return origFunction.apply(origThis, origArguments);\n        }\n        const clientOptions = origThis.options || origThis[MULTI_COMMAND_OPTIONS];\n        const commandName = redisCommandArguments[0]; // types also allows it to be a Buffer, but in practice it only string\n        const commandArgs = redisCommandArguments.slice(1);\n        const dbStatementSerializer = this.getConfig().dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n        const attributes = (0, utils_1.getClientAttributes)(this._diag, clientOptions);\n        try {\n            const dbStatement = dbStatementSerializer(commandName, commandArgs);\n            if (dbStatement != null) {\n                attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatement;\n            }\n        }\n        catch (e) {\n            this._diag.error('dbStatementSerializer throw an exception', e, {\n                commandName,\n            });\n        }\n        const span = this.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-${commandName}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes,\n        });\n        const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return origFunction.apply(origThis, origArguments);\n        });\n        if (typeof (res === null || res === void 0 ? void 0 : res.then) === 'function') {\n            res.then((redisRes) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, redisRes, undefined);\n            }, (err) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, null, err);\n            });\n        }\n        else {\n            const redisClientMultiCommand = res;\n            redisClientMultiCommand[OTEL_OPEN_SPANS] =\n                redisClientMultiCommand[OTEL_OPEN_SPANS] || [];\n            redisClientMultiCommand[OTEL_OPEN_SPANS].push({\n                span,\n                commandName,\n                commandArgs,\n            });\n        }\n        return res;\n    }\n    _endSpansWithRedisReplies(openSpans, replies) {\n        if (!openSpans) {\n            return this._diag.error('cannot find open spans to end for redis multi command');\n        }\n        if (replies.length !== openSpans.length) {\n            return this._diag.error('number of multi command spans does not match response from redis');\n        }\n        for (let i = 0; i < openSpans.length; i++) {\n            const { span, commandName, commandArgs } = openSpans[i];\n            const currCommandRes = replies[i];\n            const [res, err] = currCommandRes instanceof Error\n                ? [null, currCommandRes]\n                : [currCommandRes, undefined];\n            this._endSpanWithResponse(span, commandName, commandArgs, res, err);\n        }\n    }\n    _endSpanWithResponse(span, commandName, commandArgs, response, error) {\n        const { responseHook } = this.getConfig();\n        if (!error && responseHook) {\n            try {\n                responseHook(span, commandName, commandArgs, response);\n            }\n            catch (err) {\n                this._diag.error('responseHook throw an exception', err);\n            }\n        }\n        if (error) {\n            span.recordException(error);\n            span.setStatus({ code: api_1.SpanStatusCode.ERROR, message: error === null || error === void 0 ? void 0 : error.message });\n        }\n        span.end();\n    }\n}\nexports.RedisInstrumentation = RedisInstrumentation;\nRedisInstrumentation.COMPONENT = 'redis';\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx3TkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLG9NQUFTO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvaW5kZXguanM/NjNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy90eXBlcy5qcz80N2ZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getClientAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nfunction getClientAttributes(diag, options) {\n    var _a, _b;\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: (_a = options === null || options === void 0 ? void 0 : options.socket) === null || _a === void 0 ? void 0 : _a.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: (_b = options === null || options === void 0 ? void 0 : options.socket) === null || _b === void 0 ? void 0 : _b.port,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: removeCredentialsFromDBConnectionStringAttribute(diag, options === null || options === void 0 ? void 0 : options.url),\n    };\n}\nexports.getClientAttributes = getClientAttributes;\n/**\n * removeCredentialsFromDBConnectionStringAttribute removes basic auth from url and user_pwd from query string\n *\n * Examples:\n *   redis://user:pass@localhost:6379/mydb => redis://localhost:6379/mydb\n *   redis://localhost:6379?db=mydb&user_pwd=pass => redis://localhost:6379?db=mydb\n */\nfunction removeCredentialsFromDBConnectionStringAttribute(diag, url) {\n    if (typeof url !== 'string') {\n        return;\n    }\n    try {\n        const u = new URL(url);\n        u.searchParams.delete('user_pwd');\n        u.username = '';\n        u.password = '';\n        return u.href;\n    }\n    catch (err) {\n        diag.error('failed to sanitize redis connection url', err);\n    }\n    return;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLCtCQUErQixtQkFBTyxDQUFDLGlNQUFxQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvdXRpbHMuanM/ZThjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Q2xpZW50QXR0cmlidXRlcyA9IHZvaWQgMDtcbmNvbnN0IHNlbWFudGljX2NvbnZlbnRpb25zXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnNcIik7XG5mdW5jdGlvbiBnZXRDbGllbnRBdHRyaWJ1dGVzKGRpYWcsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiB7XG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX1NZU1RFTV06IHNlbWFudGljX2NvbnZlbnRpb25zXzEuREJTWVNURU1WQUxVRVNfUkVESVMsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX05BTUVdOiAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc29ja2V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfUE9SVF06IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zb2NrZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wb3J0LFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19EQl9DT05ORUNUSU9OX1NUUklOR106IHJlbW92ZUNyZWRlbnRpYWxzRnJvbURCQ29ubmVjdGlvblN0cmluZ0F0dHJpYnV0ZShkaWFnLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudXJsKSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRDbGllbnRBdHRyaWJ1dGVzID0gZ2V0Q2xpZW50QXR0cmlidXRlcztcbi8qKlxuICogcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlIHJlbW92ZXMgYmFzaWMgYXV0aCBmcm9tIHVybCBhbmQgdXNlcl9wd2QgZnJvbSBxdWVyeSBzdHJpbmdcbiAqXG4gKiBFeGFtcGxlczpcbiAqICAgcmVkaXM6Ly91c2VyOnBhc3NAbG9jYWxob3N0OjYzNzkvbXlkYiA9PiByZWRpczovL2xvY2FsaG9zdDo2Mzc5L215ZGJcbiAqICAgcmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OT9kYj1teWRiJnVzZXJfcHdkPXBhc3MgPT4gcmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OT9kYj1teWRiXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNyZWRlbnRpYWxzRnJvbURCQ29ubmVjdGlvblN0cmluZ0F0dHJpYnV0ZShkaWFnLCB1cmwpIHtcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB1ID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICB1LnNlYXJjaFBhcmFtcy5kZWxldGUoJ3VzZXJfcHdkJyk7XG4gICAgICAgIHUudXNlcm5hbWUgPSAnJztcbiAgICAgICAgdS5wYXNzd29yZCA9ICcnO1xuICAgICAgICByZXR1cm4gdS5ocmVmO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGRpYWcuZXJyb3IoJ2ZhaWxlZCB0byBzYW5pdGl6ZSByZWRpcyBjb25uZWN0aW9uIHVybCcsIGVycik7XG4gICAgfVxuICAgIHJldHVybjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.42.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-redis-4';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tcmVkaXMtNEAwLjQyLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNC9idWlsZC9zcmMvdmVyc2lvbi5qcz8xMzE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDIuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcmVkaXMtNCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+redis-common@0.36.2/node_modules/@opentelemetry/redis-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst OTEL_OPEN_SPANS = Symbol('opentelemetry.instrumentation.redis.open_spans');\nconst MULTI_COMMAND_OPTIONS = Symbol('opentelemetry.instrumentation.redis.multi_command_options');\nconst DEFAULT_CONFIG = {\n    requireParentSpan: false,\n};\nclass RedisInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    setConfig(config = {}) {\n        super.setConfig(Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    init() {\n        // @node-redis/client is a new package introduced and consumed by 'redis 4.0.x'\n        // on redis@4.1.0 it was changed to @redis/client.\n        // we will instrument both packages\n        return [\n            this._getInstrumentationNodeModuleDefinition('@redis/client'),\n            this._getInstrumentationNodeModuleDefinition('@node-redis/client'),\n        ];\n    }\n    _getInstrumentationNodeModuleDefinition(basePackageName) {\n        const commanderModuleFile = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/commander.js`, ['^1.0.0'], (moduleExports, moduleVersion) => {\n            const transformCommandArguments = moduleExports.transformCommandArguments;\n            if (!transformCommandArguments) {\n                this._diag.error('internal instrumentation error, missing transformCommandArguments function');\n                return moduleExports;\n            }\n            // function name and signature changed in redis 4.1.0 from 'extendWithCommands' to 'attachCommands'\n            // the matching internal package names starts with 1.0.x (for redis 4.0.x)\n            const functionToPatch = (moduleVersion === null || moduleVersion === void 0 ? void 0 : moduleVersion.startsWith('1.0.'))\n                ? 'extendWithCommands'\n                : 'attachCommands';\n            // this is the function that extend a redis client with a list of commands.\n            // the function patches the commandExecutor to record a span\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports[functionToPatch])) {\n                this._unwrap(moduleExports, functionToPatch);\n            }\n            this._wrap(moduleExports, functionToPatch, this._getPatchExtendWithCommands(transformCommandArguments));\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.extendWithCommands)) {\n                this._unwrap(moduleExports, 'extendWithCommands');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.attachCommands)) {\n                this._unwrap(moduleExports, 'attachCommands');\n            }\n        });\n        const multiCommanderModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/multi-command.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'exec', this._getPatchMultiCommandsExec());\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'addCommand', this._getPatchMultiCommandsAddCommand());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n        });\n        const clientIndexModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/index.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            // In some @redis/client versions 'multi' is a method. In later\n            // versions, as of https://github.com/redis/node-redis/pull/2324,\n            // 'MULTI' is a method and 'multi' is a property defined in the\n            // constructor that points to 'MULTI', and therefore it will not\n            // be defined on the prototype.\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                    this._unwrap(redisClientPrototype, 'multi');\n                }\n                this._wrap(redisClientPrototype, 'multi', this._getPatchRedisClientMulti());\n            }\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                    this._unwrap(redisClientPrototype, 'MULTI');\n                }\n                this._wrap(redisClientPrototype, 'MULTI', this._getPatchRedisClientMulti());\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n            this._wrap(redisClientPrototype, 'sendCommand', this._getPatchRedisClientSendCommand());\n            this._wrap(redisClientPrototype, 'connect', this._getPatchedClientConnect());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                this._unwrap(redisClientPrototype, 'multi');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                this._unwrap(redisClientPrototype, 'MULTI');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n        });\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(basePackageName, ['^1.0.0'], (moduleExports) => {\n            return moduleExports;\n        }, () => { }, [commanderModuleFile, multiCommanderModule, clientIndexModule]);\n    }\n    // serves both for redis 4.0.x where function name is extendWithCommands\n    // and redis ^4.1.0 where function name is attachCommands\n    _getPatchExtendWithCommands(transformCommandArguments) {\n        const plugin = this;\n        return function extendWithCommandsPatchWrapper(original) {\n            return function extendWithCommandsPatch(config) {\n                var _a;\n                if (((_a = config === null || config === void 0 ? void 0 : config.BaseClass) === null || _a === void 0 ? void 0 : _a.name) !== 'RedisClient') {\n                    return original.apply(this, arguments);\n                }\n                const origExecutor = config.executor;\n                config.executor = function (command, args) {\n                    const redisCommandArguments = transformCommandArguments(command, args).args;\n                    return plugin._traceClientCommand(origExecutor, this, arguments, redisCommandArguments);\n                };\n                return original.apply(this, arguments);\n            };\n        };\n    }\n    _getPatchMultiCommandsExec() {\n        const plugin = this;\n        return function execPatchWrapper(original) {\n            return function execPatch() {\n                const execRes = original.apply(this, arguments);\n                if (typeof (execRes === null || execRes === void 0 ? void 0 : execRes.then) !== 'function') {\n                    plugin._diag.error('got non promise result when patching RedisClientMultiCommand.exec');\n                    return execRes;\n                }\n                return execRes\n                    .then((redisRes) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    plugin._endSpansWithRedisReplies(openSpans, redisRes);\n                    return redisRes;\n                })\n                    .catch((err) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    if (!openSpans) {\n                        plugin._diag.error('cannot find open spans to end for redis multi command');\n                    }\n                    else {\n                        const replies = err.constructor.name === 'MultiErrorReply'\n                            ? err.replies\n                            : new Array(openSpans.length).fill(err);\n                        plugin._endSpansWithRedisReplies(openSpans, replies);\n                    }\n                    return Promise.reject(err);\n                });\n            };\n        };\n    }\n    _getPatchMultiCommandsAddCommand() {\n        const plugin = this;\n        return function addCommandWrapper(original) {\n            return function addCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchRedisClientMulti() {\n        return function multiPatchWrapper(original) {\n            return function multiPatch() {\n                const multiRes = original.apply(this, arguments);\n                multiRes[MULTI_COMMAND_OPTIONS] = this.options;\n                return multiRes;\n            };\n        };\n    }\n    _getPatchRedisClientSendCommand() {\n        const plugin = this;\n        return function sendCommandWrapper(original) {\n            return function sendCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchedClientConnect() {\n        const plugin = this;\n        return function connectWrapper(original) {\n            return function patchedConnect() {\n                const options = this.options;\n                const attributes = (0, utils_1.getClientAttributes)(plugin._diag, options);\n                const span = plugin.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-connect`, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes,\n                });\n                const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.apply(this);\n                });\n                return res\n                    .then((result) => {\n                    span.end();\n                    return result;\n                })\n                    .catch((error) => {\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                    span.end();\n                    return Promise.reject(error);\n                });\n            };\n        };\n    }\n    _traceClientCommand(origFunction, origThis, origArguments, redisCommandArguments) {\n        const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n        if (hasNoParentSpan && this.getConfig().requireParentSpan) {\n            return origFunction.apply(origThis, origArguments);\n        }\n        const clientOptions = origThis.options || origThis[MULTI_COMMAND_OPTIONS];\n        const commandName = redisCommandArguments[0]; // types also allows it to be a Buffer, but in practice it only string\n        const commandArgs = redisCommandArguments.slice(1);\n        const dbStatementSerializer = this.getConfig().dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n        const attributes = (0, utils_1.getClientAttributes)(this._diag, clientOptions);\n        try {\n            const dbStatement = dbStatementSerializer(commandName, commandArgs);\n            if (dbStatement != null) {\n                attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatement;\n            }\n        }\n        catch (e) {\n            this._diag.error('dbStatementSerializer throw an exception', e, {\n                commandName,\n            });\n        }\n        const span = this.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-${commandName}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes,\n        });\n        const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return origFunction.apply(origThis, origArguments);\n        });\n        if (typeof (res === null || res === void 0 ? void 0 : res.then) === 'function') {\n            res.then((redisRes) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, redisRes, undefined);\n            }, (err) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, null, err);\n            });\n        }\n        else {\n            const redisClientMultiCommand = res;\n            redisClientMultiCommand[OTEL_OPEN_SPANS] =\n                redisClientMultiCommand[OTEL_OPEN_SPANS] || [];\n            redisClientMultiCommand[OTEL_OPEN_SPANS].push({\n                span,\n                commandName,\n                commandArgs,\n            });\n        }\n        return res;\n    }\n    _endSpansWithRedisReplies(openSpans, replies) {\n        if (!openSpans) {\n            return this._diag.error('cannot find open spans to end for redis multi command');\n        }\n        if (replies.length !== openSpans.length) {\n            return this._diag.error('number of multi command spans does not match response from redis');\n        }\n        for (let i = 0; i < openSpans.length; i++) {\n            const { span, commandName, commandArgs } = openSpans[i];\n            const currCommandRes = replies[i];\n            const [res, err] = currCommandRes instanceof Error\n                ? [null, currCommandRes]\n                : [currCommandRes, undefined];\n            this._endSpanWithResponse(span, commandName, commandArgs, res, err);\n        }\n    }\n    _endSpanWithResponse(span, commandName, commandArgs, response, error) {\n        const { responseHook } = this.getConfig();\n        if (!error && responseHook) {\n            try {\n                responseHook(span, commandName, commandArgs, response);\n            }\n            catch (err) {\n                this._diag.error('responseHook throw an exception', err);\n            }\n        }\n        if (error) {\n            span.recordException(error);\n            span.setStatus({ code: api_1.SpanStatusCode.ERROR, message: error === null || error === void 0 ? void 0 : error.message });\n        }\n        span.end();\n    }\n}\nexports.RedisInstrumentation = RedisInstrumentation;\nRedisInstrumentation.COMPONENT = 'redis';\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGlOQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsNkxBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy9pbmRleC5qcz9mODk4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLXJlZGlzLTRAMC40Mi4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQvYnVpbGQvc3JjL3R5cGVzLmpzPzc3YzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/types.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getClientAttributes = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nfunction getClientAttributes(diag, options) {\n    var _a, _b;\n    return {\n        [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_REDIS,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: (_a = options === null || options === void 0 ? void 0 : options.socket) === null || _a === void 0 ? void 0 : _a.host,\n        [semantic_conventions_1.SEMATTRS_NET_PEER_PORT]: (_b = options === null || options === void 0 ? void 0 : options.socket) === null || _b === void 0 ? void 0 : _b.port,\n        [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: removeCredentialsFromDBConnectionStringAttribute(diag, options === null || options === void 0 ? void 0 : options.url),\n    };\n}\nexports.getClientAttributes = getClientAttributes;\n/**\n * removeCredentialsFromDBConnectionStringAttribute removes basic auth from url and user_pwd from query string\n *\n * Examples:\n *   redis://user:pass@localhost:6379/mydb => redis://localhost:6379/mydb\n *   redis://localhost:6379?db=mydb&user_pwd=pass => redis://localhost:6379?db=mydb\n */\nfunction removeCredentialsFromDBConnectionStringAttribute(diag, url) {\n    if (typeof url !== 'string') {\n        return;\n    }\n    try {\n        const u = new URL(url);\n        u.searchParams.delete('user_pwd');\n        u.username = '';\n        u.password = '';\n        return u.href;\n    }\n    catch (err) {\n        diag.error('failed to sanitize redis connection url', err);\n    }\n    return;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsK0JBQStCLG1CQUFPLENBQUMsMExBQXFDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy91dGlscy5qcz80Njk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDbGllbnRBdHRyaWJ1dGVzID0gdm9pZCAwO1xuY29uc3Qgc2VtYW50aWNfY29udmVudGlvbnNfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9uc1wiKTtcbmZ1bmN0aW9uIGdldENsaWVudEF0dHJpYnV0ZXMoZGlhZywgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfREJfU1lTVEVNXTogc2VtYW50aWNfY29udmVudGlvbnNfMS5EQlNZU1RFTVZBTFVFU19SRURJUyxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV06IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ob3N0LFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9QT1JUXTogKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBvcnQsXG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0RCX0NPTk5FQ1RJT05fU1RSSU5HXTogcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlKGRpYWcsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51cmwpLFxuICAgIH07XG59XG5leHBvcnRzLmdldENsaWVudEF0dHJpYnV0ZXMgPSBnZXRDbGllbnRBdHRyaWJ1dGVzO1xuLyoqXG4gKiByZW1vdmVDcmVkZW50aWFsc0Zyb21EQkNvbm5lY3Rpb25TdHJpbmdBdHRyaWJ1dGUgcmVtb3ZlcyBiYXNpYyBhdXRoIGZyb20gdXJsIGFuZCB1c2VyX3B3ZCBmcm9tIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEV4YW1wbGVzOlxuICogICByZWRpczovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NjM3OS9teWRiID0+IHJlZGlzOi8vbG9jYWxob3N0OjYzNzkvbXlkYlxuICogICByZWRpczovL2xvY2FsaG9zdDo2Mzc5P2RiPW15ZGImdXNlcl9wd2Q9cGFzcyA9PiByZWRpczovL2xvY2FsaG9zdDo2Mzc5P2RiPW15ZGJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ3JlZGVudGlhbHNGcm9tREJDb25uZWN0aW9uU3RyaW5nQXR0cmlidXRlKGRpYWcsIHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIHUuc2VhcmNoUGFyYW1zLmRlbGV0ZSgndXNlcl9wd2QnKTtcbiAgICAgICAgdS51c2VybmFtZSA9ICcnO1xuICAgICAgICB1LnBhc3N3b3JkID0gJyc7XG4gICAgICAgIHJldHVybiB1LmhyZWY7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgZGlhZy5lcnJvcignZmFpbGVkIHRvIHNhbml0aXplIHJlZGlzIGNvbm5lY3Rpb24gdXJsJywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.42.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-redis-4';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1yZWRpcy00QDAuNDIuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00L2J1aWxkL3NyYy92ZXJzaW9uLmpzPzM1ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40Mi4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedisInstrumentation = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/utils.js\");\nconst redis_common_1 = __webpack_require__(/*! @opentelemetry/redis-common */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+redis-common@0.36.2/node_modules/@opentelemetry/redis-common/build/src/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/version.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst OTEL_OPEN_SPANS = Symbol('opentelemetry.instrumentation.redis.open_spans');\nconst MULTI_COMMAND_OPTIONS = Symbol('opentelemetry.instrumentation.redis.multi_command_options');\nconst DEFAULT_CONFIG = {\n    requireParentSpan: false,\n};\nclass RedisInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    setConfig(config = {}) {\n        super.setConfig(Object.assign(Object.assign({}, DEFAULT_CONFIG), config));\n    }\n    init() {\n        // @node-redis/client is a new package introduced and consumed by 'redis 4.0.x'\n        // on redis@4.1.0 it was changed to @redis/client.\n        // we will instrument both packages\n        return [\n            this._getInstrumentationNodeModuleDefinition('@redis/client'),\n            this._getInstrumentationNodeModuleDefinition('@node-redis/client'),\n        ];\n    }\n    _getInstrumentationNodeModuleDefinition(basePackageName) {\n        const commanderModuleFile = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/commander.js`, ['^1.0.0'], (moduleExports, moduleVersion) => {\n            const transformCommandArguments = moduleExports.transformCommandArguments;\n            if (!transformCommandArguments) {\n                this._diag.error('internal instrumentation error, missing transformCommandArguments function');\n                return moduleExports;\n            }\n            // function name and signature changed in redis 4.1.0 from 'extendWithCommands' to 'attachCommands'\n            // the matching internal package names starts with 1.0.x (for redis 4.0.x)\n            const functionToPatch = (moduleVersion === null || moduleVersion === void 0 ? void 0 : moduleVersion.startsWith('1.0.'))\n                ? 'extendWithCommands'\n                : 'attachCommands';\n            // this is the function that extend a redis client with a list of commands.\n            // the function patches the commandExecutor to record a span\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports[functionToPatch])) {\n                this._unwrap(moduleExports, functionToPatch);\n            }\n            this._wrap(moduleExports, functionToPatch, this._getPatchExtendWithCommands(transformCommandArguments));\n            return moduleExports;\n        }, (moduleExports) => {\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.extendWithCommands)) {\n                this._unwrap(moduleExports, 'extendWithCommands');\n            }\n            if ((0, instrumentation_1.isWrapped)(moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.attachCommands)) {\n                this._unwrap(moduleExports, 'attachCommands');\n            }\n        });\n        const multiCommanderModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/multi-command.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'exec', this._getPatchMultiCommandsExec());\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n            this._wrap(redisClientMultiCommandPrototype, 'addCommand', this._getPatchMultiCommandsAddCommand());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientMultiCommandPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.exec)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'exec');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientMultiCommandPrototype === null || redisClientMultiCommandPrototype === void 0 ? void 0 : redisClientMultiCommandPrototype.addCommand)) {\n                this._unwrap(redisClientMultiCommandPrototype, 'addCommand');\n            }\n        });\n        const clientIndexModule = new instrumentation_1.InstrumentationNodeModuleFile(`${basePackageName}/dist/lib/client/index.js`, ['^1.0.0'], (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            // In some @redis/client versions 'multi' is a method. In later\n            // versions, as of https://github.com/redis/node-redis/pull/2324,\n            // 'MULTI' is a method and 'multi' is a property defined in the\n            // constructor that points to 'MULTI', and therefore it will not\n            // be defined on the prototype.\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                    this._unwrap(redisClientPrototype, 'multi');\n                }\n                this._wrap(redisClientPrototype, 'multi', this._getPatchRedisClientMulti());\n            }\n            if (redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI) {\n                if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                    this._unwrap(redisClientPrototype, 'MULTI');\n                }\n                this._wrap(redisClientPrototype, 'MULTI', this._getPatchRedisClientMulti());\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n            this._wrap(redisClientPrototype, 'sendCommand', this._getPatchRedisClientSendCommand());\n            this._wrap(redisClientPrototype, 'connect', this._getPatchedClientConnect());\n            return moduleExports;\n        }, (moduleExports) => {\n            var _a;\n            const redisClientPrototype = (_a = moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.default) === null || _a === void 0 ? void 0 : _a.prototype;\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.multi)) {\n                this._unwrap(redisClientPrototype, 'multi');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.MULTI)) {\n                this._unwrap(redisClientPrototype, 'MULTI');\n            }\n            if ((0, instrumentation_1.isWrapped)(redisClientPrototype === null || redisClientPrototype === void 0 ? void 0 : redisClientPrototype.sendCommand)) {\n                this._unwrap(redisClientPrototype, 'sendCommand');\n            }\n        });\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(basePackageName, ['^1.0.0'], (moduleExports) => {\n            return moduleExports;\n        }, () => { }, [commanderModuleFile, multiCommanderModule, clientIndexModule]);\n    }\n    // serves both for redis 4.0.x where function name is extendWithCommands\n    // and redis ^4.1.0 where function name is attachCommands\n    _getPatchExtendWithCommands(transformCommandArguments) {\n        const plugin = this;\n        return function extendWithCommandsPatchWrapper(original) {\n            return function extendWithCommandsPatch(config) {\n                var _a;\n                if (((_a = config === null || config === void 0 ? void 0 : config.BaseClass) === null || _a === void 0 ? void 0 : _a.name) !== 'RedisClient') {\n                    return original.apply(this, arguments);\n                }\n                const origExecutor = config.executor;\n                config.executor = function (command, args) {\n                    const redisCommandArguments = transformCommandArguments(command, args).args;\n                    return plugin._traceClientCommand(origExecutor, this, arguments, redisCommandArguments);\n                };\n                return original.apply(this, arguments);\n            };\n        };\n    }\n    _getPatchMultiCommandsExec() {\n        const plugin = this;\n        return function execPatchWrapper(original) {\n            return function execPatch() {\n                const execRes = original.apply(this, arguments);\n                if (typeof (execRes === null || execRes === void 0 ? void 0 : execRes.then) !== 'function') {\n                    plugin._diag.error('got non promise result when patching RedisClientMultiCommand.exec');\n                    return execRes;\n                }\n                return execRes\n                    .then((redisRes) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    plugin._endSpansWithRedisReplies(openSpans, redisRes);\n                    return redisRes;\n                })\n                    .catch((err) => {\n                    const openSpans = this[OTEL_OPEN_SPANS];\n                    if (!openSpans) {\n                        plugin._diag.error('cannot find open spans to end for redis multi command');\n                    }\n                    else {\n                        const replies = err.constructor.name === 'MultiErrorReply'\n                            ? err.replies\n                            : new Array(openSpans.length).fill(err);\n                        plugin._endSpansWithRedisReplies(openSpans, replies);\n                    }\n                    return Promise.reject(err);\n                });\n            };\n        };\n    }\n    _getPatchMultiCommandsAddCommand() {\n        const plugin = this;\n        return function addCommandWrapper(original) {\n            return function addCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchRedisClientMulti() {\n        return function multiPatchWrapper(original) {\n            return function multiPatch() {\n                const multiRes = original.apply(this, arguments);\n                multiRes[MULTI_COMMAND_OPTIONS] = this.options;\n                return multiRes;\n            };\n        };\n    }\n    _getPatchRedisClientSendCommand() {\n        const plugin = this;\n        return function sendCommandWrapper(original) {\n            return function sendCommandPatch(args) {\n                return plugin._traceClientCommand(original, this, arguments, args);\n            };\n        };\n    }\n    _getPatchedClientConnect() {\n        const plugin = this;\n        return function connectWrapper(original) {\n            return function patchedConnect() {\n                const options = this.options;\n                const attributes = (0, utils_1.getClientAttributes)(plugin._diag, options);\n                const span = plugin.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-connect`, {\n                    kind: api_1.SpanKind.CLIENT,\n                    attributes,\n                });\n                const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n                    return original.apply(this);\n                });\n                return res\n                    .then((result) => {\n                    span.end();\n                    return result;\n                })\n                    .catch((error) => {\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                    span.end();\n                    return Promise.reject(error);\n                });\n            };\n        };\n    }\n    _traceClientCommand(origFunction, origThis, origArguments, redisCommandArguments) {\n        const hasNoParentSpan = api_1.trace.getSpan(api_1.context.active()) === undefined;\n        if (hasNoParentSpan && this.getConfig().requireParentSpan) {\n            return origFunction.apply(origThis, origArguments);\n        }\n        const clientOptions = origThis.options || origThis[MULTI_COMMAND_OPTIONS];\n        const commandName = redisCommandArguments[0]; // types also allows it to be a Buffer, but in practice it only string\n        const commandArgs = redisCommandArguments.slice(1);\n        const dbStatementSerializer = this.getConfig().dbStatementSerializer || redis_common_1.defaultDbStatementSerializer;\n        const attributes = (0, utils_1.getClientAttributes)(this._diag, clientOptions);\n        try {\n            const dbStatement = dbStatementSerializer(commandName, commandArgs);\n            if (dbStatement != null) {\n                attributes[semantic_conventions_1.SEMATTRS_DB_STATEMENT] = dbStatement;\n            }\n        }\n        catch (e) {\n            this._diag.error('dbStatementSerializer throw an exception', e, {\n                commandName,\n            });\n        }\n        const span = this.tracer.startSpan(`${RedisInstrumentation.COMPONENT}-${commandName}`, {\n            kind: api_1.SpanKind.CLIENT,\n            attributes,\n        });\n        const res = api_1.context.with(api_1.trace.setSpan(api_1.context.active(), span), () => {\n            return origFunction.apply(origThis, origArguments);\n        });\n        if (typeof (res === null || res === void 0 ? void 0 : res.then) === 'function') {\n            res.then((redisRes) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, redisRes, undefined);\n            }, (err) => {\n                this._endSpanWithResponse(span, commandName, commandArgs, null, err);\n            });\n        }\n        else {\n            const redisClientMultiCommand = res;\n            redisClientMultiCommand[OTEL_OPEN_SPANS] =\n                redisClientMultiCommand[OTEL_OPEN_SPANS] || [];\n            redisClientMultiCommand[OTEL_OPEN_SPANS].push({\n                span,\n                commandName,\n                commandArgs,\n            });\n        }\n        return res;\n    }\n    _endSpansWithRedisReplies(openSpans, replies) {\n        if (!openSpans) {\n            return this._diag.error('cannot find open spans to end for redis multi command');\n        }\n        if (replies.length !== openSpans.length) {\n            return this._diag.error('number of multi command spans does not match response from redis');\n        }\n        for (let i = 0; i < openSpans.length; i++) {\n            const { span, commandName, commandArgs } = openSpans[i];\n            const currCommandRes = replies[i];\n            const [res, err] = currCommandRes instanceof Error\n                ? [null, currCommandRes]\n                : [currCommandRes, undefined];\n            this._endSpanWithResponse(span, commandName, commandArgs, res, err);\n        }\n    }\n    _endSpanWithResponse(span, commandName, commandArgs, response, error) {\n        const { responseHook } = this.getConfig();\n        if (!error && responseHook) {\n            try {\n                responseHook(span, commandName, commandArgs, response);\n            }\n            catch (err) {\n                this._diag.error('responseHook throw an exception', err);\n            }\n        }\n        if (error) {\n            span.recordException(error);\n            span.setStatus({ code: api_1.SpanStatusCode.ERROR, message: error === null || error === void 0 ? void 0 : error.message });\n        }\n        span.end();\n    }\n}\nexports.RedisInstrumentation = RedisInstrumentation;\nRedisInstrumentation.COMPONENT = 'redis';\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/instrumentation.js\n");

/***/ })

};
;