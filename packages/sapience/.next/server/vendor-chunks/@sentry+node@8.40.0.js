/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+node@8.40.0";
exports.ids = ["vendor-chunks/@sentry+node@8.40.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=2.0.0'];\n\n/**\n * Custom instrumentation for nestjs event-emitter\n *\n * This hooks into the `OnEvent` decorator, which is applied on event handlers.\n */\nclass SentryNestEventInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/event-emitter';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestEventInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs-event', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(\n      SentryNestEventInstrumentation.COMPONENT,\n      supportedVersions,\n    );\n\n    moduleDef.files.push(this._getOnEventFileInstrumentation(supportedVersions));\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @OnEvent decorator.\n   */\n   _getOnEventFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/event-emitter/dist/decorators/on-event.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.OnEvent)) {\n          this._unwrap(moduleExports, 'OnEvent');\n        }\n        this._wrap(moduleExports, 'OnEvent', this._createWrapOnEvent());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'OnEvent');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @OnEvent decorator.\n   */\n   _createWrapOnEvent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapOnEvent(original) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return function wrappedOnEvent(event, options) {\n        const eventName = Array.isArray(event)\n          ? event.join(',')\n          : typeof event === 'string' || typeof event === 'symbol'\n            ? event.toString()\n            : '<unknown_event>';\n\n        // Get the original decorator result\n        const decoratorResult = original(event, options);\n\n        // Return a new decorator function that wraps the handler\n        return function (target, propertyKey, descriptor) {\n          if (!descriptor.value || typeof descriptor.value !== 'function' || target.__SENTRY_INTERNAL__) {\n            return decoratorResult(target, propertyKey, descriptor);\n          }\n\n          // Get the original handler\n          const originalHandler = descriptor.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const handlerName = originalHandler.name || propertyKey;\n\n          // Instrument the handler\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          descriptor.value = async function (...args) {\n            return core.startSpan(helpers.getEventSpanOptions(eventName), async () => {\n              try {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const result = await originalHandler.apply(this, args);\n                return result;\n              } catch (error) {\n                // exceptions from event handlers are not caught by global error filter\n                core.captureException(error);\n                throw error;\n              }\n            });\n          };\n\n          // Preserve the original function name\n          Object.defineProperty(descriptor.value, 'name', {\n            value: handlerName,\n            configurable: true,\n          });\n\n          // Apply the original decorator\n          return decoratorResult(target, propertyKey, descriptor);\n        };\n      };\n    };\n  }\n} SentryNestEventInstrumentation.__initStatic(); SentryNestEventInstrumentation.__initStatic2();\n\nexports.SentryNestEventInstrumentation = SentryNestEventInstrumentation;\n//# sourceMappingURL=sentry-nest-event-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9zZW50cnktbmVzdC1ldmVudC1pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyx3REFBd0QseUNBQXlDLDBDQUEwQyxvREFBb0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3UCxlQUFlLG1CQUFPLENBQUMsbUtBQXFCO0FBQzVDLHdCQUF3QixtQkFBTyxDQUFDLG9NQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsaUpBQWM7O0FBRXRDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0NBQStDOztBQUVqRCxzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9zZW50cnktbmVzdC1ldmVudC1pbnN0cnVtZW50YXRpb24uanM/YWQ2OSJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSBcIi9tb25pdG9yaW5nXCI7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlJDEgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuanMnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49Mi4wLjAnXTtcblxuLyoqXG4gKiBDdXN0b20gaW5zdHJ1bWVudGF0aW9uIGZvciBuZXN0anMgZXZlbnQtZW1pdHRlclxuICpcbiAqIFRoaXMgaG9va3MgaW50byB0aGUgYE9uRXZlbnRgIGRlY29yYXRvciwgd2hpY2ggaXMgYXBwbGllZCBvbiBldmVudCBoYW5kbGVycy5cbiAqL1xuY2xhc3MgU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgc3RhdGljICBfX2luaXRTdGF0aWMoKSB7dGhpcy5DT01QT05FTlQgPSAnQG5lc3Rqcy9ldmVudC1lbWl0dGVyJzt9XG4gICBzdGF0aWMgIF9faW5pdFN0YXRpYzIoKSB7dGhpcy5DT01NT05fQVRUUklCVVRFUyA9IHtcbiAgICBjb21wb25lbnQ6IFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbi5DT01QT05FTlQsXG4gIH07fVxuXG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdzZW50cnktbmVzdGpzLWV2ZW50JywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW5zdHJ1bWVudGF0aW9uIGJ5IGRlZmluaW5nIHRoZSBtb2R1bGVzIHRvIGJlIHBhdGNoZWQuXG4gICAqL1xuICAgaW5pdCgpIHtcbiAgICBjb25zdCBtb2R1bGVEZWYgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uLkNPTVBPTkVOVCxcbiAgICAgIHN1cHBvcnRlZFZlcnNpb25zLFxuICAgICk7XG5cbiAgICBtb2R1bGVEZWYuZmlsZXMucHVzaCh0aGlzLl9nZXRPbkV2ZW50RmlsZUluc3RydW1lbnRhdGlvbihzdXBwb3J0ZWRWZXJzaW9ucykpO1xuICAgIHJldHVybiBtb2R1bGVEZWY7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgdGhlIEBPbkV2ZW50IGRlY29yYXRvci5cbiAgICovXG4gICBfZ2V0T25FdmVudEZpbGVJbnN0cnVtZW50YXRpb24odmVyc2lvbnMpIHtcbiAgICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRmlsZShcbiAgICAgICdAbmVzdGpzL2V2ZW50LWVtaXR0ZXIvZGlzdC9kZWNvcmF0b3JzL29uLWV2ZW50LmRlY29yYXRvci5qcycsXG4gICAgICB2ZXJzaW9ucyxcbiAgICAgIChtb2R1bGVFeHBvcnRzKSA9PiB7XG4gICAgICAgIGlmIChjb3JlJDEuaXNXcmFwcGVkKG1vZHVsZUV4cG9ydHMuT25FdmVudCkpIHtcbiAgICAgICAgICB0aGlzLl91bndyYXAobW9kdWxlRXhwb3J0cywgJ09uRXZlbnQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93cmFwKG1vZHVsZUV4cG9ydHMsICdPbkV2ZW50JywgdGhpcy5fY3JlYXRlV3JhcE9uRXZlbnQoKSk7XG4gICAgICAgIHJldHVybiBtb2R1bGVFeHBvcnRzO1xuICAgICAgfSxcbiAgICAgIChtb2R1bGVFeHBvcnRzKSA9PiB7XG4gICAgICAgIHRoaXMuX3Vud3JhcChtb2R1bGVFeHBvcnRzLCAnT25FdmVudCcpO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciB0aGUgQE9uRXZlbnQgZGVjb3JhdG9yLlxuICAgKi9cbiAgIF9jcmVhdGVXcmFwT25FdmVudCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHJldHVybiBmdW5jdGlvbiB3cmFwT25FdmVudChvcmlnaW5hbCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIHJldHVybiBmdW5jdGlvbiB3cmFwcGVkT25FdmVudChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBBcnJheS5pc0FycmF5KGV2ZW50KVxuICAgICAgICAgID8gZXZlbnQuam9pbignLCcpXG4gICAgICAgICAgOiB0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBldmVudCA9PT0gJ3N5bWJvbCdcbiAgICAgICAgICAgID8gZXZlbnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiAnPHVua25vd25fZXZlbnQ+JztcblxuICAgICAgICAvLyBHZXQgdGhlIG9yaWdpbmFsIGRlY29yYXRvciByZXN1bHRcbiAgICAgICAgY29uc3QgZGVjb3JhdG9yUmVzdWx0ID0gb3JpZ2luYWwoZXZlbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIFJldHVybiBhIG5ldyBkZWNvcmF0b3IgZnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgaGFuZGxlclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IudmFsdWUgfHwgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09ICdmdW5jdGlvbicgfHwgdGFyZ2V0Ll9fU0VOVFJZX0lOVEVSTkFMX18pIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JSZXN1bHQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gR2V0IHRoZSBvcmlnaW5hbCBoYW5kbGVyXG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxIYW5kbGVyID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgY29uc3QgaGFuZGxlck5hbWUgPSBvcmlnaW5hbEhhbmRsZXIubmFtZSB8fCBwcm9wZXJ0eUtleTtcblxuICAgICAgICAgIC8vIEluc3RydW1lbnQgdGhlIGhhbmRsZXJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUuc3RhcnRTcGFuKGhlbHBlcnMuZ2V0RXZlbnRTcGFuT3B0aW9ucyhldmVudE5hbWUpLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9yaWdpbmFsSGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbnMgZnJvbSBldmVudCBoYW5kbGVycyBhcmUgbm90IGNhdWdodCBieSBnbG9iYWwgZXJyb3IgZmlsdGVyXG4gICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFByZXNlcnZlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBuYW1lXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc2NyaXB0b3IudmFsdWUsICduYW1lJywge1xuICAgICAgICAgICAgdmFsdWU6IGhhbmRsZXJOYW1lLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gQXBwbHkgdGhlIG9yaWdpbmFsIGRlY29yYXRvclxuICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JSZXN1bHQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn0gU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uLl9faW5pdFN0YXRpYygpOyBTZW50cnlOZXN0RXZlbnRJbnN0cnVtZW50YXRpb24uX19pbml0U3RhdGljMigpO1xuXG5leHBvcnRzLlNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbiA9IFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbnRyeS1uZXN0LWV2ZW50LWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/common';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n\n    moduleDef.files.push(\n      this._getInjectableFileInstrumentation(supportedVersions),\n      this._getCatchFileInstrumentation(supportedVersions),\n    );\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n   _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/injectable.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Injectable)) {\n          this._unwrap(moduleExports, 'Injectable');\n        }\n        this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Injectable');\n      },\n    );\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n   _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/catch.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Catch)) {\n          this._unwrap(moduleExports, 'Catch');\n        }\n        this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Catch');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n   _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n\n                const prevSpan = core.getActiveSpan();\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (span) => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              },\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              },\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              },\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n\n                const parentSpan = core.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (beforeSpan) => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n\n                      if (parentSpan) {\n                        return core.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                          if (!context._sentryInterceptorInstrumented) {\n                            core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core.startInactiveSpan(\n                              helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'),\n                            );\n                          }\n\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                        if (!context._sentryInterceptorInstrumented) {\n                          core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n\n                        return handleReturnObservable;\n                      }\n                    },\n                  });\n\n                  let returnedObservableInterceptMaybePromise;\n\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (core.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(\n                      observable => {\n                        helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                        return observable;\n                      },\n                      e => {\n                        _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                        _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                        throw e;\n                      },\n                    );\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                  }\n\n                  return returnedObservableInterceptMaybePromise;\n                });\n              },\n            });\n          }\n\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n   _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              },\n            });\n          }\n\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}SentryNestInstrumentation.__initStatic();SentryNestInstrumentation.__initStatic2();\n\nexports.SentryNestInstrumentation = SentryNestInstrumentation;\n//# sourceMappingURL=sentry-nest-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanM/ZGQzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCByZXBsYWNlbWVudHMgPSBbXG4gIFsnamFudWFyeScsICcxJ10sXG4gIFsnZmVicnVhcnknLCAnMiddLFxuICBbJ21hcmNoJywgJzMnXSxcbiAgWydhcHJpbCcsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW5lJywgJzYnXSxcbiAgWydqdWx5JywgJzcnXSxcbiAgWydhdWd1c3QnLCAnOCddLFxuICBbJ3NlcHRlbWJlcicsICc5J10sXG4gIFsnb2N0b2JlcicsICcxMCddLFxuICBbJ25vdmVtYmVyJywgJzExJ10sXG4gIFsnZGVjZW1iZXInLCAnMTInXSxcbiAgWydqYW4nLCAnMSddLFxuICBbJ2ZlYicsICcyJ10sXG4gIFsnbWFyJywgJzMnXSxcbiAgWydhcHInLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuJywgJzYnXSxcbiAgWydqdWwnLCAnNyddLFxuICBbJ2F1ZycsICc4J10sXG4gIFsnc2VwJywgJzknXSxcbiAgWydvY3QnLCAnMTAnXSxcbiAgWydub3YnLCAnMTEnXSxcbiAgWydkZWMnLCAnMTInXSxcbiAgWydzdW5kYXknLCAnMCddLFxuICBbJ21vbmRheScsICcxJ10sXG4gIFsndHVlc2RheScsICcyJ10sXG4gIFsnd2VkbmVzZGF5JywgJzMnXSxcbiAgWyd0aHVyc2RheScsICc0J10sXG4gIFsnZnJpZGF5JywgJzUnXSxcbiAgWydzYXR1cmRheScsICc2J10sXG4gIFsnc3VuJywgJzAnXSxcbiAgWydtb24nLCAnMSddLFxuICBbJ3R1ZScsICcyJ10sXG4gIFsnd2VkJywgJzMnXSxcbiAgWyd0aHUnLCAnNCddLFxuICBbJ2ZyaScsICc1J10sXG4gIFsnc2F0JywgJzYnXSxcbl07XG5cbi8qKlxuICogUmVwbGFjZXMgbmFtZXMgaW4gY3JvbiBleHByZXNzaW9uc1xuICovXG5mdW5jdGlvbiByZXBsYWNlQ3Jvbk5hbWVzKGNyb25FeHByZXNzaW9uKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHMucmVkdWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3JcbiAgICAoYWNjLCBbbmFtZSwgcmVwbGFjZW1lbnRdKSA9PiBhY2MucmVwbGFjZShuZXcgUmVnRXhwKG5hbWUsICdnaScpLCByZXBsYWNlbWVudCksXG4gICAgY3JvbkV4cHJlc3Npb24sXG4gICk7XG59XG5cbmV4cG9ydHMucmVwbGFjZUNyb25OYW1lcyA9IHJlcGxhY2VDcm9uTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jcm9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywwSEFBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY3Jvbi5qcz85NWJiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbmNvbnN0IEVSUk9SX1RFWFQgPSAnQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiBDcm9uSm9iIG9ubHkgc3VwcG9ydHMgY3JvbnRhYiBzdHJpbmcnO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgY3JvbmAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0IHsgQ3JvbkpvYiB9IGZyb20gJ2Nyb24nO1xuICpcbiAqIGNvbnN0IENyb25Kb2JXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnRDcm9uKENyb25Kb2IsICdteS1jcm9uLWpvYicpO1xuICpcbiAqIC8vIHVzZSB0aGUgY29uc3RydWN0b3JcbiAqIGNvbnN0IGpvYiA9IG5ldyBDcm9uSm9iV2l0aENoZWNrSW4oJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICpcbiAqIC8vIG9yIGZyb21cbiAqIGNvbnN0IGpvYiA9IENyb25Kb2JXaXRoQ2hlY2tJbi5mcm9tKHsgY3JvblRpbWU6ICcqICogKiAqIConLCBvblRpY2s6ICgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Q3JvbihsaWIsIG1vbml0b3JTbHVnKSB7XG4gIGxldCBqb2JTY2hlZHVsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3MpIHtcbiAgICAgIGNvbnN0IFtjcm9uVGltZSwgb25UaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3RdID0gYXJncztcblxuICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgfVxuXG4gICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRUaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICB0aW1lem9uZTogdGltZVpvbmUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgdGFyZ2V0KGNyb25UaW1lLCBtb25pdG9yZWRUaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3QpO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdmcm9tJykge1xuICAgICAgICByZXR1cm4gKHBhcmFtKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjcm9uVGltZSwgb25UaWNrLCB0aW1lWm9uZSB9ID0gcGFyYW07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNyb25UaW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChqb2JTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGpvYlNjaGVkdWxlZCA9IHRydWU7XG5cbiAgICAgICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICAgICAgcGFyYW0ub25UaWNrID0gYXN5bmMgKGNvbnRleHQsIG9uQ29tcGxldGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBvblRpY2soY29udGV4dCwgb25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiB0YXJnZXQuZnJvbShwYXJhbSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnRDcm9uID0gaW5zdHJ1bWVudENyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGVBQWUsbUJBQU8sQ0FBQyxzSEFBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxnSUFBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsd0lBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vaW5kZXguanM/NThmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjcm9uJDEgPSByZXF1aXJlKCcuL2Nyb24uanMnKTtcbmNvbnN0IG5vZGVDcm9uID0gcmVxdWlyZSgnLi9ub2RlLWNyb24uanMnKTtcbmNvbnN0IG5vZGVTY2hlZHVsZSA9IHJlcXVpcmUoJy4vbm9kZS1zY2hlZHVsZS5qcycpO1xuXG4vKiogTWV0aG9kcyB0byBpbnN0cnVtZW50IGNyb24gbGlicmFyaWVzIGZvciBTZW50cnkgY2hlY2staW5zICovXG5jb25zdCBjcm9uID0ge1xuICBpbnN0cnVtZW50Q3JvbjogY3JvbiQxLmluc3RydW1lbnRDcm9uLFxuICBpbnN0cnVtZW50Tm9kZUNyb246IG5vZGVDcm9uLmluc3RydW1lbnROb2RlQ3JvbixcbiAgaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTogbm9kZVNjaGVkdWxlLmluc3RydW1lbnROb2RlU2NoZWR1bGUsXG59O1xuXG5leHBvcnRzLmNyb24gPSBjcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                options.name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone]),\n                },\n              );\n            }\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLWNyb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsMEhBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE9BQU8scUJBQXFCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzPzgyY2QiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLyoqXG4gKiBXcmFwcyB0aGUgYG5vZGUtY3JvbmAgbGlicmFyeSB3aXRoIGNoZWNrLWluIG1vbml0b3JpbmcuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS9ub2RlXCI7XG4gKiBpbXBvcnQgKiBhcyBjcm9uIGZyb20gXCJub2RlLWNyb25cIjtcbiAqXG4gKiBjb25zdCBjcm9uV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Tm9kZUNyb24oY3Jvbik7XG4gKlxuICogY3JvbldpdGhDaGVja0luLnNjaGVkdWxlKFxuICogICBcIiogKiAqICogKlwiLFxuICogICAoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coXCJydW5uaW5nIGEgdGFzayBldmVyeSBtaW51dGVcIik7XG4gKiAgIH0sXG4gKiAgIHsgbmFtZTogXCJteS1jcm9uLWpvYlwiIH0sXG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnROb2RlQ3JvbihsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlJyAmJiB0YXJnZXQuc2NoZWR1bGUpIHtcbiAgICAgICAgLy8gV2hlbiAnZ2V0JyBpcyBjYWxsZWQgZm9yIHNjaGVkdWxlLCByZXR1cm4gYSBwcm94aWVkIHZlcnNpb24gb2YgdGhlIHNjaGVkdWxlIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW2V4cHJlc3Npb24sIGNhbGxiYWNrLCBvcHRpb25zXSA9IGFyZ0FycmF5O1xuXG4gICAgICAgICAgICBpZiAoIV9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8ubmFtZV0pKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcIm5hbWVcIiBmb3Igc2NoZWR1bGVkIGpvYi4gQSBuYW1lIGlzIHJlcXVpcmVkIGZvciBTZW50cnkgY2hlY2staW4gbW9uaXRvcmluZy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIG1hbnVhbGx5IGNhdGNoIGhlcmUgYW5kIGNhcHR1cmUgdGhlIGV4Y2VwdGlvbiBiZWNhdXNlIG5vZGUtY3JvbiBzd2FsbG93cyBlcnJvcnNcbiAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWNyb24vbm9kZS1jcm9uL2lzc3Vlcy8zOTlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgICAgdGltZXpvbmU6IF9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi50aW1lem9uZV0pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW2V4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrLCBvcHRpb25zXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlQ3JvbiA9IGluc3RydW1lbnROb2RlQ3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtY3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await _optionalChain([callback, 'optionalCall', _ => _()]);\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLXNjaGVkdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDBIQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw4QkFBOEIsNkRBQTZEO0FBQzNGLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1zY2hlZHVsZS5qcz8wZGRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBub2RlLXNjaGVkdWxlYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcbiAqXG4gKiBjb25zdCBzY2hlZHVsZVdpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShzY2hlZHVsZSk7XG4gKlxuICogY29uc3Qgam9iID0gc2NoZWR1bGVXaXRoQ2hlY2tJbi5zY2hlZHVsZUpvYignbXktY3Jvbi1qb2InLCAnKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlSm9iJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlSm9iLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW25hbWVPckV4cHJlc3Npb24sIGV4cHJlc3Npb25PckNhbGxiYWNrLCBjYWxsYmFja10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0eXBlb2YgbmFtZU9yRXhwcmVzc2lvbiAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGV4cHJlc3Npb25PckNhbGxiYWNrICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mICdub2RlLXNjaGVkdWxlJyByZXF1aXJlcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mICdzY2hlZHVsZUpvYicgdG8gYmUgYSBqb2IgbmFtZSBzdHJpbmcgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGEgY3JvbnRhYiBzdHJpbmdcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSBuYW1lT3JFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PckNhbGxiYWNrO1xuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgX29wdGlvbmFsQ2hhaW4oW2NhbGxiYWNrLCAnb3B0aW9uYWxDYWxsJywgXyA9PiBfKCldKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGV4cHJlc3Npb24pIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBbbW9uaXRvclNsdWcsIGV4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSA9IGluc3RydW1lbnROb2RlU2NoZWR1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXNjaGVkdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQXVDLElBQUksS0FBZ0I7O0FBRWhGLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcz83ODFjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = childProcess.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = core.DEFAULT_USER_INCLUDES;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.addRequestDataToEvent = core.addRequestDataToEvent;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.extractRequestData = core.extractRequestData;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.continueTrace = opentelemetry.continueTrace;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxjQUFjLG1CQUFPLENBQUMsdUpBQThCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLHVKQUE4QjtBQUN4RCxXQUFXLG1CQUFPLENBQUMsdUlBQXNCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLGlKQUEyQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyxpSkFBMkI7QUFDbkQscUJBQXFCLG1CQUFPLENBQUMsMkpBQWdDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDZLQUF5QztBQUNqRSxnQkFBZ0IsbUJBQU8sQ0FBQyxpSkFBMkI7QUFDbkQsNEJBQTRCLG1CQUFPLENBQUMseUtBQXVDO0FBQzNFLDZCQUE2QixtQkFBTyxDQUFDLDJLQUF3QztBQUM3RSxnQkFBZ0IsbUJBQU8sQ0FBQyxxSkFBNkI7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsaUtBQW1DO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLGlLQUFtQztBQUMzRCxnQkFBZ0IsbUJBQU8sQ0FBQyxpS0FBbUM7QUFDM0QsY0FBYyxtQkFBTyxDQUFDLDZKQUFpQztBQUN2RCxvQkFBb0IsbUJBQU8sQ0FBQyx5S0FBdUM7QUFDbkUsY0FBYyxtQkFBTyxDQUFDLDZKQUFpQztBQUN2RCxpQkFBaUIsbUJBQU8sQ0FBQyxtS0FBb0M7QUFDN0QsY0FBYyxtQkFBTyxDQUFDLDZKQUFpQztBQUN2RCxlQUFlLG1CQUFPLENBQUMsK0pBQWtDO0FBQ3pELGNBQWMsbUJBQU8sQ0FBQyw2SkFBaUM7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLHFLQUFxQztBQUMxRCxpQkFBaUIsbUJBQU8sQ0FBQyxtS0FBb0M7QUFDN0QsZUFBZSxtQkFBTyxDQUFDLCtKQUFrQztBQUN6RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1S0FBc0M7QUFDOUQsWUFBWSxtQkFBTyxDQUFDLHlKQUErQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyxpS0FBbUM7QUFDM0Qsa0JBQWtCLG1CQUFPLENBQUMscUpBQTZCO0FBQ3ZELGFBQWEsbUJBQU8sQ0FBQywySkFBZ0M7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsaUtBQW1DO0FBQzNELG9CQUFvQixtQkFBTyxDQUFDLHlLQUF1QztBQUNuRSxtQkFBbUIsbUJBQU8sQ0FBQyx1S0FBc0M7QUFDakUsZ0JBQWdCLG1CQUFPLENBQUMsaUtBQW1DO0FBQzNELHFCQUFxQixtQkFBTyxDQUFDLDJKQUFnQztBQUM3RCx1QkFBdUIsbUJBQU8sQ0FBQywrSUFBMEI7QUFDekQsbUJBQW1CLG1CQUFPLENBQUMsdUlBQXNCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLDJIQUFnQjtBQUN4QyxpQkFBaUIsbUJBQU8sQ0FBQyxpSUFBbUI7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsNkpBQWlDO0FBQ3pELFlBQVksbUJBQU8sQ0FBQyx1SEFBYztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpSUFBbUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHVJQUFzQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMsNkhBQWlCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLDZIQUFpQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsNE9BQXVCOzs7O0FBSXJELHVCQUF1QjtBQUN2QixrQ0FBa0M7QUFDbEMscUJBQXFCO0FBQ3JCLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsK0JBQStCO0FBQy9CLGlDQUFpQztBQUNqQywwQkFBMEI7QUFDMUIsc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2QyxzQkFBc0I7QUFDdEIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQixnQ0FBZ0M7QUFDaEMsMEJBQTBCO0FBQzFCLGdDQUFnQztBQUNoQywwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLDhCQUE4QjtBQUM5Qix3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6Qix1QkFBdUI7QUFDdkIsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0Qiw0QkFBNEI7QUFDNUIsMEJBQTBCO0FBQzFCLGdDQUFnQztBQUNoQyw0QkFBNEI7QUFDNUIsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLDBCQUEwQjtBQUMxQiwrQkFBK0I7QUFDL0IsMENBQTBDO0FBQzFDLDRCQUE0QjtBQUM1Qiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLGdEQUFnRDtBQUNoRCxZQUFZO0FBQ1osc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLHNDQUFzQztBQUN0QywwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLG1DQUFtQztBQUNuQyx5QkFBeUI7QUFDekIsa0JBQWtCO0FBQ2xCLFlBQVk7QUFDWiw2QkFBNkI7QUFDN0IsbUJBQW1CO0FBQ25CLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsNkNBQTZDO0FBQzdDLHdDQUF3QztBQUN4QyxhQUFhO0FBQ2IscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QixpQ0FBaUM7QUFDakMsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsa0JBQWtCO0FBQ2xCLGlDQUFpQztBQUNqQywwQkFBMEI7QUFDMUIsYUFBYTtBQUNiLG1DQUFtQztBQUNuQyxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLHFCQUFxQjtBQUNyQix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLHlCQUF5QjtBQUN6QixtQkFBbUI7QUFDbkIsMEJBQTBCO0FBQzFCLGlDQUFpQztBQUNqQyxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLGlDQUFpQztBQUNqQyxxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLCtCQUErQjtBQUMvQixlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLGdCQUFnQjtBQUNoQiw4QkFBOEI7QUFDOUIsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0QixjQUFjO0FBQ2QsZUFBZTtBQUNmLGVBQWU7QUFDZiwyQkFBMkI7QUFDM0Isa0JBQWtCO0FBQ2xCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQixpQkFBaUI7QUFDakIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLDRCQUE0QjtBQUM1Qix1Q0FBdUM7QUFDdkMscUJBQXFCO0FBQ3JCLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbmRleC5qcz9iYzU5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcycpO1xuY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC5qcycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9mcy5qcycpO1xuY29uc3QgY29uc29sZSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2NvbnNvbGUuanMnKTtcbmNvbnN0IGNvbnRleHQgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9jb250ZXh0LmpzJyk7XG5jb25zdCBjb250ZXh0bGluZXMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9jb250ZXh0bGluZXMuanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanMnKTtcbmNvbnN0IG1vZHVsZXMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzJyk7XG5jb25zdCBvbnVuY2F1Z2h0ZXhjZXB0aW9uID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvb251bmNhdWdodGV4Y2VwdGlvbi5qcycpO1xuY29uc3Qgb251bmhhbmRsZWRyZWplY3Rpb24gPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9vbnVuaGFuZGxlZHJlamVjdGlvbi5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2Fuci9pbmRleC5qcycpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvZXhwcmVzcy5qcycpO1xuY29uc3QgZmFzdGlmeSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS5qcycpO1xuY29uc3QgZ3JhcGhxbCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcycpO1xuY29uc3Qga2Fma2EgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL2thZmthLmpzJyk7XG5jb25zdCBscnVtZW1vaXplciA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMnKTtcbmNvbnN0IG1vbmdvID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nby5qcycpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvb3NlLmpzJyk7XG5jb25zdCBteXNxbCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMnKTtcbmNvbnN0IG15c3FsMiA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzJyk7XG5jb25zdCByZWRpcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMnKTtcbmNvbnN0IG5lc3QgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3QvbmVzdC5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzJyk7XG5jb25zdCBwcmlzbWEgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL3ByaXNtYS5qcycpO1xuY29uc3QgaW5kZXgkMyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcycpO1xuY29uc3Qga29hID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL2Nvbm5lY3QuanMnKTtcbmNvbnN0IHNwb3RsaWdodCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcycpO1xuY29uc3Qga25leCA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcycpO1xuY29uc3QgdGVkaW91cyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBkYXRhbG9hZGVyID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9kYXRhbG9hZGVyLmpzJyk7XG5jb25zdCBhbXFwbGliID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzJyk7XG5jb25zdCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9jaGlsZFByb2Nlc3MuanMnKTtcbmNvbnN0IGNvbnRleHRNYW5hZ2VyID0gcmVxdWlyZSgnLi9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGluZGV4JDQgPSByZXF1aXJlKCcuL3Nkay9pbmRleC5qcycpO1xuY29uc3QgaW5pdE90ZWwgPSByZXF1aXJlKCcuL3Nkay9pbml0T3RlbC5qcycpO1xuY29uc3QgaW5kZXgkNSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJy4vc2RrL2FwaS5qcycpO1xuY29uc3QgbW9kdWxlJDEgPSByZXF1aXJlKCcuL3V0aWxzL21vZHVsZS5qcycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9odHRwLmpzJyk7XG5jb25zdCBjbGllbnQgPSByZXF1aXJlKCcuL3Nkay9jbGllbnQuanMnKTtcbmNvbnN0IGluZGV4JDYgPSByZXF1aXJlKCcuL2Nyb24vaW5kZXguanMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuXG5cbmV4cG9ydHMuaHR0cEludGVncmF0aW9uID0gaW5kZXguaHR0cEludGVncmF0aW9uO1xuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5vZGVGZXRjaC5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZnNJbnRlZ3JhdGlvbiA9IGZzLmZzSW50ZWdyYXRpb247XG5leHBvcnRzLmNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvbnNvbGUuY29uc29sZUludGVncmF0aW9uO1xuZXhwb3J0cy5ub2RlQ29udGV4dEludGVncmF0aW9uID0gY29udGV4dC5ub2RlQ29udGV4dEludGVncmF0aW9uO1xuZXhwb3J0cy5jb250ZXh0TGluZXNJbnRlZ3JhdGlvbiA9IGNvbnRleHRsaW5lcy5jb250ZXh0TGluZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IGluZGV4JDEubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubW9kdWxlc0ludGVncmF0aW9uID0gbW9kdWxlcy5tb2R1bGVzSW50ZWdyYXRpb247XG5leHBvcnRzLm9uVW5jYXVnaHRFeGNlcHRpb25JbnRlZ3JhdGlvbiA9IG9udW5jYXVnaHRleGNlcHRpb24ub25VbmNhdWdodEV4Y2VwdGlvbkludGVncmF0aW9uO1xuZXhwb3J0cy5vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gb251bmhhbmRsZWRyZWplY3Rpb24ub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbjtcbmV4cG9ydHMuYW5ySW50ZWdyYXRpb24gPSBpbmRleCQyLmFuckludGVncmF0aW9uO1xuZXhwb3J0cy5leHByZXNzRXJyb3JIYW5kbGVyID0gZXhwcmVzcy5leHByZXNzRXJyb3JIYW5kbGVyO1xuZXhwb3J0cy5leHByZXNzSW50ZWdyYXRpb24gPSBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBFeHByZXNzRXJyb3JIYW5kbGVyID0gZXhwcmVzcy5zZXR1cEV4cHJlc3NFcnJvckhhbmRsZXI7XG5leHBvcnRzLmZhc3RpZnlJbnRlZ3JhdGlvbiA9IGZhc3RpZnkuZmFzdGlmeUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEZhc3RpZnlFcnJvckhhbmRsZXIgPSBmYXN0aWZ5LnNldHVwRmFzdGlmeUVycm9ySGFuZGxlcjtcbmV4cG9ydHMuZ3JhcGhxbEludGVncmF0aW9uID0gZ3JhcGhxbC5ncmFwaHFsSW50ZWdyYXRpb247XG5leHBvcnRzLmthZmthSW50ZWdyYXRpb24gPSBrYWZrYS5rYWZrYUludGVncmF0aW9uO1xuZXhwb3J0cy5scnVNZW1vaXplckludGVncmF0aW9uID0gbHJ1bWVtb2l6ZXIubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubW9uZ29JbnRlZ3JhdGlvbiA9IG1vbmdvLm1vbmdvSW50ZWdyYXRpb247XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZS5tb25nb29zZUludGVncmF0aW9uO1xuZXhwb3J0cy5teXNxbEludGVncmF0aW9uID0gbXlzcWwubXlzcWxJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDIubXlzcWwySW50ZWdyYXRpb247XG5leHBvcnRzLnJlZGlzSW50ZWdyYXRpb24gPSByZWRpcy5yZWRpc0ludGVncmF0aW9uO1xuZXhwb3J0cy5uZXN0SW50ZWdyYXRpb24gPSBuZXN0Lm5lc3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBOZXN0RXJyb3JIYW5kbGVyID0gbmVzdC5zZXR1cE5lc3RFcnJvckhhbmRsZXI7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlcy5wb3N0Z3Jlc0ludGVncmF0aW9uO1xuZXhwb3J0cy5wcmlzbWFJbnRlZ3JhdGlvbiA9IHByaXNtYS5wcmlzbWFJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaGFwaUludGVncmF0aW9uID0gaW5kZXgkMy5oYXBpSW50ZWdyYXRpb247XG5leHBvcnRzLnNldHVwSGFwaUVycm9ySGFuZGxlciA9IGluZGV4JDMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYS5rb2FJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBLb2FFcnJvckhhbmRsZXIgPSBrb2Euc2V0dXBLb2FFcnJvckhhbmRsZXI7XG5leHBvcnRzLmNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvbm5lY3QuY29ubmVjdEludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSBjb25uZWN0LnNldHVwQ29ubmVjdEVycm9ySGFuZGxlcjtcbmV4cG9ydHMuc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBzcG90bGlnaHQuc3BvdGxpZ2h0SW50ZWdyYXRpb247XG5leHBvcnRzLmtuZXhJbnRlZ3JhdGlvbiA9IGtuZXgua25leEludGVncmF0aW9uO1xuZXhwb3J0cy50ZWRpb3VzSW50ZWdyYXRpb24gPSB0ZWRpb3VzLnRlZGlvdXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sLmdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGRhdGFsb2FkZXIuZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5hbXFwbGliSW50ZWdyYXRpb24gPSBhbXFwbGliLmFtcXBsaWJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjaGlsZFByb2Nlc3MuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG5leHBvcnRzLnByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24gPSBjaGlsZFByb2Nlc3MucHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBjb250ZXh0TWFuYWdlci5TZW50cnlDb250ZXh0TWFuYWdlcjtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZTtcbmV4cG9ydHMuZ2V0RGVmYXVsdEludGVncmF0aW9ucyA9IGluZGV4JDQuZ2V0RGVmYXVsdEludGVncmF0aW9ucztcbmV4cG9ydHMuZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZSA9IGluZGV4JDQuZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZTtcbmV4cG9ydHMuaW5pdCA9IGluZGV4JDQuaW5pdDtcbmV4cG9ydHMuaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zID0gaW5kZXgkNC5pbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLnZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwID0gaW5kZXgkNC52YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cDtcbmV4cG9ydHMuaW5pdE9wZW5UZWxlbWV0cnkgPSBpbml0T3RlbC5pbml0T3BlblRlbGVtZXRyeTtcbmV4cG9ydHMucHJlbG9hZE9wZW5UZWxlbWV0cnkgPSBpbml0T3RlbC5wcmVsb2FkT3BlblRlbGVtZXRyeTtcbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gaW5kZXgkNS5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmRlZmF1bHRTdGFja1BhcnNlciA9IGFwaS5kZWZhdWx0U3RhY2tQYXJzZXI7XG5leHBvcnRzLmdldFNlbnRyeVJlbGVhc2UgPSBhcGkuZ2V0U2VudHJ5UmVsZWFzZTtcbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gbW9kdWxlJDEuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuZXhwb3J0cy5tYWtlTm9kZVRyYW5zcG9ydCA9IGh0dHAubWFrZU5vZGVUcmFuc3BvcnQ7XG5leHBvcnRzLk5vZGVDbGllbnQgPSBjbGllbnQuTm9kZUNsaWVudDtcbmV4cG9ydHMuY3JvbiA9IGluZGV4JDYuY3JvbjtcbmV4cG9ydHMuREVGQVVMVF9VU0VSX0lOQ0xVREVTID0gY29yZS5ERUZBVUxUX1VTRVJfSU5DTFVERVM7XG5leHBvcnRzLlNES19WRVJTSU9OID0gY29yZS5TREtfVkVSU0lPTjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCA9IGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSBjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSA9IGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0U7XG5leHBvcnRzLlNjb3BlID0gY29yZS5TY29wZTtcbmV4cG9ydHMuYWRkQnJlYWRjcnVtYiA9IGNvcmUuYWRkQnJlYWRjcnVtYjtcbmV4cG9ydHMuYWRkRXZlbnRQcm9jZXNzb3IgPSBjb3JlLmFkZEV2ZW50UHJvY2Vzc29yO1xuZXhwb3J0cy5hZGRJbnRlZ3JhdGlvbiA9IGNvcmUuYWRkSW50ZWdyYXRpb247XG5leHBvcnRzLmFkZFJlcXVlc3REYXRhVG9FdmVudCA9IGNvcmUuYWRkUmVxdWVzdERhdGFUb0V2ZW50O1xuZXhwb3J0cy5jYXB0dXJlQ2hlY2tJbiA9IGNvcmUuY2FwdHVyZUNoZWNrSW47XG5leHBvcnRzLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSBjb3JlLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb247XG5leHBvcnRzLmNhcHR1cmVFdmVudCA9IGNvcmUuY2FwdHVyZUV2ZW50O1xuZXhwb3J0cy5jYXB0dXJlRXhjZXB0aW9uID0gY29yZS5jYXB0dXJlRXhjZXB0aW9uO1xuZXhwb3J0cy5jYXB0dXJlRmVlZGJhY2sgPSBjb3JlLmNhcHR1cmVGZWVkYmFjaztcbmV4cG9ydHMuY2FwdHVyZU1lc3NhZ2UgPSBjb3JlLmNhcHR1cmVNZXNzYWdlO1xuZXhwb3J0cy5jYXB0dXJlU2Vzc2lvbiA9IGNvcmUuY2FwdHVyZVNlc3Npb247XG5leHBvcnRzLmNsb3NlID0gY29yZS5jbG9zZTtcbmV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ID0gY29yZS5jcmVhdGVUcmFuc3BvcnQ7XG5leHBvcnRzLmRlYnVnSW50ZWdyYXRpb24gPSBjb3JlLmRlYnVnSW50ZWdyYXRpb247XG5leHBvcnRzLmRlZHVwZUludGVncmF0aW9uID0gY29yZS5kZWR1cGVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZW5kU2Vzc2lvbiA9IGNvcmUuZW5kU2Vzc2lvbjtcbmV4cG9ydHMuZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbiA9IGNvcmUuZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZXh0cmFjdFJlcXVlc3REYXRhID0gY29yZS5leHRyYWN0UmVxdWVzdERhdGE7XG5leHBvcnRzLmZsdXNoID0gY29yZS5mbHVzaDtcbmV4cG9ydHMuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uID0gY29yZS5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb247XG5leHBvcnRzLmdldEFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW47XG5leHBvcnRzLmdldENsaWVudCA9IGNvcmUuZ2V0Q2xpZW50O1xuZXhwb3J0cy5nZXRDdXJyZW50SHViID0gY29yZS5nZXRDdXJyZW50SHViO1xuZXhwb3J0cy5nZXRDdXJyZW50U2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZTtcbmV4cG9ydHMuZ2V0R2xvYmFsU2NvcGUgPSBjb3JlLmdldEdsb2JhbFNjb3BlO1xuZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmdldFJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbjtcbmV4cG9ydHMuZ2V0U3BhbkRlc2NlbmRhbnRzID0gY29yZS5nZXRTcGFuRGVzY2VuZGFudHM7XG5leHBvcnRzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUgPSBjb3JlLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGU7XG5leHBvcnRzLmdldFRyYWNlRGF0YSA9IGNvcmUuZ2V0VHJhY2VEYXRhO1xuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gY29yZS5nZXRUcmFjZU1ldGFUYWdzO1xuZXhwb3J0cy5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uID0gY29yZS5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uO1xuZXhwb3J0cy5pc0luaXRpYWxpemVkID0gY29yZS5pc0luaXRpYWxpemVkO1xuZXhwb3J0cy5sYXN0RXZlbnRJZCA9IGNvcmUubGFzdEV2ZW50SWQ7XG5leHBvcnRzLmxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gY29yZS5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMubWV0cmljcyA9IGNvcmUubWV0cmljc0RlZmF1bHQ7XG5leHBvcnRzLnBhcmFtZXRlcml6ZSA9IGNvcmUucGFyYW1ldGVyaXplO1xuZXhwb3J0cy5wcm9maWxlciA9IGNvcmUucHJvZmlsZXI7XG5leHBvcnRzLnJlcXVlc3REYXRhSW50ZWdyYXRpb24gPSBjb3JlLnJlcXVlc3REYXRhSW50ZWdyYXRpb247XG5leHBvcnRzLnJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUucmV3cml0ZUZyYW1lc0ludGVncmF0aW9uO1xuZXhwb3J0cy5zZXNzaW9uVGltaW5nSW50ZWdyYXRpb24gPSBjb3JlLnNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0Q29udGV4dCA9IGNvcmUuc2V0Q29udGV4dDtcbmV4cG9ydHMuc2V0Q3VycmVudENsaWVudCA9IGNvcmUuc2V0Q3VycmVudENsaWVudDtcbmV4cG9ydHMuc2V0RXh0cmEgPSBjb3JlLnNldEV4dHJhO1xuZXhwb3J0cy5zZXRFeHRyYXMgPSBjb3JlLnNldEV4dHJhcztcbmV4cG9ydHMuc2V0SHR0cFN0YXR1cyA9IGNvcmUuc2V0SHR0cFN0YXR1cztcbmV4cG9ydHMuc2V0TWVhc3VyZW1lbnQgPSBjb3JlLnNldE1lYXN1cmVtZW50O1xuZXhwb3J0cy5zZXRUYWcgPSBjb3JlLnNldFRhZztcbmV4cG9ydHMuc2V0VGFncyA9IGNvcmUuc2V0VGFncztcbmV4cG9ydHMuc2V0VXNlciA9IGNvcmUuc2V0VXNlcjtcbmV4cG9ydHMuc3BhblRvQmFnZ2FnZUhlYWRlciA9IGNvcmUuc3BhblRvQmFnZ2FnZUhlYWRlcjtcbmV4cG9ydHMuc3BhblRvSlNPTiA9IGNvcmUuc3BhblRvSlNPTjtcbmV4cG9ydHMuc3BhblRvVHJhY2VIZWFkZXIgPSBjb3JlLnNwYW5Ub1RyYWNlSGVhZGVyO1xuZXhwb3J0cy5zdGFydEluYWN0aXZlU3BhbiA9IGNvcmUuc3RhcnRJbmFjdGl2ZVNwYW47XG5leHBvcnRzLnN0YXJ0TmV3VHJhY2UgPSBjb3JlLnN0YXJ0TmV3VHJhY2U7XG5leHBvcnRzLnN0YXJ0U2Vzc2lvbiA9IGNvcmUuc3RhcnRTZXNzaW9uO1xuZXhwb3J0cy5zdGFydFNwYW4gPSBjb3JlLnN0YXJ0U3BhbjtcbmV4cG9ydHMuc3RhcnRTcGFuTWFudWFsID0gY29yZS5zdGFydFNwYW5NYW51YWw7XG5leHBvcnRzLnN1cHByZXNzVHJhY2luZyA9IGNvcmUuc3VwcHJlc3NUcmFjaW5nO1xuZXhwb3J0cy50cnBjTWlkZGxld2FyZSA9IGNvcmUudHJwY01pZGRsZXdhcmU7XG5leHBvcnRzLndpdGhBY3RpdmVTcGFuID0gY29yZS53aXRoQWN0aXZlU3BhbjtcbmV4cG9ydHMud2l0aElzb2xhdGlvblNjb3BlID0gY29yZS53aXRoSXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLndpdGhNb25pdG9yID0gY29yZS53aXRoTW9uaXRvcjtcbmV4cG9ydHMud2l0aFNjb3BlID0gY29yZS53aXRoU2NvcGU7XG5leHBvcnRzLnpvZEVycm9yc0ludGVncmF0aW9uID0gY29yZS56b2RFcnJvcnNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuYWRkT3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvbiA9IG9wZW50ZWxlbWV0cnkuYWRkT3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvbjtcbmV4cG9ydHMuY29udGludWVUcmFjZSA9IG9wZW50ZWxlbWV0cnkuY29udGludWVUcmFjZTtcbmV4cG9ydHMuc2V0Tm9kZUFzeW5jQ29udGV4dFN0cmF0ZWd5ID0gb3BlbnRlbGVtZXRyeS5zZXRPcGVuVGVsZW1ldHJ5Q29udGV4dEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    setup(initClient) {\n      client = initClient;\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\nfunction onModuleLoad(callback) {\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.require.end').subscribe(() => callback());\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.import.asyncEnd').subscribe(() => callback());\n}\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n   _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n   _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  let debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n\n  onModuleLoad(() => {\n    debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n  });\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n// TODO(v9): Update this name and mention in migration docs.\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker );\n        }\n      });\n    },\n  };\n});\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n *\n * @deprecated Use `childProcessIntegration` integration instead. Functionally they are the same. `processThreadBreadcrumbIntegration` will be removed in the next major version.\n */\nconst processThreadBreadcrumbIntegration = childProcessIntegration;\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      core.addBreadcrumb({\n        category: 'worker_thread',\n        message: `Worker thread errored with '${error.message}'`,\n        level: 'error',\n        data: { threadId },\n      });\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELEtBQUs7QUFDN0Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtELGNBQWM7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUEsK0JBQStCO0FBQy9CLDBDQUEwQztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzPzQ2ZjEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGlhZ25vc3RpY3NDaGFubmVsID0gcmVxdWlyZSgnbm9kZTpkaWFnbm9zdGljc19jaGFubmVsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8vIFRPRE8odjkpOiBVcGRhdGUgdGhpcyBuYW1lIGFuZCBtZW50aW9uIGluIG1pZ3JhdGlvbiBkb2NzLlxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcm9jZXNzQW5kVGhyZWFkQnJlYWRjcnVtYnMnO1xuXG4vKipcbiAqIENhcHR1cmUgYnJlYWRjcnVtYnMgZm9yIGNoaWxkIHByb2Nlc3NlcyBhbmQgd29ya2VyIHRocmVhZHMuXG4gKi9cbmNvbnN0IGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChfY2xpZW50KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGRpYWdub3N0aWNzQ2hhbm5lbC5jaGFubmVsKCdjaGlsZF9wcm9jZXNzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAncHJvY2VzcycgaW4gZXZlbnQpIHtcbiAgICAgICAgICBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGV2ZW50LnByb2Nlc3MgLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ3dvcmtlcl90aHJlYWRzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnd29ya2VyJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMoZXZlbnQud29ya2VyICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuLyoqXG4gKiBDYXB0dXJlIGJyZWFkY3J1bWJzIGZvciBjaGlsZCBwcm9jZXNzZXMgYW5kIHdvcmtlciB0aHJlYWRzLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgY2hpbGRQcm9jZXNzSW50ZWdyYXRpb25gIGludGVncmF0aW9uIGluc3RlYWQuIEZ1bmN0aW9uYWxseSB0aGV5IGFyZSB0aGUgc2FtZS4gYHByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb25gIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5jb25zdCBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG5cbmZ1bmN0aW9uIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoY2hpbGQsIG9wdGlvbnMpIHtcbiAgbGV0IGhhc0V4aXRlZCA9IGZhbHNlO1xuICBsZXQgZGF0YTtcblxuICBjaGlsZFxuICAgIC5vbignc3Bhd24nLCAoKSA9PiB7XG4gICAgICAvLyBUaGlzIGlzIFNlbnRyeSBnZXR0aW5nIG1hY09TIE9TIGNvbnRleHRcbiAgICAgIGlmIChjaGlsZC5zcGF3bmZpbGUgPT09ICcvdXNyL2Jpbi9zd192ZXJzJykge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSB7IHNwYXduZmlsZTogY2hpbGQuc3Bhd25maWxlIH07XG4gICAgICBpZiAob3B0aW9ucy5pbmNsdWRlQ2hpbGRQcm9jZXNzQXJncykge1xuICAgICAgICBkYXRhLnNwYXduYXJncyA9IGNoaWxkLnNwYXduYXJncztcbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZXhpdCcsIGNvZGUgPT4ge1xuICAgICAgaWYgKCFoYXNFeGl0ZWQpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBPbmx5IGxvZyBmb3Igbm9uLXplcm8gZXhpdCBjb2Rlc1xuICAgICAgICBpZiAoY29kZSAhPT0gbnVsbCAmJiBjb2RlICE9PSAwKSB7XG4gICAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2hpbGRfcHJvY2VzcycsXG4gICAgICAgICAgICBtZXNzYWdlOiBgQ2hpbGQgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2AsXG4gICAgICAgICAgICBsZXZlbDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKHdvcmtlcikge1xuICBsZXQgdGhyZWFkSWQ7XG5cbiAgd29ya2VyXG4gICAgLm9uKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICB0aHJlYWRJZCA9IHdvcmtlci50aHJlYWRJZDtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICBjYXRlZ29yeTogJ3dvcmtlcl90aHJlYWQnLFxuICAgICAgICBtZXNzYWdlOiBgV29ya2VyIHRocmVhZCBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgIGRhdGE6IHsgdGhyZWFkSWQgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnRzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG5leHBvcnRzLnByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24gPSBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hpbGRQcm9jZXNzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      core.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n\n        core.addBreadcrumb(\n          {\n            category: 'console',\n            level: core.severityLevelFromString(level),\n            message: core.truncate(util.format.apply(undefined, args), 2048), // 2KB\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n});\n\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxhQUFhO0FBQzVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcz9iYzkxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCdub2RlOnV0aWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25zb2xlJztcblxuLyoqXG4gKiBDYXB0dXJlIGNvbnNvbGUgbG9ncyBhcyBicmVhZGNydW1icy5cbiAqL1xuY29uc3QgY29uc29sZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNvcmUuYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoKHsgYXJncywgbGV2ZWwgfSkgPT4ge1xuICAgICAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgICAgICAgICBsZXZlbDogY29yZS5zZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCksXG4gICAgICAgICAgICBtZXNzYWdlOiBjb3JlLnRydW5jYXRlKHV0aWwuZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgYXJncyksIDIwNDgpLCAvLyAyS0JcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlucHV0OiBbLi4uYXJnc10sXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLmNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvbnNvbGVJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      resolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      resolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', resolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.16.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMEJBQTBCLG1CQUFPLENBQUMsNk1BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx3SUFBdUI7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1CQUFtQjtBQUN6RCxzQ0FBc0MsYUFBYTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mcy5qcz80ZWJhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkZzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRmlsZVN5c3RlbSc7XG5cbi8qKlxuICogVGhpcyBpbnRlZ3JhdGlvbiB3aWxsIGNyZWF0ZSBzcGFucyBmb3IgYGZzYCBBUEkgb3BlcmF0aW9ucywgbGlrZSByZWFkaW5nIGFuZCB3cml0aW5nIGZpbGVzLlxuICpcbiAqICoqV0FSTklORzoqKiBUaGlzIGludGVncmF0aW9uIG1heSBhZGQgc2lnbmlmaWNhbnQgb3ZlcmhlYWQgdG8geW91ciBhcHBsaWNhdGlvbi4gRXNwZWNpYWxseSBpbiBzY2VuYXJpb3Mgd2l0aCBhIGxvdCBvZlxuICogZmlsZSBJL08sIGxpa2UgZm9yIGV4YW1wbGUgd2hlbiBydW5uaW5nIGEgZnJhbWV3b3JrIGRldiBzZXJ2ZXIsIGluY2x1ZGluZyB0aGlzIGludGVncmF0aW9uIGNhbiBtYXNzaXZlbHkgc2xvdyBkb3duXG4gKiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gZm9yIHRoaXMgaW50ZWdyYXRpb24uXG4gKi9cbmNvbnN0IGZzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKFxuICAoXG4gICAgb3B0aW9uc1xuXG4gPSB7fSxcbiAgKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAgIGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgICAgICAgICBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgICAgICgpID0+XG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRnMuRnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgICAgICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZW5kSG9vayhmdW5jdGlvbk5hbWUsIHsgYXJncywgc3BhbiwgZXJyb3IgfSkge1xuICAgICAgICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShgZnMuJHtmdW5jdGlvbk5hbWV9YCk7XG5cbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdmaWxlJyxcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZmlsZS5mcycsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcuaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfVEFSR0VUX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCd0YXJnZXRfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncHJlZml4X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9FWElTVElOR19QQVRIX05FV19QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZXhpc3RpbmdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNULmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnc3JjX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkZXN0X2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ29sZF9wYXRoX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCduZXdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiBvcHRpb25zLnJlY29yZEVycm9yTWVzc2FnZXNBc1NwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZnNfZXJyb3InLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKSgpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxuKTtcblxuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX09MRF9QQVRIX05FV19QQVRIID0gWydyZW5hbWUnLCAncmVuYW1lU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNUID0gWydjb3B5RmlsZScsICdjcCcsICdjb3B5RmlsZVN5bmMnLCAnY3BTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSCA9IFsnbGluaycsICdsaW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BSRUZJWCA9IFsnbWtkdGVtcCcsICdta2R0ZW1wU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRIID0gWydzeW1saW5rJywgJ3N5bWxpbmtTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcgPSBbXG4gICdhY2Nlc3MnLFxuICAnYXBwZW5kRmlsZScsXG4gICdjaG1vZCcsXG4gICdjaG93bicsXG4gICdleGlzdHMnLFxuICAnbWtkaXInLFxuICAnbGNob3duJyxcbiAgJ2xzdGF0JyxcbiAgJ2x1dGltZXMnLFxuICAnb3BlbicsXG4gICdvcGVuZGlyJyxcbiAgJ3JlYWRkaXInLFxuICAncmVhZEZpbGUnLFxuICAncmVhZGxpbmsnLFxuICAncmVhbHBhdGgnLFxuICAncmVhbHBhdGgubmF0aXZlJyxcbiAgJ3JtJyxcbiAgJ3JtZGlyJyxcbiAgJ3N0YXQnLFxuICAndHJ1bmNhdGUnLFxuICAndW5saW5rJyxcbiAgJ3V0aW1lcycsXG4gICd3cml0ZUZpbGUnLFxuICAnYWNjZXNzU3luYycsXG4gICdhcHBlbmRGaWxlU3luYycsXG4gICdjaG1vZFN5bmMnLFxuICAnY2hvd25TeW5jJyxcbiAgJ2V4aXN0c1N5bmMnLFxuICAnbGNob3duU3luYycsXG4gICdsc3RhdFN5bmMnLFxuICAnbHV0aW1lc1N5bmMnLFxuICAnb3BlbmRpclN5bmMnLFxuICAnbWtkaXJTeW5jJyxcbiAgJ29wZW5TeW5jJyxcbiAgJ3JlYWRkaXJTeW5jJyxcbiAgJ3JlYWRGaWxlU3luYycsXG4gICdyZWFkbGlua1N5bmMnLFxuICAncmVhbHBhdGhTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYy5uYXRpdmUnLFxuICAncm1kaXJTeW5jJyxcbiAgJ3JtU3luYycsXG4gICdzdGF0U3luYycsXG4gICd0cnVuY2F0ZVN5bmMnLFxuICAndW5saW5rU3luYycsXG4gICd1dGltZXNTeW5jJyxcbiAgJ3dyaXRlRmlsZVN5bmMnLFxuXTtcblxuZXhwb3J0cy5mc0ludGVncmF0aW9uID0gZnNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n   init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n   _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /** Get the instrumentation for the https module. */\n   _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n   _getPatchIncomingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (\n      original,\n    ) => {\n      return function incomingRequest( event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n\n        instrumentation._diag.debug('http instrumentation for incoming request');\n\n        const isolationScope = core$1.getIsolationScope().clone();\n        const request = args[0] ;\n\n        const normalizedRequest = core$1.httpRequestToRequestData(request);\n\n        patchRequestToCaptureBody(request, isolationScope);\n\n        // Update the isolation scope, isolate this request\n        // TODO(v9): Stop setting `request`, we only rely on normalizedRequest anymore\n        isolationScope.setSDKProcessingMetadata({\n          request,\n          normalizedRequest,\n        });\n\n        const client = core$1.getClient();\n        if (client && client.getOptions().autoSessionTracking) {\n          isolationScope.setRequestSession({ status: 'ok' });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core$1.stripUrlQueryAndFragment(request.url || '/');\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n   _getPatchOutgoingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (original) => {\n      return function outgoingRequest( ...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n\n        const options = argsCopy.shift() ;\n\n        const extraOptions =\n          typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL)\n            ? (argsCopy.shift() )\n            : undefined;\n\n        const { optionsParsed } = instrumentationHttp.getRequestInfo(options, extraOptions);\n\n        const request = original.apply(this, args) ;\n\n        request.prependListener('response', (response) => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb =\n            typeof _ignoreOutgoingRequests === 'function'\n              ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed)\n              : true;\n\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(\n  nodule,\n  name,\n  wrapper,\n) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(\n  obj,\n  name,\n  value,\n) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value,\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core$1.parseUrl(url.toString());\n\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(req, isolationScope) {\n  const chunks = [];\n\n  function getChunksSize() {\n    return chunks.reduce((acc, chunk) => acc + chunk.byteLength, 0);\n  }\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              // If we have already read more than the max body length, we stop addiing chunks\n              // To avoid growing the memory indefinitely if a respons is e.g. streamed\n              if (getChunksSize() < MAX_BODY_BYTE_LENGTH) {\n                const chunk = args[0] ;\n                chunks.push(chunk);\n              } else if (debugBuild.DEBUG_BUILD) {\n                core$1.logger.log(\n                  `Dropping request body chunk because it maximum body length of ${MAX_BODY_BYTE_LENGTH}b is exceeded.`,\n                );\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        if (event === 'end') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const body = Buffer.concat(chunks).toString('utf-8');\n\n                if (body) {\n                  const normalizedRequest = { data: body } ;\n                  isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n                }\n              } catch (e2) {\n                // ignore errors here\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n  } catch (e3) {\n    // ignore errors if we can't patch stuff\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce\n\n(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests]),\n  });\n});\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\nconst _httpIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    },\n  };\n}) ;\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration(_httpIntegration);\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvY29tbW9uLmpzP2M4YWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBUaGUga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGxvY2FsIHZhcmlhYmxlcyBvbiB0aGUgZXJyb3Igb2JqZWN0LlxuICovXG5jb25zdCBMT0NBTF9WQVJJQUJMRVNfS0VZID0gJ19fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmF0ZSBsaW1pdGVyIHRoYXQgd2lsbCBjYWxsIHRoZSBkaXNhYmxlIGNhbGxiYWNrIHdoZW4gdGhlIHJhdGUgbGltaXQgaXMgcmVhY2hlZCBhbmQgdGhlIGVuYWJsZSBjYWxsYmFja1xuICogd2hlbiBhIHRpbWVvdXQgaGFzIG9jY3VycmVkLlxuICogQHBhcmFtIG1heFBlclNlY29uZCBNYXhpbXVtIG51bWJlciBvZiBjYWxscyBwZXIgc2Vjb25kXG4gKiBAcGFyYW0gZW5hYmxlIENhbGxiYWNrIHRvIGVuYWJsZSBjYXB0dXJlXG4gKiBAcGFyYW0gZGlzYWJsZSBDYWxsYmFjayB0byBkaXNhYmxlIGNhcHR1cmVcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2FsbCB0byBpbmNyZW1lbnQgdGhlIHJhdGUgbGltaXRlciBjb3VudFxuICovXG5mdW5jdGlvbiBjcmVhdGVSYXRlTGltaXRlcihcbiAgbWF4UGVyU2Vjb25kLFxuICBlbmFibGUsXG4gIGRpc2FibGUsXG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHJldHJ5U2Vjb25kcyA9IDU7XG4gIGxldCBkaXNhYmxlZFRpbWVvdXQgPSAwO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICBpZiAoY291bnQgPiBtYXhQZXJTZWNvbmQpIHtcbiAgICAgICAgcmV0cnlTZWNvbmRzICo9IDI7XG4gICAgICAgIGRpc2FibGUocmV0cnlTZWNvbmRzKTtcblxuICAgICAgICAvLyBDYXAgYXQgb25lIGRheVxuICAgICAgICBpZiAocmV0cnlTZWNvbmRzID4gODY0MDApIHtcbiAgICAgICAgICByZXRyeVNlY29uZHMgPSA4NjQwMDtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlZFRpbWVvdXQgPSByZXRyeVNlY29uZHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZW91dCAtPSAxO1xuXG4gICAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgfSwgMTAwMCkudW5yZWYoKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvdW50ICs9IDE7XG4gIH07XG59XG5cbi8vIEFkZCB0eXBlcyBmb3IgdGhlIGV4Y2VwdGlvbiBldmVudCBkYXRhXG5cbi8qKiBDb3VsZCB0aGlzIGJlIGFuIGFub255bW91cyBmdW5jdGlvbj8gKi9cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCAmJiAobmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PT0gJz8nIHx8IG5hbWUgPT09ICc8YW5vbnltb3VzPicpO1xufVxuXG4vKiogRG8gdGhlIGZ1bmN0aW9uIG5hbWVzIGFwcGVhciB0byBtYXRjaD8gKi9cbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZXNNYXRjaChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiIHx8IChpc0Fub255bW91cyhhKSAmJiBpc0Fub255bW91cyhiKSk7XG59XG5cbmV4cG9ydHMuTE9DQUxfVkFSSUFCTEVTX0tFWSA9IExPQ0FMX1ZBUklBQkxFU19LRVk7XG5leHBvcnRzLmNyZWF0ZVJhdGVMaW1pdGVyID0gY3JlYXRlUmF0ZUxpbWl0ZXI7XG5leHBvcnRzLmZ1bmN0aW9uTmFtZXNNYXRjaCA9IGZ1bmN0aW9uTmFtZXNNYXRjaDtcbmV4cG9ydHMuaXNBbm9ueW1vdXMgPSBpc0Fub255bW91cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG9CQUFvQixtQkFBTyxDQUFDLG1JQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxnTEFBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsOEtBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcz81YjQzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vbm9kZVZlcnNpb24uanMnKTtcbmNvbnN0IGxvY2FsVmFyaWFibGVzQXN5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1hc3luYy5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNTeW5jID0gcmVxdWlyZSgnLi9sb2NhbC12YXJpYWJsZXMtc3luYy5qcycpO1xuXG5jb25zdCBsb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4gbm9kZVZlcnNpb24uTk9ERV9WRVJTSU9OLm1ham9yIDwgMTkgPyBsb2NhbFZhcmlhYmxlc1N5bmMubG9jYWxWYXJpYWJsZXNTeW5jSW50ZWdyYXRpb24ob3B0aW9ucykgOiBsb2NhbFZhcmlhYmxlc0FzeW5jLmxvY2FsVmFyaWFibGVzQXN5bmNJbnRlZ3JhdGlvbihvcHRpb25zKTtcbn07XG5cbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjQwLjAgKDdmZjQ2N2MpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjQwLjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\n\nfunction log(...args) {\n  core.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  })]),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.logger.log('Local variables rate-limit lifted.');\n                _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n              },\n              seconds => {\n                core.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \****************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  // This integration only works in CJS contexts\n  if (!commonjs.isCjs()) {\n    debugBuild.DEBUG_BUILD &&\n      core.logger.warn(\n        'modulesIntegration only works in CommonJS (CJS) environments. Remove this integration if you are using ESM.',\n      );\n    return {\n      name: INTEGRATION_NAME,\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n *\n * Only works in CommonJS (CJS) environments.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0lBQW1CO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLHNJQUFzQjs7QUFFL0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQWEsZUFBZSxxQkFBYTtBQUNwRCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsNENBQVksSUFBSSw0Q0FBWTtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanM/MjI1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlX2ZzID0gcmVxdWlyZSgnbm9kZTpmcycpO1xuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uanMuanMnKTtcblxubGV0IG1vZHVsZUNhY2hlO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vZHVsZXMnO1xuXG5jb25zdCBfbW9kdWxlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgLy8gVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIGluIENKUyBjb250ZXh0c1xuICBpZiAoIWNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICBjb3JlLmxvZ2dlci53YXJuKFxuICAgICAgICAnbW9kdWxlc0ludGVncmF0aW9uIG9ubHkgd29ya3MgaW4gQ29tbW9uSlMgKENKUykgZW52aXJvbm1lbnRzLiBSZW1vdmUgdGhpcyBpbnRlZ3JhdGlvbiBpZiB5b3UgYXJlIHVzaW5nIEVTTS4nLFxuICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgZXZlbnQubW9kdWxlcyA9IHtcbiAgICAgICAgLi4uZXZlbnQubW9kdWxlcyxcbiAgICAgICAgLi4uX2dldE1vZHVsZXMoKSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBub2RlIG1vZHVsZXMgLyBwYWNrYWdlcyB0byB0aGUgZXZlbnQuXG4gKlxuICogT25seSB3b3JrcyBpbiBDb21tb25KUyAoQ0pTKSBlbnZpcm9ubWVudHMuXG4gKi9cbmNvbnN0IG1vZHVsZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vZHVsZXNJbnRlZ3JhdGlvbik7XG5cbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhdGhzICovXG5mdW5jdGlvbiBnZXRQYXRocygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5jYWNoZSA/IE9iamVjdC5rZXlzKHJlcXVpcmUuY2FjaGUgKSA6IFtdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhY2thZ2UuanNvbiBtb2R1bGVzICovXG5mdW5jdGlvbiBjb2xsZWN0TW9kdWxlcygpXG5cbiB7XG4gIGNvbnN0IG1haW5QYXRocyA9IChyZXF1aXJlLm1haW4gJiYgcmVxdWlyZS5tYWluLnBhdGhzKSB8fCBbXTtcbiAgY29uc3QgcGF0aHMgPSBnZXRQYXRocygpO1xuICBjb25zdCBpbmZvc1xuXG4gPSB7fTtcbiAgY29uc3Qgc2VlblxuXG4gPSB7fTtcblxuICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICAgIGxldCBkaXIgPSBwYXRoO1xuXG4gICAgLyoqIFRyYXZlcnNlIGRpcmVjdG9yaWVzIHVwd2FyZCBpbiB0aGUgc2VhcmNoIG9mIHBhY2thZ2UuanNvbiBmaWxlICovXG4gICAgY29uc3QgdXBkaXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnID0gZGlyO1xuICAgICAgZGlyID0gbm9kZV9wYXRoLmRpcm5hbWUob3JpZyk7XG5cbiAgICAgIGlmICghZGlyIHx8IG9yaWcgPT09IGRpciB8fCBzZWVuW29yaWddKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAobWFpblBhdGhzLmluZGV4T2YoZGlyKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIHVwZGlyKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBrZ2ZpbGUgPSBub2RlX3BhdGguam9pbihvcmlnLCAncGFja2FnZS5qc29uJyk7XG4gICAgICBzZWVuW29yaWddID0gdHJ1ZTtcblxuICAgICAgaWYgKCFub2RlX2ZzLmV4aXN0c1N5bmMocGtnZmlsZSkpIHtcbiAgICAgICAgcmV0dXJuIHVwZGlyKCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBKU09OLnBhcnNlKG5vZGVfZnMucmVhZEZpbGVTeW5jKHBrZ2ZpbGUsICd1dGY4JykpXG5cbjtcbiAgICAgICAgaW5mb3NbaW5mby5uYW1lXSA9IGluZm8udmVyc2lvbjtcbiAgICAgIH0gY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgICAgfVxuICAgIH07XG5cbiAgICB1cGRpcigpO1xuICB9KTtcblxuICByZXR1cm4gaW5mb3M7XG59XG5cbi8qKiBGZXRjaGVzIHRoZSBsaXN0IG9mIG1vZHVsZXMgYW5kIHRoZSB2ZXJzaW9ucyBsb2FkZWQgYnkgdGhlIGVudHJ5IGZpbGUgZm9yIHlvdXIgbm9kZS5qcyBhcHAuICovXG5mdW5jdGlvbiBfZ2V0TW9kdWxlcygpIHtcbiAgaWYgKCFtb2R1bGVDYWNoZSkge1xuICAgIG1vZHVsZUNhY2hlID0gY29sbGVjdE1vZHVsZXMoKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlQ2FjaGU7XG59XG5cbmV4cG9ydHMubW9kdWxlc0ludGVncmF0aW9uID0gbW9kdWxlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.6.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const ctx = api.context.active();\n            const addedHeaders = {};\n\n            // We generate a virtual span context from the active one,\n            // Where we attach the URL to the trace state, so the propagator can pick it up\n            const activeSpan = api.trace.getSpan(ctx);\n            const propagationContext = activeSpan\n              ? opentelemetry.getPropagationContextFromSpan(activeSpan)\n              : core.getCurrentScope().getPropagationContext();\n\n            const spanContext = opentelemetry.generateSpanContextForPropagationContext(propagationContext);\n            // We know that in practice we'll _always_ haven a traceState here\n            spanContext.traceState = _optionalChain([spanContext, 'access', _2 => _2.traceState, 'optionalAccess', _3 => _3.set, 'call', _4 => _4('sentry.url', url)]);\n            const ctxWithUrlTraceState = api.trace.setSpanContext(ctx, spanContext);\n\n            api.propagation.inject(ctxWithUrlTraceState, addedHeaders);\n\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = core.parseUrl(url.toString());\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFlBQVksbUJBQU8sQ0FBQyxzSUFBb0I7QUFDeEMsOEJBQThCLG1CQUFPLENBQUMsd05BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxzQkFBc0IsbUJBQU8sQ0FBQyw0T0FBdUI7O0FBRXJELGtEQUFrRDtBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLG9DQUFvQyxFQUFFLElBQUksRUFBRTtBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87O0FBRXhCO0FBQ0EsY0FBYyxJQUFJLEVBQUUsY0FBYztBQUNsQzs7QUFFQTtBQUNBLGNBQWMsSUFBSSxHQUFHLGNBQWM7QUFDbkM7O0FBRUEsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2Qjs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanM/OTY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvblVuZGljaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2knKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuY29uc3QgX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgX2JyZWFkY3J1bWJzID0gdHlwZW9mIG9wdGlvbnMuYnJlYWRjcnVtYnMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYnJlYWRjcnVtYnM7XG4gIGNvbnN0IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID0gb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ05vZGVGZXRjaCcsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gbmV3IGluc3RydW1lbnRhdGlvblVuZGljaS5VbmRpY2lJbnN0cnVtZW50YXRpb24oe1xuICAgICAgICByZXF1aXJlUGFyZW50Zm9yU3BhbnM6IGZhbHNlLFxuICAgICAgICBpZ25vcmVSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICAgICAgY29uc3QgdXJsID0gZ2V0QWJzb2x1dGVVcmwocmVxdWVzdC5vcmlnaW4sIHJlcXVlc3QucGF0aCk7XG4gICAgICAgICAgY29uc3Qgc2hvdWxkSWdub3JlID0gX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgJiYgdXJsICYmIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKHVybCk7XG5cbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0cmFjaW5nIGlzIGRpc2FibGVkLCB3ZSBzdGlsbCB3YW50IHRvIHByb3BhZ2F0ZSB0cmFjZXNcbiAgICAgICAgICAvLyBTbyB3ZSBkbyB0aGF0IG1hbnVhbGx5IGhlcmUsIG1hdGNoaW5nIHdoYXQgdGhlIGluc3RydW1lbnRhdGlvbiBkb2VzIG90aGVyd2lzZVxuICAgICAgICAgIGlmICghY29yZS5oYXNUcmFjaW5nRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZGVkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgICAgICAvLyBXZSBnZW5lcmF0ZSBhIHZpcnR1YWwgc3BhbiBjb250ZXh0IGZyb20gdGhlIGFjdGl2ZSBvbmUsXG4gICAgICAgICAgICAvLyBXaGVyZSB3ZSBhdHRhY2ggdGhlIFVSTCB0byB0aGUgdHJhY2Ugc3RhdGUsIHNvIHRoZSBwcm9wYWdhdG9yIGNhbiBwaWNrIGl0IHVwXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IGFjdGl2ZVNwYW5cbiAgICAgICAgICAgICAgPyBvcGVudGVsZW1ldHJ5LmdldFByb3BhZ2F0aW9uQ29udGV4dEZyb21TcGFuKGFjdGl2ZVNwYW4pXG4gICAgICAgICAgICAgIDogY29yZS5nZXRDdXJyZW50U2NvcGUoKS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcblxuICAgICAgICAgICAgY29uc3Qgc3BhbkNvbnRleHQgPSBvcGVudGVsZW1ldHJ5LmdlbmVyYXRlU3BhbkNvbnRleHRGb3JQcm9wYWdhdGlvbkNvbnRleHQocHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBpbiBwcmFjdGljZSB3ZSdsbCBfYWx3YXlzXyBoYXZlbiBhIHRyYWNlU3RhdGUgaGVyZVxuICAgICAgICAgICAgc3BhbkNvbnRleHQudHJhY2VTdGF0ZSA9IF9vcHRpb25hbENoYWluKFtzcGFuQ29udGV4dCwgJ2FjY2VzcycsIF8yID0+IF8yLnRyYWNlU3RhdGUsICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zLnNldCwgJ2NhbGwnLCBfNCA9PiBfNCgnc2VudHJ5LnVybCcsIHVybCldKTtcbiAgICAgICAgICAgIGNvbnN0IGN0eFdpdGhVcmxUcmFjZVN0YXRlID0gYXBpLnRyYWNlLnNldFNwYW5Db250ZXh0KGN0eCwgc3BhbkNvbnRleHQpO1xuXG4gICAgICAgICAgICBhcGkucHJvcGFnYXRpb24uaW5qZWN0KGN0eFdpdGhVcmxUcmFjZVN0YXRlLCBhZGRlZEhlYWRlcnMpO1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycztcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3RIZWFkZXJzKSkge1xuICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhhZGRlZEhlYWRlcnMpLmZvckVhY2goaGVhZGVycyA9PiByZXF1ZXN0SGVhZGVycy5wdXNoKC4uLmhlYWRlcnMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycyArPSBPYmplY3QuZW50cmllcyhhZGRlZEhlYWRlcnMpXG4gICAgICAgICAgICAgICAgLm1hcCgoW2ssIHZdKSA9PiBgJHtrfTogJHt2fVxcclxcbmApXG4gICAgICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcmV2ZW50IHN0YXJ0aW5nIGEgc3BhbiBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0U3Bhbkhvb2s6ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwubm9kZV9mZXRjaCcsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VIb29rOiAoXywgeyByZXF1ZXN0LCByZXNwb25zZSB9KSA9PiB7XG4gICAgICAgICAgaWYgKF9icmVhZGNydW1icykge1xuICAgICAgICAgICAgYWRkUmVxdWVzdEJyZWFkY3J1bWIocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBvcGVudGVsZW1ldHJ5LmFkZE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBuYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uKTtcblxuLyoqIEFkZCBhIGJyZWFkY3J1bWIgZm9yIG91dGdvaW5nIHJlcXVlc3RzLiAqL1xuZnVuY3Rpb24gYWRkUmVxdWVzdEJyZWFkY3J1bWIocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgZGF0YSA9IGdldEJyZWFkY3J1bWJEYXRhKHJlcXVlc3QpO1xuICBjb25zdCBzdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgY29uc3QgbGV2ZWwgPSBjb3JlLmdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZShzdGF0dXNDb2RlKTtcblxuICBjb3JlLmFkZEJyZWFkY3J1bWIoXG4gICAge1xuICAgICAgY2F0ZWdvcnk6ICdodHRwJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzX2NvZGU6IHN0YXR1c0NvZGUsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICB9LFxuICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgbGV2ZWwsXG4gICAgfSxcbiAgICB7XG4gICAgICBldmVudDogJ3Jlc3BvbnNlJyxcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXNwb25zZSxcbiAgICB9LFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRCcmVhZGNydW1iRGF0YShyZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnBhdGgsIHJlcXVlc3Qub3JpZ2luKTtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBjb3JlLnBhcnNlVXJsKHVybC50b1N0cmluZygpKTtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB1cmw6IGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHBhcnNlZFVybCksXG4gICAgICAnaHR0cC5tZXRob2QnOiByZXF1ZXN0Lm1ldGhvZCB8fCAnR0VUJyxcbiAgICB9O1xuXG4gICAgaWYgKHBhcnNlZFVybC5zZWFyY2gpIHtcbiAgICAgIGRhdGFbJ2h0dHAucXVlcnknXSA9IHBhcnNlZFVybC5zZWFyY2g7XG4gICAgfVxuICAgIGlmIChwYXJzZWRVcmwuaGFzaCkge1xuICAgICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gcGFyc2VkVXJsLmhhc2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuLy8gTWF0Y2hpbmcgdGhlIGJlaGF2aW9yIG9mIHRoZSBiYXNlIGluc3RydW1lbnRhdGlvblxuZnVuY3Rpb24gZ2V0QWJzb2x1dGVVcmwob3JpZ2luLCBwYXRoID0gJy8nKSB7XG4gIGNvbnN0IHVybCA9IGAke29yaWdpbn1gO1xuXG4gIGlmICh1cmwuZW5kc1dpdGgoJy8nKSAmJiBwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgIHJldHVybiBgJHt1cmx9JHtwYXRoLnNsaWNlKDEpfWA7XG4gIH1cblxuICBpZiAoIXVybC5lbmRzV2l0aCgnLycpICYmICFwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgIHJldHVybiBgJHt1cmx9LyR7cGF0aC5zbGljZSgxKX1gO1xuICB9XG5cbiAgcmV0dXJuIGAke3VybH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1mZXRjaC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLGdKQUEyQjs7QUFFekQ7O0FBRUEsdURBQXVEO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixNQUFNO0FBQzFGLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQ0FBaUM7QUFDbEQsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanM/MzUyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBlcnJvcmhhbmRsaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JoYW5kbGluZy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcblxuY29uc3QgX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICd3YXJuJztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBnbG9iYWwucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKGNsaWVudCwgeyBtb2RlIH0pKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBhIGdsb2JhbCBwcm9taXNlIHJlamVjdGlvbiBoYW5kbGVyLlxuICovXG5jb25zdCBvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogU2VuZCBhbiBleGNlcHRpb24gd2l0aCByZWFzb25cbiAqIEBwYXJhbSByZWFzb24gc3RyaW5nXG4gKiBAcGFyYW0gcHJvbWlzZSBwcm9taXNlXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihcbiAgY2xpZW50LFxuICBvcHRpb25zLFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZW5kVW5oYW5kbGVkUHJvbWlzZShyZWFzb24sIHByb21pc2UpIHtcbiAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHByb21pc2UsXG4gICAgICBjYXB0dXJlQ29udGV4dDoge1xuICAgICAgICBleHRyYTogeyB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uOiB0cnVlIH0sXG4gICAgICB9LFxuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiAnb251bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMpO1xuICB9O1xufVxuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBtb2RlYCBvcHRpb25cblxuICovXG5mdW5jdGlvbiBoYW5kbGVSZWplY3Rpb24oXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlYXNvbixcbiAgb3B0aW9ucyxcbikge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICBjb25zdCByZWplY3Rpb25XYXJuaW5nID1cbiAgICAnVGhpcyBlcnJvciBvcmlnaW5hdGVkIGVpdGhlciBieSAnICtcbiAgICAndGhyb3dpbmcgaW5zaWRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGhvdXQgYSBjYXRjaCBibG9jaywgJyArXG4gICAgJ29yIGJ5IHJlamVjdGluZyBhIHByb21pc2Ugd2hpY2ggd2FzIG5vdCBoYW5kbGVkIHdpdGggLmNhdGNoKCkuJyArXG4gICAgJyBUaGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSByZWFzb246JztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmIChvcHRpb25zLm1vZGUgPT09ICd3YXJuJykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgcmVhc29uLnN0YWNrID8gcmVhc29uLnN0YWNrIDogcmVhc29uKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLm1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgfSk7XG4gICAgZXJyb3JoYW5kbGluZy5sb2dBbmRFeGl0UHJvY2VzcyhyZWFzb24pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnRzLm1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlciA9IG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcjtcbmV4cG9ydHMub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && \"development\" !== 'development') {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      core.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    core.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGFBQW9CLG9CQUFvQixFQUV6RjtBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0oseURBQXlELElBQUk7QUFDN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzPzgxYTciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb3JlLmxvZ2dlci53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgICAgfVxuICAgICAgY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgX29wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogVXNlIHRoaXMgaW50ZWdyYXRpb24gdG8gc2VuZCBlcnJvcnMgYW5kIHRyYW5zYWN0aW9ucyB0byBTcG90bGlnaHQuXG4gKlxuICogTGVhcm4gbW9yZSBhYm91dCBzcG90bGlnaHQgYXQgaHR0cHM6Ly9zcG90bGlnaHRqcy5jb21cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoaXMgaW50ZWdyYXRpb24gb25seSB3b3JrcyB3aXRoIE5vZGUgMTggb3IgbmV3ZXIuXG4gKi9cbmNvbnN0IHNwb3RsaWdodEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfc3BvdGxpZ2h0SW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHNwb3RsaWdodFVybCA9IHBhcnNlU2lkZWNhclVybChvcHRpb25zLnNpZGVjYXJVcmwpO1xuICBpZiAoIXNwb3RsaWdodFVybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBmYWlsZWRSZXF1ZXN0cyA9IDA7XG5cbiAgY2xpZW50Lm9uKCdiZWZvcmVFbnZlbG9wZScsIChlbnZlbG9wZSkgPT4ge1xuICAgIGlmIChmYWlsZWRSZXF1ZXN0cyA+IDMpIHtcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIERpc2FibGVkIFNlbnRyeSAtPiBTcG90bGlnaHQgaW50ZWdyYXRpb24gZHVlIHRvIHRvbyBtYW55IGZhaWxlZCByZXF1ZXN0cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmlhbGl6ZWRFbnZlbG9wZSA9IGNvcmUuc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUpO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IGdldE5hdGl2ZUh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IHNwb3RsaWdodFVybC5wYXRobmFtZSxcbiAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogc3BvdGxpZ2h0VXJsLnBvcnQsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgICAgICAgLy8gUmVzZXQgZmFpbGVkIHJlcXVlc3RzIGNvdW50ZXIgb24gc3VjY2Vzc1xuICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIEZhaWxlZCB0byBzZW5kIGVudmVsb3BlIHRvIFNwb3RsaWdodCBTaWRlY2FyJyk7XG4gICAgfSk7XG4gICAgcmVxLndyaXRlKHNlcmlhbGl6ZWRFbnZlbG9wZSk7XG4gICAgcmVxLmVuZCgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTaWRlY2FyVXJsKHVybCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKGAke3VybH1gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvcmUubG9nZ2VyLndhcm4oYFtTcG90bGlnaHRdIEludmFsaWQgc2lkZWNhciBVUkw6ICR7dXJsfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXZSB3YW50IHRvIGdldCBhbiB1bnBhdGNoZWQgaHR0cCByZXF1ZXN0IGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGNhcHR1cmluZyBvdXIgb3duIGNhbGxzLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVIdHRwUmVxdWVzdCgpIHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBodHRwO1xuICBpZiAoaXNXcmFwcGVkKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuX19zZW50cnlfb3JpZ2luYWxfXztcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBpc1dyYXBwZWQoaW1wbCkge1xuICByZXR1cm4gJ19fc2VudHJ5X29yaWdpbmFsX18nIGluIGltcGw7XG59XG5cbmV4cG9ydHMuSU5URUdSQVRJT05fTkFNRSA9IElOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLmdldE5hdGl2ZUh0dHBSZXF1ZXN0ID0gZ2V0TmF0aXZlSHR0cFJlcXVlc3Q7XG5leHBvcnRzLnNwb3RsaWdodEludGVncmF0aW9uID0gc3BvdGxpZ2h0SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcG90bGlnaHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzP2U4MTkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5wdWJsaXNoZXInKTtcbiAgfSxcbn07XG5cbmNvbnN0IGluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FtcXBsaWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FtcXBsaWIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BhbXFwbGliSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvYW1xcGxpYi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmFtcXBsaWJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGFtcXBsaWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2FtcXBsaWJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW1xcGxpYkludGVncmF0aW9uID0gYW1xcGxpYkludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnRBbXFwbGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1xcGxpYi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzPzQ3MGQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25uZWN0JztcblxuY29uc3QgaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkNvbm5lY3QuQ29ubmVjdEluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2Nvbm5lY3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50Q29ubmVjdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtDb25uZWN0XShodHRwczovL2dpdGh1Yi5jb20vc2VuY2hhbGFicy9jb25uZWN0LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBpbml0aWFsaXplIHlvdXIgY29ubmVjdCBhcHAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Nvbm5lY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvY29ubmVjdC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5jb25uZWN0SW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2Nvbm5lY3RJbnRlZ3JhdGlvbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb25uZWN0RXJyb3JNaWRkbGV3YXJlKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycik7XG4gIG5leHQoZXJyKTtcbn1cblxuLyoqXG4gKiBBZGQgYSBDb25uZWN0IG1pZGRsZXdhcmUgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBhcHAgVGhlIENvbm5lY3QgYXBwIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKFwiY29ubmVjdFwiKTtcbiAqXG4gKiBjb25zdCBhcHAgPSBjb25uZWN0KCk7XG4gKlxuICogU2VudHJ5LnNldHVwQ29ubmVjdEVycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIC8vIEFkZCB5b3UgY29ubmVjdCByb3V0ZXMgaGVyZVxuICpcbiAqIGFwcC5saXN0ZW4oMzAwMCk7XG4gKiBgYGBcbiAqL1xuY29uc3Qgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGNvbm5lY3RFcnJvck1pZGRsZXdhcmUpO1xuXG4gIC8vIFNhZGx5LCBDb25uZWN0SW5zdHJ1bWVudGF0aW9uIGhhcyBubyByZXF1ZXN0SG9vaywgc28gd2UgbmVlZCB0byBhZGQgdGhlIGF0dHJpYnV0ZXMgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgY29ubmVjdFxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2Nvbm5lY3QnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcmVxdWVzdF9oYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydjb25uZWN0LnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIGNvbm5lY3Qgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmNvbm5lY3QnLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5jb25uZWN0YCxcbiAgfSk7XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdG8gXCJtaWRkbGV3YXJlIC0gXCIgcHJlZml4XG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydjb25uZWN0Lm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgfVxufVxuXG5leHBvcnRzLmNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvbm5lY3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50Q29ubmVjdDtcbmV4cG9ydHMuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.12.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (\n          spanJSON.description === 'dataloader.load' ||\n          spanJSON.description === 'dataloader.loadMany' ||\n          spanJSON.description === 'dataloader.batch'\n        ) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0NBQWtDLG1CQUFPLENBQUMscU9BQTJDO0FBQ3JGLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcz85OWUwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RhdGFsb2FkZXInO1xuXG5jb25zdCBpbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlci5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4oW3NwYW5KU09OLCAnYWNjZXNzJywgXyA9PiBfLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5zdGFydHNXaXRoLCAnY2FsbCcsIF8zID0+IF8zKCdkYXRhbG9hZGVyJyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZGF0YWxvYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgIC8vIFN0aWxsIGNoZWNraW5nIGZvciB0aGUgZnV0dXJlIHZlcnNpb25zXG4gICAgICAgIC8vIGluIGNhc2UgdGhleSBhZGQgc3VwcG9ydCBmb3IgYGNsZWFyYCBhbmQgYHByaW1lYFxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWQnIHx8XG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWRNYW55JyB8fFxuICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnY2FjaGUuZ2V0Jyk7XG4gICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgLy8gT3IgYWx0ZXJuYXRpdmVseSwgd2UgY2FuIGFkZCBgcmVxdWVzdEhvb2tgIHRvIHRoZSBkYXRhbG9hZGVyIGluc3RydW1lbnRhdGlvbi5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtkYXRhbG9hZGVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9kYXRhbG9hZGVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZGF0YWxvYWRlckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2RhdGFsb2FkZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5kYXRhbG9hZGVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBkYXRhbG9hZGVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9kYXRhbG9hZGVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50RGF0YWxvYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFsb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n        const attributes = core.spanToJSON(span).data || {};\n        // this is one of: middleware, request_handler, router\n        const type = attributes['express.type'];\n\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n        }\n\n        // Also update the name, we don't need to \"middleware - \" prefix\n        const name = attributes['express.name'];\n        if (typeof name === 'string') {\n          span.updateName(name);\n        }\n      },\n      spanNameHook(info, defaultName) {\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD &&\n            core.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n          return defaultName;\n        }\n        if (info.layerType === 'request_handler') {\n          // type cast b/c Otel unfortunately types info.request as any :(\n          const req = info.request ;\n          const method = req.method ? req.method.toUpperCase() : 'GET';\n          core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n        }\n        return defaultName;\n      },\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    _req,\n    res,\n    next,\n  ) {\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n      next(error);\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fastify@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastify = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationFastify.FastifyInstrumentation({\n      requestHook(span) {\n        addFastifySpanAttributes(span);\n      },\n    }),\n);\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (_request, _reply, error) => {\n        core.captureException(error);\n      });\n\n      // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n      // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n      // https://fastify.dev/docs/latest/Reference/Lifecycle/\n      fastify.addHook('onRequest', async (request, _reply) => {\n        const reqWithRouteInfo = request ;\n\n        // Taken from Otel Fastify instrumentation:\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n        const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n        const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n\n        core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\n\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=fastify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.39.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan =\n          spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQywyT0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUEsb0pBQW9KOztBQUVwSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanM/MjE0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHZW5lcmljUG9vbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wuR2VuZXJpY1Bvb2xJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX2dlbmVyaWNQb29sSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEdlbmVyaWNQb29sKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG5cbiAgICAgICAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc3BhbkpTT04uZGVzY3JpcHRpb247XG5cbiAgICAgICAgLy8gdHlwbyBpbiBlbWl0dGVkIHNwYW4gZm9yIHZlcnNpb24gPD0gMC4zOC4wIG9mIEBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2xcbiAgICAgICAgY29uc3QgaXNHZW5lcmljUG9vbFNwYW4gPVxuICAgICAgICAgIHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hcXVpcmUnIHx8IHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hY3F1aXJlJztcblxuICAgICAgICBpZiAoaXNHZW5lcmljUG9vbFNwYW4pIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLmdlbmVyaWNfcG9vbCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dlbmVyaWMtcG9vbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2VuZXJpYy1wb29sKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9nZW5lcmljcG9vbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBnZW5lcmljUG9vbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnRHZW5lcmljUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNQb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (_options = {}) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return new instrumentationGraphql.GraphQLInstrumentation({\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data || {};\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n\n          // We guard to only do this on http.server spans\n\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            existingOperations.push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (existingOperations) {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n        }\n      },\n    });\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsNE9BQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsa0RBQWtELGVBQWUsRUFBRSxjQUFjLE9BQU8sY0FBYzs7QUFFdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ncmFwaHFsLmpzPzc2NzciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR3JhcGhxbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHcmFwaHFsJztcblxuY29uc3QgaW5zdHJ1bWVudEdyYXBocWwgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIChfb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGdldE9wdGlvbnNXaXRoRGVmYXVsdHMoX29wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25HcmFwaHFsLkdyYXBoUUxJbnN0cnVtZW50YXRpb24oe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZ3JhcGhxbC5vdGVsLmdyYXBocWwnKTtcblxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgICAgICAgLy8gSWYgb3BlcmF0aW9uLm5hbWUgaXMgbm90IHNldCwgd2UgZmFsbCBiYWNrIHRvIHVzZSBvcGVyYXRpb24udHlwZSBvbmx5XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvblR5cGUgPSBhdHRyaWJ1dGVzWydncmFwaHFsLm9wZXJhdGlvbi50eXBlJ107XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBhdHRyaWJ1dGVzWydncmFwaHFsLm9wZXJhdGlvbi5uYW1lJ107XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlT3BlcmF0aW9uTmFtZUZvclJvb3RTcGFuICYmIG9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjb25zdCByb290U3BhbiA9IGNvcmUuZ2V0Um9vdFNwYW4oc3Bhbik7XG5cbiAgICAgICAgICAvLyBXZSBndWFyZCB0byBvbmx5IGRvIHRoaXMgb24gaHR0cC5zZXJ2ZXIgc3BhbnNcblxuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihyb290U3BhbikuZGF0YSB8fCB7fTtcblxuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nT3BlcmF0aW9ucyA9IHJvb3RTcGFuQXR0cmlidXRlc1tvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT05dIHx8IFtdO1xuXG4gICAgICAgICAgY29uc3QgbmV3T3BlcmF0aW9uID0gb3BlcmF0aW9uTmFtZSA/IGAke29wZXJhdGlvblR5cGV9ICR7b3BlcmF0aW9uTmFtZX1gIDogYCR7b3BlcmF0aW9uVHlwZX1gO1xuXG4gICAgICAgICAgLy8gV2Uga2VlcCB0cmFjayBvZiBlYWNoIG9wZXJhdGlvbiBvbiB0aGUgcm9vdCBzcGFuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gZWl0aGVyIGJlIGEgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIChpZiB0aGVyZSBhcmUgbXVsdGlwbGUgb3BlcmF0aW9ucylcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleGlzdGluZ09wZXJhdGlvbnMpKSB7XG4gICAgICAgICAgICBleGlzdGluZ09wZXJhdGlvbnMucHVzaChuZXdPcGVyYXRpb24pO1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgZXhpc3RpbmdPcGVyYXRpb25zKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nT3BlcmF0aW9ucykge1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgW2V4aXN0aW5nT3BlcmF0aW9ucywgbmV3T3BlcmF0aW9uXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIG5ld09wZXJhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuKTtcblxuY29uc3QgX2dyYXBocWxJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAvLyBXZSBzZXQgZGVmYXVsdHMgaGVyZSwgdG9vLCBiZWNhdXNlIG90aGVyd2lzZSB3ZSdkIHVwZGF0ZSB0aGUgaW5zdHJ1bWVudGF0aW9uIGNvbmZpZ1xuICAgICAgLy8gdG8gdGhlIGNvbmZpZyB3aXRob3V0IGRlZmF1bHRzLCBhcyBgZ2VuZXJhdGVJbnN0cnVtZW50T25jZWAgYXV0b21hdGljYWxseSBjYWxscyBgc2V0Q29uZmlnKG9wdGlvbnMpYFxuICAgICAgLy8gd2hlbiBiZWluZyBjYWxsZWQgdGhlIHNlY29uZCB0aW1lXG4gICAgICBpbnN0cnVtZW50R3JhcGhxbChnZXRPcHRpb25zV2l0aERlZmF1bHRzKG9wdGlvbnMpKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dyYXBocWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dyYXBocWwpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BncmFwaHFsSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZ3JhcGhxbC8pLlxuICpcbiAqIEBwYXJhbSB7R3JhcGhxbE9wdGlvbnN9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgR3JhcGhRTCBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5ncmFwaHFsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgZ3JhcGhxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ3JhcGhxbEludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgaWdub3JlUmVzb2x2ZVNwYW5zOiB0cnVlLFxuICAgIGlnbm9yZVRyaXZpYWxSZXNvbHZlU3BhbnM6IHRydWUsXG4gICAgdXNlT3BlcmF0aW9uTmFtZUZvclJvb3RTcGFuOiB0cnVlLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG59XG5cbmV4cG9ydHMuZ3JhcGhxbEludGVncmF0aW9uID0gZ3JhcGhxbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R3JhcGhxbCA9IGluc3RydW1lbnRHcmFwaHFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhxbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return event && (event ).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsNEJBQTRCLG1CQUFPLENBQUMsbU5BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBeUI7QUFDcEQsbUJBQW1CLG1CQUFPLENBQUMsOElBQTZCO0FBQ3hELHdCQUF3QixtQkFBTyxDQUFDLDBKQUFtQzs7QUFFbkU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsc0NBQXNDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx1SEFBdUgsRUFBRSxXQUFXO0FBQzdMO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzPzYzYzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uSGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hhcGknO1xuXG5jb25zdCBpbnN0cnVtZW50SGFwaSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hhcGldKGh0dHBzOi8vaGFwaS5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbaGFwaSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9oYXBpLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmhhcGlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudCAmJiAoZXZlbnQgKS5lcnJvciAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2hhcGknLFxuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAnaGFwaUVycm9yUGx1Z2luJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGhhcGlFcnJvclBsdWdpbiA9IHtcbiAgbmFtZTogJ1NlbnRyeUhhcGlFcnJvclBsdWdpbicsXG4gIHZlcnNpb246IGNvcmUuU0RLX1ZFUlNJT04sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbiAoc2VydmVyQXJnKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyQXJnIDtcblxuICAgIHNlcnZlci5ldmVudHMub24oeyBuYW1lOiAncmVxdWVzdCcsIGNoYW5uZWxzOiBbJ2Vycm9yJ10gfSwgKHJlcXVlc3QsIGV2ZW50KSA9PiB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpICE9PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcmVxdWVzdC5yb3V0ZTtcbiAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLnBhdGgpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke19vcHRpb25hbENoYWluKFtyb3V0ZSwgJ2FjY2VzcycsIF8gPT4gXy5tZXRob2QsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnRvVXBwZXJDYXNlLCAnY2FsbCcsIF8zID0+IF8zKCldKSB8fCAnR0VUJ30gJHtyb3V0ZS5wYXRofWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgY29yZS5sb2dnZXIud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycm9yRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHNlbmRFcnJvclRvU2VudHJ5KGV2ZW50LmVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWRkIGEgSGFwaSBwbHVnaW4gdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXIgVGhlIEhhcGkgc2VydmVyIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEhhcGkgPSByZXF1aXJlKCdAaGFwaS9oYXBpJyk7XG4gKlxuICogY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAqICAgY29uc3Qgc2VydmVyID0gSGFwaS5zZXJ2ZXIoKTtcbiAqXG4gKiAgIC8vIGFsbCB5b3VyIHJvdXRlcyBoZXJlXG4gKlxuICogICBhd2FpdCBTZW50cnkuc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcik7XG4gKlxuICogICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index$1 = __webpack_require__(/*! ../http/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    fastify.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    // For now, we do not include prisma by default because it has ESM issues\n    // See https://github.com/prisma/prisma/issues/23410\n    // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n    // prismaIntegration(),\n    // eslint-disable-next-line deprecation/deprecation\n    nest.nestIntegration(),\n    index.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index$1.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    fastify.instrumentFastify,\n    index.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    // eslint-disable-next-line deprecation/deprecation\n    nest.instrumentNest,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQywySUFBa0I7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsb0pBQWtCO0FBQzlDLGdCQUFnQixtQkFBTyxDQUFDLDRJQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxrSkFBaUI7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLHdJQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyxvSUFBVTtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyxvSkFBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLHdJQUFZO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLDhJQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyx3SUFBWTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsMElBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLGdKQUFnQjtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyw4SUFBZTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsd0lBQVk7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanM/MjUxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbmRleCQxID0gcmVxdWlyZSgnLi4vaHR0cC9pbmRleC5qcycpO1xuY29uc3QgYW1xcGxpYiA9IHJlcXVpcmUoJy4vYW1xcGxpYi5qcycpO1xuY29uc3QgY29ubmVjdCA9IHJlcXVpcmUoJy4vY29ubmVjdC5qcycpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJy4vZXhwcmVzcy5qcycpO1xuY29uc3QgZmFzdGlmeSA9IHJlcXVpcmUoJy4vZmFzdGlmeS5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBncmFwaHFsID0gcmVxdWlyZSgnLi9ncmFwaHFsLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vaGFwaS9pbmRleC5qcycpO1xuY29uc3Qga2Fma2EgPSByZXF1aXJlKCcuL2thZmthLmpzJyk7XG5jb25zdCBrb2EgPSByZXF1aXJlKCcuL2tvYS5qcycpO1xuY29uc3QgbHJ1bWVtb2l6ZXIgPSByZXF1aXJlKCcuL2xydW1lbW9pemVyLmpzJyk7XG5jb25zdCBtb25nbyA9IHJlcXVpcmUoJy4vbW9uZ28uanMnKTtcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi9tb25nb29zZS5qcycpO1xuY29uc3QgbXlzcWwgPSByZXF1aXJlKCcuL215c3FsLmpzJyk7XG5jb25zdCBteXNxbDIgPSByZXF1aXJlKCcuL215c3FsMi5qcycpO1xuY29uc3QgbmVzdCA9IHJlcXVpcmUoJy4vbmVzdC9uZXN0LmpzJyk7XG5jb25zdCBwb3N0Z3JlcyA9IHJlcXVpcmUoJy4vcG9zdGdyZXMuanMnKTtcbmNvbnN0IHJlZGlzID0gcmVxdWlyZSgnLi9yZWRpcy5qcycpO1xuY29uc3QgdGVkaW91cyA9IHJlcXVpcmUoJy4vdGVkaW91cy5qcycpO1xuXG4vKipcbiAqIFdpdGggT1RFTCwgYWxsIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyB3aWxsIGJlIGFkZGVkLCBhcyBPVEVMIG9ubHkgaW5pdGlhbGl6ZXMgdGhlbSB3aGVuIHRoZSBwYXRjaGVkIHBhY2thZ2UgaXMgYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbigpLFxuICAgIGZhc3RpZnkuZmFzdGlmeUludGVncmF0aW9uKCksXG4gICAgZ3JhcGhxbC5ncmFwaHFsSW50ZWdyYXRpb24oKSxcbiAgICBtb25nby5tb25nb0ludGVncmF0aW9uKCksXG4gICAgbW9uZ29vc2UubW9uZ29vc2VJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsLm15c3FsSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbDIubXlzcWwySW50ZWdyYXRpb24oKSxcbiAgICByZWRpcy5yZWRpc0ludGVncmF0aW9uKCksXG4gICAgcG9zdGdyZXMucG9zdGdyZXNJbnRlZ3JhdGlvbigpLFxuICAgIC8vIEZvciBub3csIHdlIGRvIG5vdCBpbmNsdWRlIHByaXNtYSBieSBkZWZhdWx0IGJlY2F1c2UgaXQgaGFzIEVTTSBpc3N1ZXNcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzLzIzNDEwXG4gICAgLy8gVE9ETyB2ODogRmlndXJlIG91dCBhIGJldHRlciBzb2x1dGlvbiBmb3IgdGhpcywgbWF5YmUgb25seSBkaXNhYmxlIGluIEVTTSBtb2RlP1xuICAgIC8vIHByaXNtYUludGVncmF0aW9uKCksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgbmVzdC5uZXN0SW50ZWdyYXRpb24oKSxcbiAgICBpbmRleC5oYXBpSW50ZWdyYXRpb24oKSxcbiAgICBrb2Eua29hSW50ZWdyYXRpb24oKSxcbiAgICBjb25uZWN0LmNvbm5lY3RJbnRlZ3JhdGlvbigpLFxuICAgIHRlZGlvdXMudGVkaW91c0ludGVncmF0aW9uKCksXG4gICAgZ2VuZXJpY1Bvb2wuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbigpLFxuICAgIGthZmthLmthZmthSW50ZWdyYXRpb24oKSxcbiAgICBhbXFwbGliLmFtcXBsaWJJbnRlZ3JhdGlvbigpLFxuICAgIGxydW1lbW9pemVyLmxydU1lbW9pemVySW50ZWdyYXRpb24oKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIG1ldGhvZHMgdG8gaW5zdHJ1bWVudCBPVEVMLCB3aGVuIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpIHtcbiAgcmV0dXJuIFtcbiAgICBpbmRleCQxLmluc3RydW1lbnRPdGVsSHR0cCxcbiAgICBleHByZXNzLmluc3RydW1lbnRFeHByZXNzLFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgZmFzdGlmeS5pbnN0cnVtZW50RmFzdGlmeSxcbiAgICBpbmRleC5pbnN0cnVtZW50SGFwaSxcbiAgICBrYWZrYS5pbnN0cnVtZW50S2Fma2EsXG4gICAga29hLmluc3RydW1lbnRLb2EsXG4gICAgbHJ1bWVtb2l6ZXIuaW5zdHJ1bWVudExydU1lbW9pemVyLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG5lc3QuaW5zdHJ1bWVudE5lc3QsXG4gICAgbW9uZ28uaW5zdHJ1bWVudE1vbmdvLFxuICAgIG1vbmdvb3NlLmluc3RydW1lbnRNb25nb29zZSxcbiAgICBteXNxbC5pbnN0cnVtZW50TXlzcWwsXG4gICAgbXlzcWwyLmluc3RydW1lbnRNeXNxbDIsXG4gICAgcG9zdGdyZXMuaW5zdHJ1bWVudFBvc3RncmVzLFxuICAgIGluZGV4Lmluc3RydW1lbnRIYXBpLFxuICAgIGdyYXBocWwuaW5zdHJ1bWVudEdyYXBocWwsXG4gICAgcmVkaXMuaW5zdHJ1bWVudFJlZGlzLFxuICAgIHRlZGlvdXMuaW5zdHJ1bWVudFRlZGlvdXMsXG4gICAgZ2VuZXJpY1Bvb2wuaW5zdHJ1bWVudEdlbmVyaWNQb29sLFxuICAgIGFtcXBsaWIuaW5zdHJ1bWVudEFtcXBsaWIsXG4gIF07XG59XG5cbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkID0gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.4.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQywyTkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcz84OWQ3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkthZmthanMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2FqcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS2Fma2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S2Fma2EgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkthZmthanMuS2Fma2FKc0luc3RydW1lbnRhdGlvbih7XG4gICAgICBjb25zdW1lckhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5jb25zdW1lcicpO1xuICAgICAgfSxcbiAgICAgIHByb2R1Y2VySG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLnByb2R1Y2VyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2thZmthSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEthZmthKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtrYWZrYWpzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9rYWZrYWpzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtga2Fma2FJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9rYWZrYS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmthZmthSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3Qga2Fma2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2thZmthSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnRLYWZrYTtcbmV4cG9ydHMua2Fma2FJbnRlZ3JhdGlvbiA9IGthZmthSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rYWZrYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKnex();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { data } = core.spanToJSON(span);\n        // knex.version is always set in the span data\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n        if (data && 'knex.version' in data) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDRCQUE0QixtQkFBTyxDQUFDLG1OQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcz8yZWE0Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktuZXggPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tuZXgnO1xuXG5jb25zdCBpbnN0cnVtZW50S25leCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbktuZXguS25leEluc3RydW1lbnRhdGlvbih7IHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlIH0pLFxuKTtcblxuY29uc3QgX2tuZXhJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S25leCgpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAvLyBrbmV4LnZlcnNpb24gaXMgYWx3YXlzIHNldCBpbiB0aGUgc3BhbiBkYXRhXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi8wMzA5Y2FlYWZjNDRhYzljYjEzYTMzNDViNzkwYjAxYjc2ZDA0OTdkL3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1rbmV4L3NyYy9pbnN0cnVtZW50YXRpb24udHMjTDEzOFxuICAgICAgICBpZiAoZGF0YSAmJiAna25leC52ZXJzaW9uJyBpbiBkYXRhKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5rbmV4Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS25leCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBbS25leF0oaHR0cHM6Ly9rbmV4anMub3JnLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua25leEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3Qga25leEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa25leEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S25leCA9IGluc3RydW1lbnRLbmV4O1xuZXhwb3J0cy5rbmV4SW50ZWdyYXRpb24gPSBrbmV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbmV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKoa.KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = core.spanToJSON(span).data;\n        const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwyQkFBMkIsbUJBQU8sQ0FBQyxnTkFBb0M7QUFDdkUsNEJBQTRCLG1CQUFPLENBQUMsMExBQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxtSUFBc0I7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsTUFBTTtBQUN6RTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNERBQTRELEtBQUs7QUFDakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanM/YTlmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Lb2EgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgZW5zdXJlSXNXcmFwcGVkID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS29hJztcblxuY29uc3QgaW5zdHJ1bWVudEtvYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS29hLktvYUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1ZXN0SG9vayhzcGFuLCBpbmZvKSB7XG4gICAgICAgIGFkZEtvYVNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuXG4gICAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcbiAgICAgICAgY29uc3Qgcm91dGUgPSBhdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IF9vcHRpb25hbENoYWluKFtpbmZvLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uY29udGV4dCwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIucmVxdWVzdCwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfNSA9PiBfNSgpXSkgfHwgJ0dFVCc7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2tvYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLb2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbS29hXShodHRwczovL2tvYWpzLmNvbS8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwS29hRXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBLb2Egc2VydmVyLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtrb2EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMva29hLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtvYUludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBrb2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tvYUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYW4gS29hIGVycm9yIGhhbmRsZXIgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIFRoZSBlcnJvciBoYW5kbGVyIG11c3QgYmUgYmVmb3JlIGFueSBvdGhlciBtaWRkbGV3YXJlIGFuZCBhZnRlciBhbGwgY29udHJvbGxlcnMuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgRXhwcmVzcyBpbnN0YW5jZXNcbiAqIEBwYXJhbSBvcHRpb25zIHtFeHByZXNzSGFuZGxlck9wdGlvbnN9IENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhhbmRsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBLb2EgPSByZXF1aXJlKFwia29hXCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IG5ldyBLb2EoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBLb2FFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91ciByb3V0ZXMsIGV0Yy5cbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBzZXR1cEtvYUVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSk7XG5cbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5mdW5jdGlvbiBhZGRLb2FTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmh0dHAub3RlbC5rb2EnKTtcblxuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJvdXRlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1sna29hLnR5cGUnXTtcblxuICBpZiAodHlwZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0ua29hYCk7XG4gIH1cblxuICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZVxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1sna29hLm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIC8vIFNvbWVob3csIG5hbWUgaXMgc29tZXRpbWVzIGAnJ2AgZm9yIG1pZGRsZXdhcmUgc3BhbnNcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvaXNzdWVzLzIyMjBcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSB8fCAnPCB1bmtub3duID4nKTtcbiAgfVxufVxuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQywyT0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanM/YTE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMcnVNZW1vaXplcic7XG5cbmNvbnN0IGluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9scnVNZW1vaXplckludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRMcnVNZW1vaXplcigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbHJ1LW1lbW9pemVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9scnUtbWVtb2l6ZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BscnVNZW1vaXplckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2xydW1lbW9pemVyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBscnVNZW1vaXplckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudExydU1lbW9pemVyID0gaW5zdHJ1bWVudExydU1lbW9pemVyO1xuZXhwb3J0cy5scnVNZW1vaXplckludGVncmF0aW9uID0gbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydW1lbW9pemVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanM/MWIwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb2RiID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb2RiLk1vbmdvREJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgZGJTdGF0ZW1lbnRTZXJpYWxpemVyOiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcixcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nbycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbi8qKlxuICogUmVwbGFjZXMgdmFsdWVzIGluIGRvY3VtZW50IHdpdGggJz8nLCBoaWRpbmcgUElJIGFuZCBoZWxwaW5nIGdyb3VwaW5nLlxuICovXG5mdW5jdGlvbiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcihjb21tYW5kT2JqKSB7XG4gIGNvbnN0IHJlc3VsdE9iaiA9IF9zY3J1YlN0YXRlbWVudChjb21tYW5kT2JqKTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdE9iaik7XG59XG5cbmZ1bmN0aW9uIF9zY3J1YlN0YXRlbWVudCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGVsZW1lbnQgPT4gX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpKTtcbiAgfVxuXG4gIGlmIChpc0NvbW1hbmRPYmoodmFsdWUpKSB7XG4gICAgY29uc3QgaW5pdGlhbCA9IHt9O1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh2YWx1ZSlcbiAgICAgIC5tYXAoKFtrZXksIGVsZW1lbnRdKSA9PiBba2V5LCBfc2NydWJTdGF0ZW1lbnQoZWxlbWVudCldKVxuICAgICAgLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICBpZiAoaXNDb21tYW5kRW50cnkoY3VycmVudCkpIHtcbiAgICAgICAgICBwcmV2W2N1cnJlbnRbMF1dID0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0sIGluaXRpYWwpO1xuICB9XG5cbiAgLy8gQSB2YWx1ZSBsaWtlIHN0cmluZyBvciBudW1iZXIsIHBvc3NpYmxlIGNvbnRhaW5zIFBJSSwgc2NydWIgaXRcbiAgcmV0dXJuICc/Jztcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kT2JqKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFpc0J1ZmZlcih2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbHVlKSB7XG4gIGxldCBpc0J1ZmZlciA9IGZhbHNlO1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGlzQnVmZmVyO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1hbmRFbnRyeSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmNvbnN0IF9tb25nb0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nbygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29kYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29kYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG1vbmdvSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbW9uZ28vKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5tb25nb0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbW9uZ29JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vbmdvSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLl9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyID0gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXI7XG5leHBvcnRzLmluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnRNb25nbztcbmV4cG9ydHMubW9uZ29JbnRlZ3JhdGlvbiA9IG1vbmdvSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nby5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQ0FBZ0MsbUJBQU8sQ0FBQywrTkFBeUM7QUFDakYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcz8zOTg1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvb3NlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nb29zZSc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nb29zZSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UuTW9uZ29vc2VJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvb3NlJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX21vbmdvb3NlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvb3NlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFttb25nb29zZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2UpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb29zZUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvb3NlLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29vc2VJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvb3NlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb29zZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50TW9uZ29vc2U7XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29vc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw2QkFBNkIsbUJBQU8sQ0FBQyxzTkFBc0M7QUFDM0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUEsa0lBQWtJOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsLmpzPzgwM2YiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTXlzcWwuTXlTUUxJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX215c3FsSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE15c3FsKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BteXNxbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9teXNxbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50TXlzcWw7XG5leHBvcnRzLm15c3FsSW50ZWdyYXRpb24gPSBteXNxbEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsOEJBQThCLG1CQUFPLENBQUMseU5BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsdUpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzP2M5NTMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsMicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwyJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsMiA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTXlzcWwyLk15U1FMMkluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubXlzcWwyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX215c3FsMkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbDIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsMl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWwySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsMkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWwySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50TXlzcWwyO1xuZXhwb3J0cy5teXNxbDJJbnRlZ3JhdGlvbiA9IG15c3FsMkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n\n  core.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => ( target.name)); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs',\n    },\n  };\n}\n\n/**\n * Returns span options for nest event spans.\n */\nfunction getEventSpanOptions(event)\n\n {\n  return {\n    name: `event ${event}`,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'event.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.event.nestjs',\n    },\n    forceTransaction: true,\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    },\n  });\n}\n\nexports.getEventSpanOptions = getEventSpanOptions;\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDJCQUEyQjtBQUMzQixnQ0FBZ0M7QUFDaEMsb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzP2NkYTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX251bGxpc2hDb2FsZXNjZVxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IHNlbnRyeVBhdGNoZWQgPSAnc2VudHJ5UGF0Y2hlZCc7XG5cbi8qKlxuICogSGVscGVyIGNoZWNraW5nIGlmIGEgY29uY3JldGUgdGFyZ2V0IGNsYXNzIGlzIGFscmVhZHkgcGF0Y2hlZC5cbiAqXG4gKiBXZSBhbHJlYWR5IGd1YXJkIGR1cGxpY2F0ZSBwYXRjaGluZyB3aXRoIGlzV3JhcHBlZC4gSG93ZXZlciwgaXNXcmFwcGVkIGNoZWNrcyB3aGV0aGVyIGEgZmlsZSBoYXMgYmVlbiBwYXRjaGVkLCB3aGVyZWFzIHdlIHVzZSB0aGlzIGNoZWNrIGZvciBjb25jcmV0ZSB0YXJnZXQgY2xhc3Nlcy5cbiAqIFRoaXMgY2hlY2sgbWlnaHQgbm90IGJlIG5lY2Vzc2FyeSwgYnV0IGJldHRlciB0byBwbGF5IGl0IHNhZmUuXG4gKi9cbmZ1bmN0aW9uIGlzUGF0Y2hlZCh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5zZW50cnlQYXRjaGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjb3JlLmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXQsIHNlbnRyeVBhdGNoZWQsIHRydWUpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBzcGFuIG9wdGlvbnMgZm9yIG5lc3QgbWlkZGxld2FyZSBzcGFucy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZVxuZnVuY3Rpb24gZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zKHRhcmdldCwgbmFtZSA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBzcGFuX25hbWUgPSBfbnVsbGlzaENvYWxlc2NlKG5hbWUsICgpID0+ICggdGFyZ2V0Lm5hbWUpKTsgLy8gZmFsbGJhY2sgdG8gY2xhc3MgbmFtZSBpZiBubyBuYW1lIGlzIHByb3ZpZGVkXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBzcGFuX25hbWUsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdtaWRkbGV3YXJlLm5lc3RqcycsXG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLm1pZGRsZXdhcmUubmVzdGpzJyxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgc3BhbiBvcHRpb25zIGZvciBuZXN0IGV2ZW50IHNwYW5zLlxuICovXG5mdW5jdGlvbiBnZXRFdmVudFNwYW5PcHRpb25zKGV2ZW50KVxuXG4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGBldmVudCAke2V2ZW50fWAsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdldmVudC5uZXN0anMnLFxuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5ldmVudC5uZXN0anMnLFxuICAgIH0sXG4gICAgZm9yY2VUcmFuc2FjdGlvbjogdHJ1ZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBBZGRzIGluc3RydW1lbnRhdGlvbiB0byBhIGpzIG9ic2VydmFibGUgYW5kIGF0dGFjaGVzIHRoZSBzcGFuIHRvIGFuIGFjdGl2ZSBwYXJlbnQgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE9ic2VydmFibGUob2JzZXJ2YWJsZSwgYWN0aXZlU3Bhbikge1xuICBpZiAoYWN0aXZlU3Bhbikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSA9IG5ldyBQcm94eShvYnNlcnZhYmxlLnN1YnNjcmliZSwge1xuICAgICAgYXBwbHk6IChvcmlnaW5hbFN1YnNjcmliZSwgdGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSkgPT4ge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihhY3RpdmVTcGFuLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb3JpZ2luYWxTdWJzY3JpYmUuYXBwbHkodGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZCgoKSA9PiBhY3RpdmVTcGFuLmVuZCgpKTtcbiAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm94aWVzIHRoZSBuZXh0KCkgY2FsbCBpbiBhIG5lc3RqcyBtaWRkbGV3YXJlIHRvIGVuZCB0aGUgc3BhbiB3aGVuIGl0IGlzIGNhbGxlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dFByb3h5KG5leHQsIHNwYW4sIHByZXZTcGFuKSB7XG4gIHJldHVybiBuZXcgUHJveHkobmV4dCwge1xuICAgIGFwcGx5OiAob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpID0+IHtcbiAgICAgIHNwYW4uZW5kKCk7XG5cbiAgICAgIGlmIChwcmV2U3Bhbikge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihwcmV2U3BhbiwgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseShvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuZ2V0RXZlbnRTcGFuT3B0aW9ucyA9IGdldEV2ZW50U3Bhbk9wdGlvbnM7XG5leHBvcnRzLmdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucyA9IGdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucztcbmV4cG9ydHMuZ2V0TmV4dFByb3h5ID0gZ2V0TmV4dFByb3h5O1xuZXhwb3J0cy5pbnN0cnVtZW50T2JzZXJ2YWJsZSA9IGluc3RydW1lbnRPYnNlcnZhYmxlO1xuZXhwb3J0cy5pc1BhdGNoZWQgPSBpc1BhdGNoZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-nestjs-core@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestEventInstrumentation = __webpack_require__(/*! ./sentry-nest-event-instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Nest';\n\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\n\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\n\nconst instrumentNestEvent = instrument.generateInstrumentOnce('Nest-Event', () => {\n  return new sentryNestEventInstrumentation.SentryNestEventInstrumentation();\n});\n\nconst instrumentNest = Object.assign(\n  () => {\n    instrumentNestCore();\n    instrumentNestCommon();\n    instrumentNestEvent();\n  },\n  { id: INTEGRATION_NAME },\n);\n\n/**\n * Integration capturing tracing data for NestJS.\n *\n * @deprecated The `nestIntegration` is deprecated. Instead, use the NestJS SDK directly (`@sentry/nestjs`), or use the `nestIntegration` export from `@sentry/nestjs`.\n */\nconst nestIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    },\n  };\n});\n\n/**\n * Setup an error handler for Nest.\n *\n * @deprecated `setupNestErrorHandler` is deprecated.\n * Instead use the `@sentry/nestjs` package, which has more functional APIs for capturing errors.\n * See the [`@sentry/nestjs` Setup Guide](https://docs.sentry.io/platforms/javascript/guides/nestjs/) for how to set up the Sentry NestJS SDK.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[Sentry] Warning: You used the `setupNestErrorHandler()` method to set up Sentry error monitoring. This function is deprecated and will be removed in the next major version. Instead, it is recommended to use the `@sentry/nestjs` package. To set up the NestJS SDK see: https://docs.sentry.io/platforms/javascript/guides/nestjs/',\n    );\n  });\n\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        core.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n\n      if (context.getType() === 'http') {\n        const req = context.switchToHttp().getRequest();\n        if (req.route) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n\n      return next.handle();\n    },\n  });\n\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n\n  app.useGlobalFilters(wrappedFilter);\n}\n\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;\n//# sourceMappingURL=nest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwwQkFBMEIsbUJBQU8sQ0FBQyw2TUFBbUM7QUFDckUsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzP2Y5OGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uUGcgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Bvc3RncmVzJztcblxuY29uc3QgaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25QZy5QZ0luc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLnBvc3RncmVzJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX3Bvc3RncmVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFBvc3RncmVzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtwZ10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGcpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Bwb3N0Z3Jlc0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3Bvc3RncmVzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkucG9zdGdyZXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHBvc3RncmVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50UG9zdGdyZXM7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@prisma+instrumentation@5.19.1/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n    // @ts-expect-error We need to do the following for interop reasons\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n\n  return new EsmInteropPrismaInstrumentation({});\n});\n\nconst _prismaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        if (spanJSON.description === 'prisma:engine:db_query') {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n *\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * @example\n *\n * Make sure `previewFeatures = [\"tracing\"]` is set in the prisma client generator block. See the\n * [prisma docs](https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing) for more details.\n *\n * ```prisma\n * generator client {\n *  provider = \"prisma-client-js\"\n *  previewFeatures = [\"tracing\"]\n * }\n * ```\n *\n * Then you can use the integration like this:\n *\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.prismaIntegration()],\n * });\n * ```\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcHJpc21hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw4QkFBOEIsbUJBQU8sQ0FBQyxpSkFBeUI7QUFDL0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ByaXNtYS5qcz9kNjdkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHByaXNtYUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BwcmlzbWEvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUHJpc21hJztcblxuY29uc3QgaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiB7XG4gIGNvbnN0IEVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24gPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgbmVlZCB0byBkbyB0aGUgZm9sbG93aW5nIGZvciBpbnRlcm9wIHJlYXNvbnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgX29wdGlvbmFsQ2hhaW4oW3ByaXNtYUluc3RydW1lbnRhdGlvbiwgJ2FjY2VzcycsIF8gPT4gXy5kZWZhdWx0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5QcmlzbWFJbnN0cnVtZW50YXRpb25dKSB8fCBwcmlzbWFJbnN0cnVtZW50YXRpb24uUHJpc21hSW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiBuZXcgRXNtSW50ZXJvcFByaXNtYUluc3RydW1lbnRhdGlvbih7fSk7XG59KTtcblxuY29uc3QgX3ByaXNtYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQcmlzbWEoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtzcGFuSlNPTiwgJ2FjY2VzcycsIF8zID0+IF8zLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC5zdGFydHNXaXRoLCAnY2FsbCcsIF81ID0+IF81KCdwcmlzbWE6JyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucHJpc21hJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdwcmlzbWE6ZW5naW5lOmRiX3F1ZXJ5Jykge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYi5zeXN0ZW0nLCAncHJpc21hJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcHJpc21hXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9wcmlzbWEpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BwcmlzbWFJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wcmlzbWEvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIE1ha2Ugc3VyZSBgcHJldmlld0ZlYXR1cmVzID0gW1widHJhY2luZ1wiXWAgaXMgc2V0IGluIHRoZSBwcmlzbWEgY2xpZW50IGdlbmVyYXRvciBibG9jay4gU2VlIHRoZVxuICogW3ByaXNtYSBkb2NzXShodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvb3BlbnRlbGVtZXRyeS10cmFjaW5nKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIGBgYHByaXNtYVxuICogZ2VuZXJhdG9yIGNsaWVudCB7XG4gKiAgcHJvdmlkZXIgPSBcInByaXNtYS1jbGllbnQtanNcIlxuICogIHByZXZpZXdGZWF0dXJlcyA9IFtcInRyYWNpbmdcIl1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZW4geW91IGNhbiB1c2UgdGhlIGludGVncmF0aW9uIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnByaXNtYUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcHJpc21hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wcmlzbWFJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnRQcmlzbWE7XG5leHBvcnRzLnByaXNtYUludGVncmF0aW9uID0gcHJpc21hSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmlzbWEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSw4QkFBOEIsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDOUUsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyw2SUFBMkI7O0FBRXREOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrRkFBa0Y7QUFDM0c7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4QyxHQUFHO0FBQ0gsSUFBSSxzQkFBc0I7QUFDMUI7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcz83OTliIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbklvcmVkaXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taW9yZWRpcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uUmVkaXM0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHJlZGlzQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZWRpc0NhY2hlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUmVkaXMnO1xuXG5sZXQgX3JlZGlzT3B0aW9ucyA9IHt9O1xuXG5jb25zdCBjYWNoZVJlc3BvbnNlSG9vayA9IChzcGFuLCByZWRpc0NvbW1hbmQsIGNtZEFyZ3MsIHJlc3BvbnNlKSA9PiB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucmVkaXMnKTtcblxuICBjb25zdCBzYWZlS2V5ID0gcmVkaXNDYWNoZS5nZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpO1xuICBjb25zdCBjYWNoZU9wZXJhdGlvbiA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKTtcblxuICBpZiAoXG4gICAgIXNhZmVLZXkgfHxcbiAgICAhY2FjaGVPcGVyYXRpb24gfHxcbiAgICAhX29wdGlvbmFsQ2hhaW4oW19yZWRpc09wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5jYWNoZVByZWZpeGVzXSkgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzIgPT4gXzIoc3BhbiksICdhY2Nlc3MnLCBfMyA9PiBfMy5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNFsnbmV0LnBlZXIubmFtZSddXSk7XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzUgPT4gXzUoc3BhbiksICdhY2Nlc3MnLCBfNiA9PiBfNi5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfN1snbmV0LnBlZXIucG9ydCddXSk7XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZShjb3JlLnRydW5jYXRlKHNwYW5EZXNjcmlwdGlvbiwgMTAyNCkpO1xufTtcblxuY29uc3QgaW5zdHJ1bWVudElPUmVkaXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoJ0lPUmVkaXMnLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcy5JT1JlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50UmVkaXM0ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdSZWRpcy00JywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvblJlZGlzNC5SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuLyoqIFRvIGJlIGFibGUgdG8gcHJlbG9hZCBhbGwgUmVkaXMgT1RlbCBpbnN0cnVtZW50YXRpb25zIHdpdGgganVzdCBvbmUgSUQgKFwiUmVkaXNcIiksIGFsbCB0aGUgaW5zdHJ1bWVudGF0aW9ucyBhcmUgZ2VuZXJhdGVkIGluIHRoaXMgb25lIGZ1bmN0aW9uICAqL1xuY29uc3QgaW5zdHJ1bWVudFJlZGlzID0gT2JqZWN0LmFzc2lnbihcbiAgKCkgPT4ge1xuICAgIGluc3RydW1lbnRJT1JlZGlzKCk7XG4gICAgaW5zdHJ1bWVudFJlZGlzNCgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentTedious();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { description, data } = core.spanToJSON(span);\n        // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n        if (!description || _optionalChain([data, 'optionalAccess', _ => _['db.system']]) !== 'mssql') {\n          return;\n        }\n\n        const operation = _optionalChain([description, 'optionalAccess', _2 => _2.split, 'call', _3 => _3(' '), 'access', _4 => _4[0]]) || '';\n        if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsd0lBQXdJOztBQUV4STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcz85ZmEyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblRlZGlvdXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdGVkaW91cycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMgPSBuZXcgU2V0KFtcbiAgJ2NhbGxQcm9jZWR1cmUnLFxuICAnZXhlY1NxbCcsXG4gICdleGVjU3FsQmF0Y2gnLFxuICAnZXhlY0J1bGtMb2FkJyxcbiAgJ3ByZXBhcmUnLFxuICAnZXhlY3V0ZScsXG5dKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdUZWRpb3VzJztcblxuY29uc3QgaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvblRlZGlvdXMuVGVkaW91c0luc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfdGVkaW91c0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRUZWRpb3VzKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAvLyBUZWRpdXMgaW50ZWdyYXRpb24gYWx3YXlzIHNldCBhIHNwYW4gbmFtZSBhbmQgYGRiLnN5c3RlbWAgYXR0cmlidXRlIHRvIGBtc3NxbGAuXG4gICAgICAgIGlmICghZGVzY3JpcHRpb24gfHwgX29wdGlvbmFsQ2hhaW4oW2RhdGEsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gX1snZGIuc3lzdGVtJ11dKSAhPT0gJ21zc3FsJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IF9vcHRpb25hbENoYWluKFtkZXNjcmlwdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuc3BsaXQsICdjYWxsJywgXzMgPT4gXzMoJyAnKSwgJ2FjY2VzcycsIF80ID0+IF80WzBdXSkgfHwgJyc7XG4gICAgICAgIGlmIChURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMuaGFzKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnRlZGlvdXMnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFt0ZWRpb3VzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90ZWRpb3VzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgdGVkaW91c0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3RlZGlvdXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS50ZWRpb3VzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCB0ZWRpb3VzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF90ZWRpb3VzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRUZWRpb3VzID0gaW5zdHJ1bWVudFRlZGlvdXM7XG5leHBvcnRzLnRlZGlvdXNJbnRlZ3JhdGlvbiA9IHRlZGlvdXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlZGlvdXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcz8wMTRiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gY29yZS5wYXJzZVNlbXZlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUpIDtcbmNvbnN0IE5PREVfTUFKT1IgPSBOT0RFX1ZFUlNJT04ubWFqb3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfVkVSU0lPTiA9IE5PREVfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVWZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9jb250ZXh0TWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDBCQUEwQixtQkFBTyxDQUFDLGdOQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQyw0T0FBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvY29udGV4dE1hbmFnZXIuanM/MDkyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb250ZXh0QXN5bmNIb29rcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgY3VzdG9tIENvbnRleHRNYW5hZ2VyIGZvciBPcGVuVGVsZW1ldHJ5LCB3aGljaCBleHRlbmRzIHRoZSBkZWZhdWx0IEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIuXG4gKiBJdCBlbnN1cmVzIHRoYXQgd2UgY3JlYXRlIGEgbmV3IGh1YiBwZXIgY29udGV4dCwgc28gdGhhdCB0aGUgT1RFTCBDb250ZXh0ICYgdGhlIFNlbnRyeSBIdWIgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBjdXJyZW50bHkgb25seSBzdXBwb3J0IEFzeW5jSG9va3Mgd2l0aCB0aGlzLFxuICogYnV0IHNpbmNlIHRoaXMgc2hvdWxkIHdvcmsgZm9yIE5vZGUgMTQrIGFueWhvdyB0aGF0IHNob3VsZCBiZSBnb29kIGVub3VnaC5cbiAqL1xuY29uc3QgU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBvcGVudGVsZW1ldHJ5LndyYXBDb250ZXh0TWFuYWdlckNsYXNzKGNvbnRleHRBc3luY0hvb2tzLkFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIpO1xuXG5leHBvcnRzLlNlbnRyeUNvbnRleHRNYW5hZ2VyID0gU2VudHJ5Q29udGV4dE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0TWFuYWdlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name];\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n    { id: name },\n  );\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsc0JBQXNCLG1CQUFPLENBQUMsNE9BQXVCOztBQUVyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLE1BQU0sVUFBVTtBQUNoQjtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzPzVjMDciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIGNyZWF0b3IsXG4pIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRlZCA9IElOU1RSVU1FTlRFRFtuYW1lXTtcbiAgICAgIGlmIChpbnN0cnVtZW50ZWQpIHtcbiAgICAgICAgLy8gSWYgb3B0aW9ucyBhcmUgcHJvdmlkZWQsIGVuc3VyZSB3ZSB1cGRhdGUgdGhlbVxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGluc3RydW1lbnRlZC5zZXRDb25maWcob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBjcmVhdG9yKG9wdGlvbnMpO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uO1xuXG4gICAgICBvcGVudGVsZW1ldHJ5LmFkZE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5JTlNUUlVNRU5URUQgPSBJTlNUUlVNRU5URUQ7XG5leHBvcnRzLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UgPSBnZW5lcmF0ZUluc3RydW1lbnRPbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLG1CQUFPLENBQUMsOEJBQVk7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcz83YTFlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xucmVxdWlyZSgnbm9kZTpodHRwcycpO1xuXG4vKipcbiogVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Ub29UYWxsTmF0ZS9wcm94eS1hZ2VudHMvdHJlZS9iMTMzMjk1ZmQxNmY2NDc1NTc4YjZiMTViZDliNGUzM2VjYjBkMGI3XG4qIFdpdGggdGhlIGZvbGxvd2luZyBMSUNFTlNFOlxuKlxuKiAoVGhlIE1JVCBMaWNlbnNlKVxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgTmF0aGFuIFJhamxpY2ggPG5hdGhhbkB0b290YWxsbmF0ZS5uZXQ+KlxuKlxuKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4qICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4qIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoqXG4qXG4qIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4qIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLipcbipcbiogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4qIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4qIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4qIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4qIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4qIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuKi9cblxuY29uc3QgSU5URVJOQUwgPSBTeW1ib2woJ0FnZW50QmFzZUludGVybmFsU3RhdGUnKTtcblxuY2xhc3MgQWdlbnQgZXh0ZW5kcyBodHRwLkFnZW50IHtcblxuICAvLyBTZXQgYnkgYGh0dHAuQWdlbnRgIC0gbWlzc2luZyBmcm9tIGBAdHlwZXMvbm9kZWBcblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpc1tJTlRFUk5BTF0gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGFuIGBodHRwYCBvciBgaHR0cHNgIHJlcXVlc3QuXG4gICAqL1xuICBpc1NlY3VyZUVuZHBvaW50KG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgLy8gRmlyc3QgY2hlY2sgdGhlIGBzZWN1cmVFbmRwb2ludGAgcHJvcGVydHkgZXhwbGljaXRseSwgc2luY2UgdGhpc1xuICAgICAgLy8gbWVhbnMgdGhhdCBhIHBhcmVudCBgQWdlbnRgIGlzIFwicGFzc2luZyB0aHJvdWdoXCIgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgKS5zZWN1cmVFbmRwb2ludCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnNlY3VyZUVuZHBvaW50O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBleHBsaWNpdCBgc2VjdXJlYCBlbmRwb2ludCwgY2hlY2sgaWYgYHByb3RvY29sYCBwcm9wZXJ0eSBpc1xuICAgICAgLy8gc2V0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSB0aGUgY2FzZSBzaW5jZSB1c2luZyBhIGZ1bGwgc3RyaW5nIFVSTFxuICAgICAgLy8gb3IgYFVSTGAgaW5zdGFuY2Ugc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiB1c2FnZS5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm90b2NvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGlmIG5vIGBwcm90b2NvbGAgcHJvcGVydHkgd2FzIHNldCwgdGhlbiBmYWxsIGJhY2sgdG9cbiAgICAvLyBjaGVja2luZyB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGN1cnJlbnQgY2FsbCBzdGFjaywgYW5kIHRyeSB0b1xuICAgIC8vIGRldGVjdCB0aGUgXCJodHRwc1wiIG1vZHVsZS5cbiAgICBjb25zdCB7IHN0YWNrIH0gPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAodHlwZW9mIHN0YWNrICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdGFjay5zcGxpdCgnXFxuJykuc29tZShsID0+IGwuaW5kZXhPZignKGh0dHBzLmpzOicpICE9PSAtMSB8fCBsLmluZGV4T2YoJ25vZGU6aHR0cHM6JykgIT09IC0xKTtcbiAgfVxuXG4gIGNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKSB7XG4gICAgY29uc3QgY29ubmVjdE9wdHMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc2VjdXJlRW5kcG9pbnQ6IHRoaXMuaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSxcbiAgICB9O1xuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLmNvbm5lY3QocmVxLCBjb25uZWN0T3B0cykpXG4gICAgICAudGhlbihzb2NrZXQgPT4ge1xuICAgICAgICBpZiAoc29ja2V0IGluc3RhbmNlb2YgaHR0cC5BZ2VudCkge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGFkZFJlcXVlc3QoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgICAgcmV0dXJuIHNvY2tldC5hZGRSZXF1ZXN0KHJlcSwgY29ubmVjdE9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGNyZWF0ZVNvY2tldCgpYCBpc24ndCBkZWZpbmVkIGluIGBAdHlwZXMvbm9kZWBcbiAgICAgICAgc3VwZXIuY3JlYXRlU29ja2V0KHJlcSwgb3B0aW9ucywgY2IpO1xuICAgICAgfSwgY2IpO1xuICB9XG5cbiAgY3JlYXRlQ29ubmVjdGlvbigpIHtcbiAgICBjb25zdCBzb2NrZXQgPSB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0O1xuICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc29ja2V0IHdhcyByZXR1cm5lZCBpbiB0aGUgYGNvbm5lY3QoKWAgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvY2tldDtcbiAgfVxuXG4gIGdldCBkZWZhdWx0UG9ydCgpIHtcbiAgICByZXR1cm4gX251bGxpc2hDb2FsZXNjZSh0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCwgKCkgPT4gKCAodGhpcy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyA0NDMgOiA4MCkpKTtcbiAgfVxuXG4gIHNldCBkZWZhdWx0UG9ydCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCA9IHY7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHByb3RvY29sKCkge1xuICAgIHJldHVybiBfbnVsbGlzaENvYWxlc2NlKHRoaXNbSU5URVJOQUxdLnByb3RvY29sLCAoKSA9PiAoICh0aGlzLmlzU2VjdXJlRW5kcG9pbnQoKSA/ICdodHRwczonIDogJ2h0dHA6JykpKTtcbiAgfVxuXG4gIHNldCBwcm90b2NvbCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCA9IHY7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuQWdlbnQgPSBBZ2VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcz81ZWViIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICBjb3JlLmxvZ2dlci5sb2coJ1todHRwcy1wcm94eS1hZ2VudDpwYXJzZS1wcm94eS1yZXNwb25zZV0nLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQcm94eVJlc3BvbnNlKHNvY2tldCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIHdlIG5lZWQgdG8gYnVmZmVyIGFueSBIVFRQIHRyYWZmaWMgdGhhdCBoYXBwZW5zIHdpdGggdGhlIHByb3h5IGJlZm9yZSB3ZSBnZXRcbiAgICAvLyB0aGUgQ09OTkVDVCByZXNwb25zZSwgc28gdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBcIjIwMFwiXG4gICAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgICAvLyBIVFRQIHBhcnNlciBpcyBob29rZWQgdXAuLi5cbiAgICBsZXQgYnVmZmVyc0xlbmd0aCA9IDA7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgIGNvbnN0IGIgPSBzb2NrZXQucmVhZCgpO1xuICAgICAgaWYgKGIpIG9uZGF0YShiKTtcbiAgICAgIGVsc2Ugc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZW5kJyk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZXJyb3IgJW8nLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25kYXRhKGIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcbiAgICAgIGNvbnN0IGVuZE9mSGVhZGVycyA9IGJ1ZmZlcmVkLmluZGV4T2YoJ1xcclxcblxcclxcbicpO1xuXG4gICAgICBpZiAoZW5kT2ZIZWFkZXJzID09PSAtMSkge1xuICAgICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xuICAgICAgICBkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcbiAgICAgICAgcmVhZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlclBhcnRzID0gYnVmZmVyZWQuc2xpY2UoMCwgZW5kT2ZIZWFkZXJzKS50b1N0cmluZygnYXNjaWknKS5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICBjb25zdCBmaXJzdExpbmUgPSBoZWFkZXJQYXJ0cy5zaGlmdCgpO1xuICAgICAgaWYgKCFmaXJzdExpbmUpIHtcbiAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ05vIGhlYWRlciByZWNlaXZlZCBmcm9tIHByb3h5IENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9ICsoZmlyc3RMaW5lUGFydHNbMV0gfHwgMCk7XG4gICAgICBjb25zdCBzdGF0dXNUZXh0ID0gZmlyc3RMaW5lUGFydHMuc2xpY2UoMikuam9pbignICcpO1xuICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgaGVhZGVyUGFydHMpIHtcbiAgICAgICAgaWYgKCFoZWFkZXIpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGZpcnN0Q29sb24gPT09IC0xKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBoZWFkZXIgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlOiBcIiR7aGVhZGVyfVwiYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IGhlYWRlci5zbGljZSgwLCBmaXJzdENvbG9uKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zbGljZShmaXJzdENvbG9uICsgMSkudHJpbVN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSBbY3VycmVudCwgdmFsdWVdO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgICAgICBjdXJyZW50LnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1ZygnZ290IHByb3h5IHNlcnZlciByZXNwb25zZTogJW8gJW8nLCBmaXJzdExpbmUsIGhlYWRlcnMpO1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGNvbm5lY3Q6IHtcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgYnVmZmVyZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XG5cbiAgICByZWFkKCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLnBhcnNlUHJveHlSZXNwb25zZSA9IHBhcnNlUHJveHlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n// PUBLIC APIS\n\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE && core.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(\n        () => {\n          debugBuild.DEBUG_BUILD && core.logger.log('Flushing client reports based on interval.');\n          this._flushOutcomes();\n        },\n        _nullishCoalesce(clientOptions.clientReportFlushInterval, () => ( DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)),\n      )\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxXQUFXLG1CQUFPLENBQUMsd0JBQVM7QUFDNUIsWUFBWSxtQkFBTyxDQUFDLHNJQUFvQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsdUJBQXVCLG1CQUFPLENBQUMsc0NBQWdCO0FBQy9DLG1CQUFtQixtQkFBTyxDQUFDLGdJQUFtQjs7QUFFOUMsdURBQXVEOztBQUV2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtDQUErQztBQUNoRTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUNBQXVDLFlBQVksWUFBWSxpREFBaUQsd0JBQXdCLEVBQUU7QUFDMUk7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2NsaWVudC5qcz9lOWMzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2UsXG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnbm9kZTpvcycpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB3b3JrZXJfdGhyZWFkcyA9IHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgREVGQVVMVF9DTElFTlRfUkVQT1JUX0ZMVVNIX0lOVEVSVkFMX01TID0gNjAwMDA7IC8vIDYwcyB3YXMgY2hvc2VuIGFyYml0cmFyaWx5XG5cbi8qKiBBIGNsaWVudCBmb3IgdXNpbmcgU2VudHJ5IHdpdGggTm9kZSAmIE9wZW5UZWxlbWV0cnkuICovXG5jbGFzcyBOb2RlQ2xpZW50IGV4dGVuZHMgY29yZS5TZXJ2ZXJSdW50aW1lQ2xpZW50IHtcblxuICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcGxhdGZvcm06ICdub2RlJyxcbiAgICAgIHJ1bnRpbWU6IHsgbmFtZTogJ25vZGUnLCB2ZXJzaW9uOiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uIH0sXG4gICAgICBzZXJ2ZXJOYW1lOiBvcHRpb25zLnNlcnZlck5hbWUgfHwgZ2xvYmFsLnByb2Nlc3MuZW52LlNFTlRSWV9OQU1FIHx8IG9zLmhvc3RuYW1lKCksXG4gICAgfTtcblxuICAgIGNvcmUuYXBwbHlTZGtNZXRhZGF0YShjbGllbnRPcHRpb25zLCAnbm9kZScpO1xuXG4gICAgY29yZS5sb2dnZXIubG9nKFxuICAgICAgYEluaXRpYWxpemluZyBTZW50cnk6IHByb2Nlc3M6ICR7cHJvY2Vzcy5waWR9LCB0aHJlYWQ6ICR7d29ya2VyX3RocmVhZHMuaXNNYWluVGhyZWFkID8gJ21haW4nIDogYHdvcmtlci0ke3dvcmtlcl90aHJlYWRzLnRocmVhZElkfWB9LmAsXG4gICAgKTtcblxuICAgIHN1cGVyKGNsaWVudE9wdGlvbnMpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgT1RFTCB0cmFjZXIuICovXG4gICBnZXQgdHJhY2VyKCkge1xuICAgIGlmICh0aGlzLl90cmFjZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFjZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9ICdAc2VudHJ5L25vZGUnO1xuICAgIGNvbnN0IHZlcnNpb24gPSBjb3JlLlNES19WRVJTSU9OO1xuICAgIGNvbnN0IHRyYWNlciA9IGFwaS50cmFjZS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbik7XG4gICAgdGhpcy5fdHJhY2VyID0gdHJhY2VyO1xuXG4gICAgcmV0dXJuIHRyYWNlcjtcbiAgfVxuXG4gIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy50cmFjZVByb3ZpZGVyO1xuICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3IgPSBfb3B0aW9uYWxDaGFpbihbcHJvdmlkZXIsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5hY3RpdmVTcGFuUHJvY2Vzc29yXSk7XG5cbiAgICBpZiAoc3BhblByb2Nlc3Nvcikge1xuICAgICAgYXdhaXQgc3BhblByb2Nlc3Nvci5mb3JjZUZsdXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0T3B0aW9ucygpLnNlbmRDbGllbnRSZXBvcnRzKSB7XG4gICAgICB0aGlzLl9mbHVzaE91dGNvbWVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmZsdXNoKHRpbWVvdXQpO1xuICB9XG5cbiAgLy8gRXNsaW50IGlnbm9yZSBleHBsYW5hdGlvbjogVGhpcyBpcyBhbHJlYWR5IGRvY3VtZW50ZWQgaW4gc3VwZXIuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gICBjbG9zZSh0aW1lb3V0KSB7XG4gICAgaWYgKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcikge1xuICAgICAgcHJvY2Vzcy5vZmYoJ2JlZm9yZUV4aXQnLCB0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY2xvc2UodGltZW91dCk7XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBzdGFydCB0cmFja2luZyBjbGllbnQgcmVwb3J0cyBmb3IgdGhpcyBjbGllbnQuXG4gICAqXG4gICAqIE5PVElDRTogVGhpcyBtZXRob2Qgd2lsbCBjcmVhdGUgYW4gaW50ZXJ2YWwgdGhhdCBpcyBwZXJpb2RpY2FsbHkgY2FsbGVkIGFuZCBhdHRhY2ggYSBgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcpYFxuICAgKiBob29rLiBUbyBjbGVhbiB1cCB0aGVzZSByZXNvdXJjZXMsIGNhbGwgYC5jbG9zZSgpYCB3aGVuIHlvdSBubyBsb25nZXIgaW50ZW5kIHRvIHVzZSB0aGUgY2xpZW50LiBOb3QgZG9pbmcgc28gd2lsbFxuICAgKiByZXN1bHQgaW4gYSBtZW1vcnkgbGVhay5cbiAgICovXG4gIC8vIFRoZSByZWFzb24gY2xpZW50IHJlcG9ydHMgbmVlZCB0byBiZSBtYW51YWxseSBhY3RpdmF0ZWQgd2l0aCB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mIGp1c3QgZW5hYmxpbmcgdGhlbSBpbiBhXG4gIC8vIGNvbnN0cnVjdG9yLCBpcyB0aGF0IGlmIHVzZXJzIHBlcmlvZGljYWxseSBhbmQgdW5ib3VuZGVkbHkgY3JlYXRlIG5ldyBjbGllbnRzLCB3ZSB3aWxsIGNyZWF0ZSBtb3JlIGFuZCBtb3JlXG4gIC8vIGludGVydmFscyBhbmQgYmVmb3JlRXhpdCBsaXN0ZW5lcnMsIHRodXMgbGVha2luZyBtZW1vcnkuIEluIHRoZXNlIHNpdHVhdGlvbnMsIHVzZXJzIGFyZSByZXF1aXJlZCB0byBjYWxsXG4gIC8vIGBjbGllbnQuY2xvc2UoKWAgaW4gb3JkZXIgdG8gZGlzcG9zZSBvZiB0aGUgYWNxdWlyZWQgcmVzb3VyY2VzLlxuICAvLyBXZSBhc3N1bWUgdGhhdCBjYWxsaW5nIHRoaXMgbWV0aG9kIGluIFNlbnRyeS5pbml0KCkgaXMgYSBzZW5zaWJsZSBkZWZhdWx0LCBiZWNhdXNlIGNhbGxpbmcgU2VudHJ5LmluaXQoKSBvdmVyIGFuZFxuICAvLyBvdmVyIGFnYWluIHdvdWxkIGFsc28gcmVzdWx0IGluIG1lbW9yeSBsZWFrcy5cbiAgLy8gTm90ZTogV2UgaGF2ZSBleHBlcmltZW50ZWQgd2l0aCB1c2luZyBgRmluYWxpemF0aW9uUmVnaXN0eWAgdG8gY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIGNsaWVudCBpcyBnYXJiYWdlXG4gIC8vIGNvbGxlY3RlZCwgYnV0IGl0IGRpZCBub3Qgd29yaywgYmVjYXVzZSB0aGUgY2xlYW51cCBmdW5jdGlvbiBuZXZlciBnb3QgY2FsbGVkLlxuICAgc3RhcnRDbGllbnRSZXBvcnRUcmFja2luZygpIHtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKGNsaWVudE9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLmxvZygnRmx1c2hpbmcgY2xpZW50IHJlcG9ydHMgYmFzZWQgb24gaW50ZXJ2YWwuJyk7XG4gICAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgICB9LFxuICAgICAgICBfbnVsbGlzaENvYWxlc2NlKGNsaWVudE9wdGlvbnMuY2xpZW50UmVwb3J0Rmx1c2hJbnRlcnZhbCwgKCkgPT4gKCBERUZBVUxUX0NMSUVOVF9SRVBPUlRfRkxVU0hfSU5URVJWQUxfTVMpKSxcbiAgICAgIClcbiAgICAgICAgLy8gVW5yZWYgaXMgY3JpdGljYWwgZm9yIG5vdCBwcmV2ZW50aW5nIHRoZSBwcm9jZXNzIGZyb20gZXhpdGluZyBiZWNhdXNlIHRoZSBpbnRlcnZhbCBpcyBhY3RpdmUuXG4gICAgICAgIC51bnJlZigpO1xuXG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTm9kZUNsaWVudCA9IE5vZGVDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    console$1.consoleIntegration(),\n    index.httpIntegration(),\n    nodeFetch.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$1.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1);\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    core.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n\n  const autoSessionTracking =\n    typeof release !== 'string'\n      ? false\n      : options.autoSessionTracking === undefined\n        ? true\n        : options.autoSessionTracking;\n\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const baseOptions = core.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true,\n  });\n\n  const overwriteOptions = core.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate,\n  });\n\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations,\n    }),\n  };\n\n  return clientOptions;\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+resources@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(ssr)/../../node_modules/.pnpm/import-in-the-middle@1.11.2/node_modules/import-in-the-middle/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client);\n  client.traceProvider = provider;\n}\n\nfunction getRegisterOptions(esmHookConfig) {\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    return { data: { addHookMessagePort, include: esmHookConfig.include || [] }, transferList: [addHookMessagePort] };\n  }\n\n  return { data: esmHookConfig };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl =\n      typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) !== 'undefined' ? (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) : undefined;\n\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        core.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or use version 7.x of the Sentry Node.js SDK.',\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n  });\n  provider.addSpanProcessor(\n    new opentelemetry.SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration,\n    }),\n  );\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager(),\n  });\n\n  return provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => ( nativeHttpModule)), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => ( null));\n            const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => ( null));\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdHJhbnNwb3J0cy9odHRwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLDhCQUFZO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLGdDQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLDRCQUFXO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxjQUFjLG1CQUFPLENBQUMsZ0lBQW1COztBQUV6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUVBQWlFO0FBQ2pFOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDBDQUEwQzs7QUFFN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFdBQVc7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDZDQUE2QztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVMsRUFBRSxPQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYixXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdHJhbnNwb3J0cy9odHRwLmpzPzYzNzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX251bGxpc2hDb2FsZXNjZVxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ25vZGU6aHR0cHMnKTtcbmNvbnN0IG5vZGVfc3RyZWFtID0gcmVxdWlyZSgnbm9kZTpzdHJlYW0nKTtcbmNvbnN0IG5vZGVfemxpYiA9IHJlcXVpcmUoJ25vZGU6emxpYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9wcm94eS9pbmRleC5qcycpO1xuXG4vLyBFc3RpbWF0ZWQgbWF4aW11bSBzaXplIGZvciByZWFzb25hYmxlIHN0YW5kYWxvbmUgZXZlbnRcbmNvbnN0IEdaSVBfVEhSRVNIT0xEID0gMTAyNCAqIDMyO1xuXG4vKipcbiAqIEdldHMgYSBzdHJlYW0gZnJvbSBhIFVpbnQ4QXJyYXkgb3Igc3RyaW5nXG4gKiBSZWFkYWJsZS5mcm9tIGlzIGlkZWFsIGJ1dCB3YXMgYWRkZWQgaW4gbm9kZS5qcyB2MTIuMy4wIGFuZCB2MTAuMTcuMFxuICovXG5mdW5jdGlvbiBzdHJlYW1Gcm9tQm9keShib2R5KSB7XG4gIHJldHVybiBuZXcgbm9kZV9zdHJlYW0uUmVhZGFibGUoe1xuICAgIHJlYWQoKSB7XG4gICAgICB0aGlzLnB1c2goYm9keSk7XG4gICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgfSxcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFRyYW5zcG9ydCB0aGF0IHVzZXMgbmF0aXZlIHRoZSBuYXRpdmUgJ2h0dHAnIGFuZCAnaHR0cHMnIG1vZHVsZXMgdG8gc2VuZCBldmVudHMgdG8gU2VudHJ5LlxuICovXG5mdW5jdGlvbiBtYWtlTm9kZVRyYW5zcG9ydChvcHRpb25zKSB7XG4gIGxldCB1cmxTZWdtZW50cztcblxuICB0cnkge1xuICAgIHVybFNlZ21lbnRzID0gbmV3IFVSTChvcHRpb25zLnVybCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdbQHNlbnRyeS9ub2RlXTogSW52YWxpZCBkc24gb3IgdHVubmVsIG9wdGlvbiwgd2lsbCBub3Qgc2VuZCBhbnkgZXZlbnRzLiBUaGUgdHVubmVsIG9wdGlvbiBtdXN0IGJlIGEgZnVsbCBVUkwgd2hlbiB1c2VkLicsXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBjb3JlLmNyZWF0ZVRyYW5zcG9ydChvcHRpb25zLCAoKSA9PiBQcm9taXNlLnJlc29sdmUoe30pKTtcbiAgfVxuXG4gIGNvbnN0IGlzSHR0cHMgPSB1cmxTZWdtZW50cy5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG5cbiAgLy8gUHJveHkgcHJpb3JpdGl6YXRpb246IGh0dHAgPT4gYG9wdGlvbnMucHJveHlgIHwgYHByb2Nlc3MuZW52Lmh0dHBfcHJveHlgXG4gIC8vIFByb3h5IHByaW9yaXRpemF0aW9uOiBodHRwcyA9PiBgb3B0aW9ucy5wcm94eWAgfCBgcHJvY2Vzcy5lbnYuaHR0cHNfcHJveHlgIHwgYHByb2Nlc3MuZW52Lmh0dHBfcHJveHlgXG4gIGNvbnN0IHByb3h5ID0gYXBwbHlOb1Byb3h5T3B0aW9uKFxuICAgIHVybFNlZ21lbnRzLFxuICAgIG9wdGlvbnMucHJveHkgfHwgKGlzSHR0cHMgPyBwcm9jZXNzLmVudi5odHRwc19wcm94eSA6IHVuZGVmaW5lZCkgfHwgcHJvY2Vzcy5lbnYuaHR0cF9wcm94eSxcbiAgKTtcblxuICBjb25zdCBuYXRpdmVIdHRwTW9kdWxlID0gaXNIdHRwcyA/IGh0dHBzIDogaHR0cDtcbiAgY29uc3Qga2VlcEFsaXZlID0gb3B0aW9ucy5rZWVwQWxpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogb3B0aW9ucy5rZWVwQWxpdmU7XG5cbiAgLy8gVE9ETyh2OSk6IEV2YWx1YXRlIGlmIHdlIGNhbiBzZXQga2VlcEFsaXZlIHRvIHRydWUuIFRoaXMgd291bGQgaW52b2x2ZSB0ZXN0aW5nIGZvciBtZW1vcnkgbGVha3MgaW4gb2xkZXIgbm9kZVxuICAvLyB2ZXJzaW9ucyg+PSA4KSBhcyB0aGV5IGhhZCBtZW1vcnkgbGVha3Mgd2hlbiB1c2luZyBpdDogIzI1NTVcbiAgY29uc3QgYWdlbnQgPSBwcm94eVxuICAgID8gKG5ldyBpbmRleC5IdHRwc1Byb3h5QWdlbnQocHJveHkpIClcbiAgICA6IG5ldyBuYXRpdmVIdHRwTW9kdWxlLkFnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzOiAzMCwgdGltZW91dDogMjAwMCB9KTtcblxuICBjb25zdCByZXF1ZXN0RXhlY3V0b3IgPSBjcmVhdGVSZXF1ZXN0RXhlY3V0b3Iob3B0aW9ucywgX251bGxpc2hDb2FsZXNjZShvcHRpb25zLmh0dHBNb2R1bGUsICgpID0+ICggbmF0aXZlSHR0cE1vZHVsZSkpLCBhZ2VudCk7XG4gIHJldHVybiBjb3JlLmNyZWF0ZVRyYW5zcG9ydChvcHRpb25zLCByZXF1ZXN0RXhlY3V0b3IpO1xufVxuXG4vKipcbiAqIEhvbm9ycyB0aGUgYG5vX3Byb3h5YCBlbnYgdmFyaWFibGUgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSB0byBhbGxvdyBmb3IgaG9zdHMgZXhjbHVzaW9uLlxuICpcbiAqIEBwYXJhbSB0cmFuc3BvcnRVcmwgVGhlIFVSTCB0aGUgdHJhbnNwb3J0IGludGVuZHMgdG8gc2VuZCBldmVudHMgdG8uXG4gKiBAcGFyYW0gcHJveHkgVGhlIGNsaWVudCBjb25maWd1cmVkIHByb3h5LlxuICogQHJldHVybnMgQSBwcm94eSB0aGUgdHJhbnNwb3J0IHNob3VsZCB1c2UuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Tm9Qcm94eU9wdGlvbih0cmFuc3BvcnRVcmxTZWdtZW50cywgcHJveHkpIHtcbiAgY29uc3QgeyBub19wcm94eSB9ID0gcHJvY2Vzcy5lbnY7XG5cbiAgY29uc3QgdXJsSXNFeGVtcHRGcm9tUHJveHkgPVxuICAgIG5vX3Byb3h5ICYmXG4gICAgbm9fcHJveHlcbiAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAuc29tZShcbiAgICAgICAgZXhlbXB0aW9uID0+IHRyYW5zcG9ydFVybFNlZ21lbnRzLmhvc3QuZW5kc1dpdGgoZXhlbXB0aW9uKSB8fCB0cmFuc3BvcnRVcmxTZWdtZW50cy5ob3N0bmFtZS5lbmRzV2l0aChleGVtcHRpb24pLFxuICAgICAgKTtcblxuICBpZiAodXJsSXNFeGVtcHRGcm9tUHJveHkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm94eTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZXF1ZXN0RXhlY3V0b3IgdG8gYmUgdXNlZCB3aXRoIGBjcmVhdGVUcmFuc3BvcnRgLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0RXhlY3V0b3IoXG4gIG9wdGlvbnMsXG4gIGh0dHBNb2R1bGUsXG4gIGFnZW50LFxuKSB7XG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBwb3J0LCBwcm90b2NvbCwgc2VhcmNoIH0gPSBuZXcgVVJMKG9wdGlvbnMudXJsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gVGhpcyBlbnN1cmVzIHdlIGRvIG5vdCBnZW5lcmF0ZSBhbnkgc3BhbnMgaW4gT3BlblRlbGVtZXRyeSBmb3IgdGhlIHRyYW5zcG9ydFxuICAgICAgY29yZS5zdXBwcmVzc1RyYWNpbmcoKCkgPT4ge1xuICAgICAgICBsZXQgYm9keSA9IHN0cmVhbUZyb21Cb2R5KHJlcXVlc3QuYm9keSk7XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHsgLi4ub3B0aW9ucy5oZWFkZXJzIH07XG5cbiAgICAgICAgaWYgKHJlcXVlc3QuYm9keS5sZW5ndGggPiBHWklQX1RIUkVTSE9MRCkge1xuICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSA9ICdnemlwJztcbiAgICAgICAgICBib2R5ID0gYm9keS5waXBlKG5vZGVfemxpYi5jcmVhdGVHemlwKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vZHVsZS5yZXF1ZXN0KFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgICBwYXRoOiBgJHtwYXRobmFtZX0ke3NlYXJjaH1gLFxuICAgICAgICAgICAgcG9ydCxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgY2E6IG9wdGlvbnMuY2FDZXJ0cyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlcyA9PiB7XG4gICAgICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcblxuICAgICAgICAgICAgLy8gXCJLZXktdmFsdWUgcGFpcnMgb2YgaGVhZGVyIG5hbWVzIGFuZCB2YWx1ZXMuIEhlYWRlciBuYW1lcyBhcmUgbG93ZXItY2FzZWQuXCJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG4gICAgICAgICAgICBjb25zdCByZXRyeUFmdGVySGVhZGVyID0gX251bGxpc2hDb2FsZXNjZShyZXMuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSwgKCkgPT4gKCBudWxsKSk7XG4gICAgICAgICAgICBjb25zdCByYXRlTGltaXRzSGVhZGVyID0gX251bGxpc2hDb2FsZXNjZShyZXMuaGVhZGVyc1sneC1zZW50cnktcmF0ZS1saW1pdHMnXSwgKCkgPT4gKCBudWxsKSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdyZXRyeS1hZnRlcic6IHJldHJ5QWZ0ZXJIZWFkZXIsXG4gICAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogQXJyYXkuaXNBcnJheShyYXRlTGltaXRzSGVhZGVyKVxuICAgICAgICAgICAgICAgICAgPyByYXRlTGltaXRzSGVhZGVyWzBdIHx8IG51bGxcbiAgICAgICAgICAgICAgICAgIDogcmF0ZUxpbWl0c0hlYWRlcixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgIGJvZHkucGlwZShyZXEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHMubWFrZU5vZGVUcmFuc3BvcnQgPSBtYWtlTm9kZVRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzPzE0OWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogQWRkcyBhbiBvcmlnaW4gdG8gYW4gT1RFTCBTcGFuLiAqL1xuZnVuY3Rpb24gYWRkT3JpZ2luVG9TcGFuKHNwYW4sIG9yaWdpbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBvcmlnaW4pO1xufVxuXG5leHBvcnRzLmFkZE9yaWdpblRvU3BhbiA9IGFkZE9yaWdpblRvU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZE9yaWdpblRvU3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0EsU0FBUyxVQUFjO0FBQ3ZCOztBQUVBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcz8yNmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBEZXRlY3QgQ29tbW9uSlMuICovXG5mdW5jdGlvbiBpc0NqcygpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0cy5pc0NqcyA9IGlzQ2pzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uanMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxpQkFBaUIsbUJBQU8sQ0FBQywrSEFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanM/YWFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcblxuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSAocGtnKSA9PiAoe1xuICBwYWNrYWdlOiBwa2csXG4gICdqYXZhc2NyaXB0LmlzX2Nqcyc6IGNvbW1vbmpzLmlzQ2pzKCksXG59KTtcblxuZXhwb3J0cy5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const client = core.getClient();\n  if (\n    !_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasTracingEnabled()\n  ) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxlQUFlLG1CQUFPLENBQUMsbUtBQXFCO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywrSEFBZTtBQUN4Qyw0Q0FBNEMsbUJBQU8sQ0FBQyxxTEFBMEM7O0FBRTlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixNQUFNLG9FQUFvRSxNQUFNO0FBQ3RHO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxpTEFBaUwsS0FBSztBQUNsTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcz84MGJlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvcmUnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi9jb21tb25qcy5qcycpO1xuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzJyk7XG5cbi8qKlxuICogQ2hlY2tzIGFuZCB3YXJucyBpZiBhIGZyYW1ld29yayBpc24ndCB3cmFwcGVkIGJ5IG9wZW50ZWxlbWV0cnkuXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUlzV3JhcHBlZChcbiAgbWF5YmVXcmFwcGVkRnVuY3Rpb24sXG4gIG5hbWUsXG4pIHtcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKFxuICAgICFfb3B0aW9uYWxDaGFpbihbY2xpZW50LCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMiA9PiBfMigpLCAnYWNjZXNzJywgXzMgPT4gXzMuZGlzYWJsZUluc3RydW1lbnRhdGlvbldhcm5pbmdzXSkgJiZcbiAgICAhY29yZSQxLmlzV3JhcHBlZChtYXliZVdyYXBwZWRGdW5jdGlvbikgJiZcbiAgICBjb3JlLmlzRW5hYmxlZCgpICYmXG4gICAgY29yZS5oYXNUcmFjaW5nRW5hYmxlZCgpXG4gICkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFRoaXMgaXMgbGlrZWx5IGJlY2F1c2UgeW91IHJlcXVpcmVkL2ltcG9ydGVkICR7bmFtZX0gYmVmb3JlIGNhbGxpbmcgXFxgU2VudHJ5LmluaXQoKVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBTZW50cnkgaW4gYSBzZXBhcmF0ZSBmaWxlIHRoYXQgeW91IFxcYC0taW1wb3J0XFxgIHdoZW4gcnVubmluZyBub2RlLCBzZWU6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzLyR7bmFtZX0vaW5zdGFsbC9lc20vLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3JlLmdldEdsb2JhbFNjb3BlKCkuc2V0Q29udGV4dCgnbWlzc2luZ19pbnN0cnVtZW50YXRpb24nLCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dChuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmVJc1dyYXBwZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options && options.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanM/Njc2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBGQUxTWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ2ZhbHNlJywgJ2YnLCAnbicsICdubycsICdvZmYnLCAnMCddKTtcbmNvbnN0IFRSVVRIWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ3RydWUnLCAndCcsICd5JywgJ3llcycsICdvbicsICcxJ10pO1xuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHdoaWNoIGNhc3RzIGFuIEVOViB2YXJpYWJsZSB2YWx1ZSB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB1c2luZyB0aGUgY29uc3RhbnRzIGRlZmluZWQgYWJvdmUuXG4gKiBJbiBzdHJpY3QgbW9kZSwgaXQgbWF5IHJldHVybiBgbnVsbGAgaWYgdGhlIHZhbHVlIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBwcmVkZWZpbmVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBlbnYgdmFyaWFibGVcbiAqIEBwYXJhbSBvcHRpb25zIC0tIE9ubHkgaGFzIGBzdHJpY3RgIGtleSBmb3Igbm93LCB3aGljaCByZXF1aXJlcyBhIHN0cmljdCBtYXRjaCBmb3IgYHRydWVgIGluIFRSVVRIWV9FTlZfVkFMVUVTXG4gKiBAcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHRoZSBsb3dlcmNhc2UgdmFsdWUgbWF0Y2hlcyB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMgYWJvdmUuIElmIG5vdCwgbnVsbCBpbiBzdHJpY3QgbW9kZSxcbiAqICAgICAgICAgIGFuZCBCb29sZWFuKHZhbHVlKSBpbiBsb29zZSBtb2RlLlxuICovXG5mdW5jdGlvbiBlbnZUb0Jvb2wodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoRkFMU1lfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoVFJVVEhZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA/IG51bGwgOiBCb29sZWFuKHZhbHVlKTtcbn1cblxuZXhwb3J0cy5GQUxTWV9FTlZfVkFMVUVTID0gRkFMU1lfRU5WX1ZBTFVFUztcbmV4cG9ydHMuVFJVVEhZX0VOVl9WQUxVRVMgPSBUUlVUSFlfRU5WX1ZBTFVFUztcbmV4cG9ydHMuZW52VG9Cb29sID0gZW52VG9Cb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52VG9Cb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxnSUFBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcz8xM2JkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ05vIE5vZGVDbGllbnQgd2FzIGRlZmluZWQsIHdlIGFyZSBleGl0aW5nIHRoZSBwcm9jZXNzIG5vdy4nKTtcbiAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB0aW1lb3V0ID1cbiAgICAob3B0aW9ucyAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQpIHx8XG4gICAgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUO1xuICBjbGllbnQuY2xvc2UodGltZW91dCkudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5sb2dBbmRFeGl0UHJvY2VzcyA9IGxvZ0FuZEV4aXRQcm9jZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JoYW5kbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzPzE0NjgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIEJ1aWxkIGEgZnVsbCBVUkwgZnJvbSByZXF1ZXN0IG9wdGlvbnMuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0VXJsKHJlcXVlc3RPcHRpb25zKSB7XG4gIGNvbnN0IHByb3RvY29sID0gcmVxdWVzdE9wdGlvbnMucHJvdG9jb2wgfHwgJyc7XG4gIGNvbnN0IGhvc3RuYW1lID0gcmVxdWVzdE9wdGlvbnMuaG9zdG5hbWUgfHwgcmVxdWVzdE9wdGlvbnMuaG9zdCB8fCAnJztcbiAgLy8gRG9uJ3QgbG9nIHN0YW5kYXJkIDo4MCAoaHR0cCkgYW5kIDo0NDMgKGh0dHBzKSBwb3J0cyB0byByZWR1Y2UgdGhlIG5vaXNlXG4gIC8vIEFsc28gZG9uJ3QgYWRkIHBvcnQgaWYgdGhlIGhvc3RuYW1lIGFscmVhZHkgaW5jbHVkZXMgYSBwb3J0XG4gIGNvbnN0IHBvcnQgPVxuICAgICFyZXF1ZXN0T3B0aW9ucy5wb3J0IHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDgwIHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDQ0MyB8fCAvXiguKik6KFxcZCspJC8udGVzdChob3N0bmFtZSlcbiAgICAgID8gJydcbiAgICAgIDogYDoke3JlcXVlc3RPcHRpb25zLnBvcnR9YDtcbiAgY29uc3QgcGF0aCA9IHJlcXVlc3RPcHRpb25zLnBhdGggPyByZXF1ZXN0T3B0aW9ucy5wYXRoIDogJy8nO1xuICByZXR1cm4gYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfSR7cG9ydH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5nZXRSZXF1ZXN0VXJsID0gZ2V0UmVxdWVzdFVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDLEdBQUcsS0FBSztBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzPzFkMjAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBub3JtYWxpemVzIFdpbmRvd3MgcGF0aHMgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdpbmRvd3NQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpOyAvLyByZXBsYWNlIGFsbCBgXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxufVxuXG4vKiogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgbW9kdWxlIG5hbWUgZnJvbSBhIGZpbGVuYW1lICovXG5mdW5jdGlvbiBjcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWUoXG4gIGJhc2VQYXRoID0gcHJvY2Vzcy5hcmd2WzFdID8gY29yZS5kaXJuYW1lKHByb2Nlc3MuYXJndlsxXSkgOiBwcm9jZXNzLmN3ZCgpLFxuICBpc1dpbmRvd3MgPSBub2RlX3BhdGguc2VwID09PSAnXFxcXCcsXG4pIHtcbiAgY29uc3Qgbm9ybWFsaXplZEJhc2UgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChiYXNlUGF0aCkgOiBiYXNlUGF0aDtcblxuICByZXR1cm4gKGZpbGVuYW1lKSA9PiB7XG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlbmFtZSA9IGlzV2luZG93cyA/IG5vcm1hbGl6ZVdpbmRvd3NQYXRoKGZpbGVuYW1lKSA6IGZpbGVuYW1lO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGxldCB7IGRpciwgYmFzZTogZmlsZSwgZXh0IH0gPSBub2RlX3BhdGgucG9zaXgucGFyc2Uobm9ybWFsaXplZEZpbGVuYW1lKTtcblxuICAgIGlmIChleHQgPT09ICcuanMnIHx8IGV4dCA9PT0gJy5tanMnIHx8IGV4dCA9PT0gJy5janMnKSB7XG4gICAgICBmaWxlID0gZmlsZS5zbGljZSgwLCBleHQubGVuZ3RoICogLTEpO1xuICAgIH1cblxuICAgIGlmICghZGlyKSB7XG4gICAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICAgIGRpciA9ICcuJztcbiAgICB9XG5cbiAgICBjb25zdCBuID0gZGlyLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzJyk7XG4gICAgaWYgKG4gPiAtMSkge1xuICAgICAgcmV0dXJuIGAke2Rpci5zbGljZShuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpfToke2ZpbGV9YDtcbiAgICB9XG5cbiAgICAvLyBMZXQncyBzZWUgaWYgaXQncyBhIHBhcnQgb2YgdGhlIG1haW4gbW9kdWxlXG4gICAgLy8gVG8gYmUgYSBwYXJ0IG9mIG1haW4gbW9kdWxlLCBpdCBoYXMgdG8gc2hhcmUgdGhlIHNhbWUgYmFzZVxuICAgIGlmIChkaXIuc3RhcnRzV2l0aChub3JtYWxpemVkQmFzZSkpIHtcbiAgICAgIGxldCBtb2R1bGVOYW1lID0gZGlyLnNsaWNlKG5vcm1hbGl6ZWRCYXNlLmxlbmd0aCArIDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuXG4gICAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgICBtb2R1bGVOYW1lICs9ICc6JztcbiAgICAgIH1cbiAgICAgIG1vZHVsZU5hbWUgKz0gZmlsZTtcblxuICAgICAgcmV0dXJuIG1vZHVsZU5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGU7XG4gIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return core.flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return core.flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcz8zNGUzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgU0lOR0xFX0FSR19DT01NQU5EUyA9IFsnZ2V0JywgJ3NldCcsICdzZXRleCddO1xuXG5jb25zdCBHRVRfQ09NTUFORFMgPSBbJ2dldCcsICdtZ2V0J107XG5jb25zdCBTRVRfQ09NTUFORFMgPSBbJ3NldCcsICdzZXRleCddO1xuLy8gdG9kbzogZGVsLCBleHBpcmVcblxuLyoqIENoZWNrcyBpZiBhIGdpdmVuIGNvbW1hbmQgaXMgaW4gdGhlIGxpc3Qgb2YgcmVkaXMgY29tbWFuZHMuXG4gKiAgVXNlZnVsIGJlY2F1c2UgY29tbWFuZHMgY2FuIGNvbWUgaW4gbG93ZXJjYXNlIG9yIHVwcGVyY2FzZSAoZGVwZW5kaW5nIG9uIHRoZSBsaWJyYXJ5KS4gKi9cbmZ1bmN0aW9uIGlzSW5Db21tYW5kcyhyZWRpc0NvbW1hbmRzLCBjb21tYW5kKSB7XG4gIHJldHVybiByZWRpc0NvbW1hbmRzLmluY2x1ZGVzKGNvbW1hbmQudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKiBEZXRlcm1pbmUgY2FjaGUgb3BlcmF0aW9uIGJhc2VkIG9uIHJlZGlzIHN0YXRlbWVudCAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVPcGVyYXRpb24oXG4gIGNvbW1hbmQsXG4pIHtcbiAgaWYgKGlzSW5Db21tYW5kcyhHRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5nZXQnO1xuICB9IGVsc2UgaWYgKGlzSW5Db21tYW5kcyhTRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5wdXQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpIHtcbiAgcmV0dXJuIHByZWZpeGVzLnNvbWUocHJlZml4ID0+IGtleS5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuXG4vKiogU2FmZWx5IGNvbnZlcnRzIGEgcmVkaXMga2V5IHRvIGEgc3RyaW5nIChjb21tYS1zZXBhcmF0ZWQgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGtleXMpICovXG5mdW5jdGlvbiBnZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpIHtcbiAgdHJ5IHtcbiAgICBpZiAoY21kQXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwcm9jZXNzQXJnID0gKGFyZykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IEJ1ZmZlci5pc0J1ZmZlcihhcmcpKSB7XG4gICAgICAgIHJldHVybiBbYXJnLnRvU3RyaW5nKCldO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUuZmxhdHRlbihhcmcubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJzx1bmtub3duPiddO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEFyZyA9IGNtZEFyZ3NbMF07XG4gICAgaWYgKGlzSW5Db21tYW5kcyhTSU5HTEVfQVJHX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGZpcnN0QXJnICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQXJnKGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29yZS5mbGF0dGVuKGNtZEFyZ3MubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqIERldGVybWluZXMgd2hldGhlciBhIHJlZGlzIG9wZXJhdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBcImNhY2hlIG9wZXJhdGlvblwiIGJ5IGNoZWNraW5nIGlmIGEga2V5IGlzIHByZWZpeGVkLlxuICogIFdlIG9ubHkgc3VwcG9ydCBjZXJ0YWluIGNvbW1hbmRzIChzdWNoIGFzICdzZXQnLCAnZ2V0JywgJ21nZXQnKS4gKi9cbmZ1bmN0aW9uIHNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBrZXlzLCBwcmVmaXhlcykge1xuICBpZiAoIWdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqIENhbGN1bGF0ZXMgc2l6ZSBiYXNlZCBvbiB0aGUgY2FjaGUgcmVzcG9uc2UgdmFsdWUgKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpIHtcbiAgY29uc3QgZ2V0U2l6ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpLmxlbmd0aDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXNwb25zZSlcbiAgICA/IHJlc3BvbnNlLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBnZXRTaXplKGN1cnIpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gKGFjYyAhPT0gdW5kZWZpbmVkID8gYWNjICsgc2l6ZSA6IHNpemUpIDogYWNjO1xuICAgICAgfSwgMClcbiAgICA6IGdldFNpemUocmVzcG9uc2UpO1xufVxuXG5leHBvcnRzLkdFVF9DT01NQU5EUyA9IEdFVF9DT01NQU5EUztcbmV4cG9ydHMuU0VUX0NPTU1BTkRTID0gU0VUX0NPTU1BTkRTO1xuZXhwb3J0cy5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplID0gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZTtcbmV4cG9ydHMuZ2V0Q2FjaGVLZXlTYWZlbHkgPSBnZXRDYWNoZUtleVNhZmVseTtcbmV4cG9ydHMuZ2V0Q2FjaGVPcGVyYXRpb24gPSBnZXRDYWNoZU9wZXJhdGlvbjtcbmV4cG9ydHMuaXNJbkNvbW1hbmRzID0gaXNJbkNvbW1hbmRzO1xuZXhwb3J0cy5zaG91bGRDb25zaWRlckZvckNhY2hlID0gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzQ2FjaGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=2.0.0'];\n\n/**\n * Custom instrumentation for nestjs event-emitter\n *\n * This hooks into the `OnEvent` decorator, which is applied on event handlers.\n */\nclass SentryNestEventInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/event-emitter';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestEventInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs-event', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(\n      SentryNestEventInstrumentation.COMPONENT,\n      supportedVersions,\n    );\n\n    moduleDef.files.push(this._getOnEventFileInstrumentation(supportedVersions));\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @OnEvent decorator.\n   */\n   _getOnEventFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/event-emitter/dist/decorators/on-event.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.OnEvent)) {\n          this._unwrap(moduleExports, 'OnEvent');\n        }\n        this._wrap(moduleExports, 'OnEvent', this._createWrapOnEvent());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'OnEvent');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @OnEvent decorator.\n   */\n   _createWrapOnEvent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapOnEvent(original) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return function wrappedOnEvent(event, options) {\n        const eventName = Array.isArray(event)\n          ? event.join(',')\n          : typeof event === 'string' || typeof event === 'symbol'\n            ? event.toString()\n            : '<unknown_event>';\n\n        // Get the original decorator result\n        const decoratorResult = original(event, options);\n\n        // Return a new decorator function that wraps the handler\n        return function (target, propertyKey, descriptor) {\n          if (!descriptor.value || typeof descriptor.value !== 'function' || target.__SENTRY_INTERNAL__) {\n            return decoratorResult(target, propertyKey, descriptor);\n          }\n\n          // Get the original handler\n          const originalHandler = descriptor.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const handlerName = originalHandler.name || propertyKey;\n\n          // Instrument the handler\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          descriptor.value = async function (...args) {\n            return core.startSpan(helpers.getEventSpanOptions(eventName), async () => {\n              try {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const result = await originalHandler.apply(this, args);\n                return result;\n              } catch (error) {\n                // exceptions from event handlers are not caught by global error filter\n                core.captureException(error);\n                throw error;\n              }\n            });\n          };\n\n          // Preserve the original function name\n          Object.defineProperty(descriptor.value, 'name', {\n            value: handlerName,\n            configurable: true,\n          });\n\n          // Apply the original decorator\n          return decoratorResult(target, propertyKey, descriptor);\n        };\n      };\n    };\n  }\n} SentryNestEventInstrumentation.__initStatic(); SentryNestEventInstrumentation.__initStatic2();\n\nexports.SentryNestEventInstrumentation = SentryNestEventInstrumentation;\n//# sourceMappingURL=sentry-nest-event-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3Qvc2VudHJ5LW5lc3QtZXZlbnQtaW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLENBQUMsd0RBQXdELHlDQUF5QywwQ0FBMEMsb0RBQW9ELDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN1AsZUFBZSxtQkFBTyxDQUFDLDBLQUFxQjtBQUM1Qyx3QkFBd0IsbUJBQU8sQ0FBQywyTUFBZ0M7QUFDaEUsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLHdKQUFjOztBQUV0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLCtDQUErQzs7QUFFakQsc0NBQXNDO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3Qvc2VudHJ5LW5lc3QtZXZlbnQtaW5zdHJ1bWVudGF0aW9uLmpzPzJkOWMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gXCIvbW9uaXRvcmluZ1wiO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmpzJyk7XG5cbmNvbnN0IHN1cHBvcnRlZFZlcnNpb25zID0gWyc+PTIuMC4wJ107XG5cbi8qKlxuICogQ3VzdG9tIGluc3RydW1lbnRhdGlvbiBmb3IgbmVzdGpzIGV2ZW50LWVtaXR0ZXJcbiAqXG4gKiBUaGlzIGhvb2tzIGludG8gdGhlIGBPbkV2ZW50YCBkZWNvcmF0b3IsIHdoaWNoIGlzIGFwcGxpZWQgb24gZXZlbnQgaGFuZGxlcnMuXG4gKi9cbmNsYXNzIFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIHN0YXRpYyAgX19pbml0U3RhdGljKCkge3RoaXMuQ09NUE9ORU5UID0gJ0BuZXN0anMvZXZlbnQtZW1pdHRlcic7fVxuICAgc3RhdGljICBfX2luaXRTdGF0aWMyKCkge3RoaXMuQ09NTU9OX0FUVFJJQlVURVMgPSB7XG4gICAgY29tcG9uZW50OiBTZW50cnlOZXN0RXZlbnRJbnN0cnVtZW50YXRpb24uQ09NUE9ORU5ULFxuICB9O31cblxuICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcignc2VudHJ5LW5lc3Rqcy1ldmVudCcsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGluc3RydW1lbnRhdGlvbiBieSBkZWZpbmluZyB0aGUgbW9kdWxlcyB0byBiZSBwYXRjaGVkLlxuICAgKi9cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlRGVmID0gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbihcbiAgICAgIFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbi5DT01QT05FTlQsXG4gICAgICBzdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICApO1xuXG4gICAgbW9kdWxlRGVmLmZpbGVzLnB1c2godGhpcy5fZ2V0T25FdmVudEZpbGVJbnN0cnVtZW50YXRpb24oc3VwcG9ydGVkVmVyc2lvbnMpKTtcbiAgICByZXR1cm4gbW9kdWxlRGVmO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBzIHRoZSBAT25FdmVudCBkZWNvcmF0b3IuXG4gICAqL1xuICAgX2dldE9uRXZlbnRGaWxlSW5zdHJ1bWVudGF0aW9uKHZlcnNpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUoXG4gICAgICAnQG5lc3Rqcy9ldmVudC1lbWl0dGVyL2Rpc3QvZGVjb3JhdG9ycy9vbi1ldmVudC5kZWNvcmF0b3IuanMnLFxuICAgICAgdmVyc2lvbnMsXG4gICAgICAobW9kdWxlRXhwb3J0cykgPT4ge1xuICAgICAgICBpZiAoY29yZSQxLmlzV3JhcHBlZChtb2R1bGVFeHBvcnRzLk9uRXZlbnQpKSB7XG4gICAgICAgICAgdGhpcy5fdW53cmFwKG1vZHVsZUV4cG9ydHMsICdPbkV2ZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd3JhcChtb2R1bGVFeHBvcnRzLCAnT25FdmVudCcsIHRoaXMuX2NyZWF0ZVdyYXBPbkV2ZW50KCkpO1xuICAgICAgICByZXR1cm4gbW9kdWxlRXhwb3J0cztcbiAgICAgIH0sXG4gICAgICAobW9kdWxlRXhwb3J0cykgPT4ge1xuICAgICAgICB0aGlzLl91bndyYXAobW9kdWxlRXhwb3J0cywgJ09uRXZlbnQnKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiBmb3IgdGhlIEBPbkV2ZW50IGRlY29yYXRvci5cbiAgICovXG4gICBfY3JlYXRlV3JhcE9uRXZlbnQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gZnVuY3Rpb24gd3JhcE9uRXZlbnQob3JpZ2luYWwpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICByZXR1cm4gZnVuY3Rpb24gd3JhcHBlZE9uRXZlbnQoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZXZlbnROYW1lID0gQXJyYXkuaXNBcnJheShldmVudClcbiAgICAgICAgICA/IGV2ZW50LmpvaW4oJywnKVxuICAgICAgICAgIDogdHlwZW9mIGV2ZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZXZlbnQgPT09ICdzeW1ib2wnXG4gICAgICAgICAgICA/IGV2ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIDogJzx1bmtub3duX2V2ZW50Pic7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBvcmlnaW5hbCBkZWNvcmF0b3IgcmVzdWx0XG4gICAgICAgIGNvbnN0IGRlY29yYXRvclJlc3VsdCA9IG9yaWdpbmFsKGV2ZW50LCBvcHRpb25zKTtcblxuICAgICAgICAvLyBSZXR1cm4gYSBuZXcgZGVjb3JhdG9yIGZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGhhbmRsZXJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgaWYgKCFkZXNjcmlwdG9yLnZhbHVlIHx8IHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlICE9PSAnZnVuY3Rpb24nIHx8IHRhcmdldC5fX1NFTlRSWV9JTlRFUk5BTF9fKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yUmVzdWx0KHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEdldCB0aGUgb3JpZ2luYWwgaGFuZGxlclxuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsSGFuZGxlciA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgIGNvbnN0IGhhbmRsZXJOYW1lID0gb3JpZ2luYWxIYW5kbGVyLm5hbWUgfHwgcHJvcGVydHlLZXk7XG5cbiAgICAgICAgICAvLyBJbnN0cnVtZW50IHRoZSBoYW5kbGVyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3JlLnN0YXJ0U3BhbihoZWxwZXJzLmdldEV2ZW50U3Bhbk9wdGlvbnMoZXZlbnROYW1lKSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcmlnaW5hbEhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb25zIGZyb20gZXZlbnQgaGFuZGxlcnMgYXJlIG5vdCBjYXVnaHQgYnkgZ2xvYmFsIGVycm9yIGZpbHRlclxuICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBQcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gbmFtZVxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXNjcmlwdG9yLnZhbHVlLCAnbmFtZScsIHtcbiAgICAgICAgICAgIHZhbHVlOiBoYW5kbGVyTmFtZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEFwcGx5IHRoZSBvcmlnaW5hbCBkZWNvcmF0b3JcbiAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yUmVzdWx0KHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59IFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbi5fX2luaXRTdGF0aWMoKTsgU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uLl9faW5pdFN0YXRpYzIoKTtcblxuZXhwb3J0cy5TZW50cnlOZXN0RXZlbnRJbnN0cnVtZW50YXRpb24gPSBTZW50cnlOZXN0RXZlbnRJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW50cnktbmVzdC1ldmVudC1pbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/common';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n\n    moduleDef.files.push(\n      this._getInjectableFileInstrumentation(supportedVersions),\n      this._getCatchFileInstrumentation(supportedVersions),\n    );\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n   _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/injectable.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Injectable)) {\n          this._unwrap(moduleExports, 'Injectable');\n        }\n        this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Injectable');\n      },\n    );\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n   _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/catch.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Catch)) {\n          this._unwrap(moduleExports, 'Catch');\n        }\n        this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Catch');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n   _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n\n                const prevSpan = core.getActiveSpan();\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (span) => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              },\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              },\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              },\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n\n                const parentSpan = core.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (beforeSpan) => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n\n                      if (parentSpan) {\n                        return core.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                          if (!context._sentryInterceptorInstrumented) {\n                            core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core.startInactiveSpan(\n                              helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'),\n                            );\n                          }\n\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                        if (!context._sentryInterceptorInstrumented) {\n                          core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n\n                        return handleReturnObservable;\n                      }\n                    },\n                  });\n\n                  let returnedObservableInterceptMaybePromise;\n\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (core.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(\n                      observable => {\n                        helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                        return observable;\n                      },\n                      e => {\n                        _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                        _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                        throw e;\n                      },\n                    );\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                  }\n\n                  return returnedObservableInterceptMaybePromise;\n                });\n              },\n            });\n          }\n\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n   _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              },\n            });\n          }\n\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}SentryNestInstrumentation.__initStatic();SentryNestInstrumentation.__initStatic2();\n\nexports.SentryNestInstrumentation = SentryNestInstrumentation;\n//# sourceMappingURL=sentry-nest-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY29tbW9uLmpzPzA3ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgcmVwbGFjZW1lbnRzID0gW1xuICBbJ2phbnVhcnknLCAnMSddLFxuICBbJ2ZlYnJ1YXJ5JywgJzInXSxcbiAgWydtYXJjaCcsICczJ10sXG4gIFsnYXByaWwnLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuZScsICc2J10sXG4gIFsnanVseScsICc3J10sXG4gIFsnYXVndXN0JywgJzgnXSxcbiAgWydzZXB0ZW1iZXInLCAnOSddLFxuICBbJ29jdG9iZXInLCAnMTAnXSxcbiAgWydub3ZlbWJlcicsICcxMSddLFxuICBbJ2RlY2VtYmVyJywgJzEyJ10sXG4gIFsnamFuJywgJzEnXSxcbiAgWydmZWInLCAnMiddLFxuICBbJ21hcicsICczJ10sXG4gIFsnYXByJywgJzQnXSxcbiAgWydtYXknLCAnNSddLFxuICBbJ2p1bicsICc2J10sXG4gIFsnanVsJywgJzcnXSxcbiAgWydhdWcnLCAnOCddLFxuICBbJ3NlcCcsICc5J10sXG4gIFsnb2N0JywgJzEwJ10sXG4gIFsnbm92JywgJzExJ10sXG4gIFsnZGVjJywgJzEyJ10sXG4gIFsnc3VuZGF5JywgJzAnXSxcbiAgWydtb25kYXknLCAnMSddLFxuICBbJ3R1ZXNkYXknLCAnMiddLFxuICBbJ3dlZG5lc2RheScsICczJ10sXG4gIFsndGh1cnNkYXknLCAnNCddLFxuICBbJ2ZyaWRheScsICc1J10sXG4gIFsnc2F0dXJkYXknLCAnNiddLFxuICBbJ3N1bicsICcwJ10sXG4gIFsnbW9uJywgJzEnXSxcbiAgWyd0dWUnLCAnMiddLFxuICBbJ3dlZCcsICczJ10sXG4gIFsndGh1JywgJzQnXSxcbiAgWydmcmknLCAnNSddLFxuICBbJ3NhdCcsICc2J10sXG5dO1xuXG4vKipcbiAqIFJlcGxhY2VzIG5hbWVzIGluIGNyb24gZXhwcmVzc2lvbnNcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUNyb25OYW1lcyhjcm9uRXhwcmVzc2lvbikge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzLnJlZHVjZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yXG4gICAgKGFjYywgW25hbWUsIHJlcGxhY2VtZW50XSkgPT4gYWNjLnJlcGxhY2UobmV3IFJlZ0V4cChuYW1lLCAnZ2knKSwgcmVwbGFjZW1lbnQpLFxuICAgIGNyb25FeHByZXNzaW9uLFxuICApO1xufVxuXG5leHBvcnRzLnJlcGxhY2VDcm9uTmFtZXMgPSByZXBsYWNlQ3Jvbk5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY3Jvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsaUlBQWE7O0FBRXBDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSx3QkFBd0Isb0NBQW9DO0FBQzVEO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDZCQUE2Qjs7QUFFL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDLFlBQVk7QUFDeEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLDRCQUE0QixvQ0FBb0M7QUFDaEU7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanM/Y2IzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG5jb25zdCBFUlJPUl9URVhUID0gJ0F1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gb2YgQ3JvbkpvYiBvbmx5IHN1cHBvcnRzIGNyb250YWIgc3RyaW5nJztcblxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgYGNyb25gIGxpYnJhcnkgdG8gc2VuZCBhIGNoZWNrLWluIGV2ZW50IHRvIFNlbnRyeSBmb3IgZWFjaCBqb2IgZXhlY3V0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqIGltcG9ydCB7IENyb25Kb2IgfSBmcm9tICdjcm9uJztcbiAqXG4gKiBjb25zdCBDcm9uSm9iV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Q3JvbihDcm9uSm9iLCAnbXktY3Jvbi1qb2InKTtcbiAqXG4gKiAvLyB1c2UgdGhlIGNvbnN0cnVjdG9yXG4gKiBjb25zdCBqb2IgPSBuZXcgQ3JvbkpvYldpdGhDaGVja0luKCcqICogKiAqIConLCAoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqXG4gKiAvLyBvciBmcm9tXG4gKiBjb25zdCBqb2IgPSBDcm9uSm9iV2l0aENoZWNrSW4uZnJvbSh7IGNyb25UaW1lOiAnKiAqICogKiAqJywgb25UaWNrOiAoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudENyb24obGliLCBtb25pdG9yU2x1Zykge1xuICBsZXQgam9iU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBjb25zdHJ1Y3QodGFyZ2V0LCBhcmdzKSB7XG4gICAgICBjb25zdCBbY3JvblRpbWUsIG9uVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0XSA9IGFyZ3M7XG5cbiAgICAgIGlmICh0eXBlb2YgY3JvblRpbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpvYlNjaGVkdWxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgIH1cblxuICAgICAgam9iU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IG9uVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IHRhcmdldChjcm9uVGltZSwgbW9uaXRvcmVkVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0KTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnZnJvbScpIHtcbiAgICAgICAgcmV0dXJuIChwYXJhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY3JvblRpbWUsIG9uVGljaywgdGltZVpvbmUgfSA9IHBhcmFtO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgICAgIHBhcmFtLm9uVGljayA9IGFzeW5jIChjb250ZXh0LCBvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lWm9uZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LmZyb20ocGFyYW0pO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Q3JvbiA9IGluc3RydW1lbnRDcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxlQUFlLG1CQUFPLENBQUMsNkhBQVc7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsdUlBQWdCO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLCtJQUFvQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzPzg0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3JvbiQxID0gcmVxdWlyZSgnLi9jcm9uLmpzJyk7XG5jb25zdCBub2RlQ3JvbiA9IHJlcXVpcmUoJy4vbm9kZS1jcm9uLmpzJyk7XG5jb25zdCBub2RlU2NoZWR1bGUgPSByZXF1aXJlKCcuL25vZGUtc2NoZWR1bGUuanMnKTtcblxuLyoqIE1ldGhvZHMgdG8gaW5zdHJ1bWVudCBjcm9uIGxpYnJhcmllcyBmb3IgU2VudHJ5IGNoZWNrLWlucyAqL1xuY29uc3QgY3JvbiA9IHtcbiAgaW5zdHJ1bWVudENyb246IGNyb24kMS5pbnN0cnVtZW50Q3JvbixcbiAgaW5zdHJ1bWVudE5vZGVDcm9uOiBub2RlQ3Jvbi5pbnN0cnVtZW50Tm9kZUNyb24sXG4gIGluc3RydW1lbnROb2RlU2NoZWR1bGU6IG5vZGVTY2hlZHVsZS5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlLFxufTtcblxuZXhwb3J0cy5jcm9uID0gY3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                options.name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone]),\n                },\n              );\n            }\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLGlJQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDhCQUE4Qiw2REFBNkQ7QUFDM0Y7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcz85NTIzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgdGhlIGBub2RlLWNyb25gIGxpYnJhcnkgd2l0aCBjaGVjay1pbiBtb25pdG9yaW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuICogaW1wb3J0ICogYXMgY3JvbiBmcm9tIFwibm9kZS1jcm9uXCI7XG4gKlxuICogY29uc3QgY3JvbldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVDcm9uKGNyb24pO1xuICpcbiAqIGNyb25XaXRoQ2hlY2tJbi5zY2hlZHVsZShcbiAqICAgXCIqICogKiAqICpcIixcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwicnVubmluZyBhIHRhc2sgZXZlcnkgbWludXRlXCIpO1xuICogICB9LFxuICogICB7IG5hbWU6IFwibXktY3Jvbi1qb2JcIiB9LFxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZUNyb24obGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZScgJiYgdGFyZ2V0LnNjaGVkdWxlKSB7XG4gICAgICAgIC8vIFdoZW4gJ2dldCcgaXMgY2FsbGVkIGZvciBzY2hlZHVsZSwgcmV0dXJuIGEgcHJveGllZCB2ZXJzaW9uIG9mIHRoZSBzY2hlZHVsZSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZSwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleHByZXNzaW9uLCBjYWxsYmFjaywgb3B0aW9uc10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKCFfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLm5hbWVdKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgXCJuYW1lXCIgZm9yIHNjaGVkdWxlZCBqb2IuIEEgbmFtZSBpcyByZXF1aXJlZCBmb3IgU2VudHJ5IGNoZWNrLWluIG1vbml0b3JpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBjYXRjaCBoZXJlIGFuZCBjYXB0dXJlIHRoZSBleGNlcHRpb24gYmVjYXVzZSBub2RlLWNyb24gc3dhbGxvd3MgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZS1jcm9uL25vZGUtY3Jvbi9pc3N1ZXMvMzk5XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICAgIHRpbWV6b25lOiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIudGltZXpvbmVdKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFtleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZUNyb24gPSBpbnN0cnVtZW50Tm9kZUNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWNyb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await _optionalChain([callback, 'optionalCall', _ => _()]);\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1zY2hlZHVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyxpSUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanM/ODkyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgbm9kZS1zY2hlZHVsZWAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0ICogYXMgc2NoZWR1bGUgZnJvbSAnbm9kZS1zY2hlZHVsZSc7XG4gKlxuICogY29uc3Qgc2NoZWR1bGVXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnROb2RlU2NoZWR1bGUoc2NoZWR1bGUpO1xuICpcbiAqIGNvbnN0IGpvYiA9IHNjaGVkdWxlV2l0aENoZWNrSW4uc2NoZWR1bGVKb2IoJ215LWNyb24tam9iJywgJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnROb2RlU2NoZWR1bGUobGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZUpvYicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZUpvYiwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtuYW1lT3JFeHByZXNzaW9uLCBleHByZXNzaW9uT3JDYWxsYmFjaywgY2FsbGJhY2tdID0gYXJnQXJyYXk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdHlwZW9mIG5hbWVPckV4cHJlc3Npb24gIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgIHR5cGVvZiBleHByZXNzaW9uT3JDYWxsYmFjayAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiAnbm9kZS1zY2hlZHVsZScgcmVxdWlyZXMgdGhlIGZpcnN0IHBhcmFtZXRlciBvZiAnc2NoZWR1bGVKb2InIHRvIGJlIGEgam9iIG5hbWUgc3RyaW5nIGFuZCB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBiZSBhIGNyb250YWIgc3RyaW5nXCIsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG1vbml0b3JTbHVnID0gbmFtZU9yRXhwcmVzc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBleHByZXNzaW9uT3JDYWxsYmFjaztcblxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IF9vcHRpb25hbENoYWluKFtjYWxsYmFjaywgJ29wdGlvbmFsQ2FsbCcsIF8gPT4gXygpXSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW21vbml0b3JTbHVnLCBleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFja10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlU2NoZWR1bGUgPSBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1zY2hlZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2RlYnVnLWJ1aWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUVoRixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanM/ZGZmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = childProcess.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = core.DEFAULT_USER_INCLUDES;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.addRequestDataToEvent = core.addRequestDataToEvent;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.extractRequestData = core.extractRequestData;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.continueTrace = opentelemetry.continueTrace;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    setup(initClient) {\n      client = initClient;\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\nfunction onModuleLoad(callback) {\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.require.end').subscribe(() => callback());\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.import.asyncEnd').subscribe(() => callback());\n}\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n   _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n   _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  let debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n\n  onModuleLoad(() => {\n    debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n  });\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n// TODO(v9): Update this name and mention in migration docs.\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker );\n        }\n      });\n    },\n  };\n});\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n *\n * @deprecated Use `childProcessIntegration` integration instead. Functionally they are the same. `processThreadBreadcrumbIntegration` will be removed in the next major version.\n */\nconst processThreadBreadcrumbIntegration = childProcessIntegration;\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      core.addBreadcrumb({\n        category: 'worker_thread',\n        message: `Worker thread errored with '${error.message}'`,\n        level: 'error',\n        data: { threadId },\n      });\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9jaGlsZFByb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwyQkFBMkIsbUJBQU8sQ0FBQywwREFBMEI7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFjOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxLQUFLO0FBQzdEO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGNBQWM7QUFDOUQ7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBLCtCQUErQjtBQUMvQiwwQ0FBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcz81OGQ3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRpYWdub3N0aWNzQ2hhbm5lbCA9IHJlcXVpcmUoJ25vZGU6ZGlhZ25vc3RpY3NfY2hhbm5lbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vLyBUT0RPKHY5KTogVXBkYXRlIHRoaXMgbmFtZSBhbmQgbWVudGlvbiBpbiBtaWdyYXRpb24gZG9jcy5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUHJvY2Vzc0FuZFRocmVhZEJyZWFkY3J1bWJzJztcblxuLyoqXG4gKiBDYXB0dXJlIGJyZWFkY3J1bWJzIGZvciBjaGlsZCBwcm9jZXNzZXMgYW5kIHdvcmtlciB0aHJlYWRzLlxuICovXG5jb25zdCBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoX2NsaWVudCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuY2hhbm5lbCgnY2hpbGRfcHJvY2VzcycpLnN1YnNjcmliZSgoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiYgJ3Byb2Nlc3MnIGluIGV2ZW50KSB7XG4gICAgICAgICAgY2FwdHVyZUNoaWxkUHJvY2Vzc0V2ZW50cyhldmVudC5wcm9jZXNzICwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGRpYWdub3N0aWNzQ2hhbm5lbC5jaGFubmVsKCd3b3JrZXJfdGhyZWFkcycpLnN1YnNjcmliZSgoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiYgJ3dvcmtlcicgaW4gZXZlbnQpIHtcbiAgICAgICAgICBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKGV2ZW50LndvcmtlciApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSk7XG5cbi8qKlxuICogQ2FwdHVyZSBicmVhZGNydW1icyBmb3IgY2hpbGQgcHJvY2Vzc2VzIGFuZCB3b3JrZXIgdGhyZWFkcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uYCBpbnRlZ3JhdGlvbiBpbnN0ZWFkLiBGdW5jdGlvbmFsbHkgdGhleSBhcmUgdGhlIHNhbWUuIGBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uYCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAqL1xuY29uc3QgcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbiA9IGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uO1xuXG5mdW5jdGlvbiBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGNoaWxkLCBvcHRpb25zKSB7XG4gIGxldCBoYXNFeGl0ZWQgPSBmYWxzZTtcbiAgbGV0IGRhdGE7XG5cbiAgY2hpbGRcbiAgICAub24oJ3NwYXduJywgKCkgPT4ge1xuICAgICAgLy8gVGhpcyBpcyBTZW50cnkgZ2V0dGluZyBtYWNPUyBPUyBjb250ZXh0XG4gICAgICBpZiAoY2hpbGQuc3Bhd25maWxlID09PSAnL3Vzci9iaW4vc3dfdmVycycpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkYXRhID0geyBzcGF3bmZpbGU6IGNoaWxkLnNwYXduZmlsZSB9O1xuICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUNoaWxkUHJvY2Vzc0FyZ3MpIHtcbiAgICAgICAgZGF0YS5zcGF3bmFyZ3MgPSBjaGlsZC5zcGF3bmFyZ3M7XG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2V4aXQnLCBjb2RlID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gT25seSBsb2cgZm9yIG5vbi16ZXJvIGV4aXQgY29kZXNcbiAgICAgICAgaWYgKGNvZGUgIT09IG51bGwgJiYgY29kZSAhPT0gMCkge1xuICAgICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogYENoaWxkIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfSdgLFxuICAgICAgICAgICAgbGV2ZWw6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBpZiAoIWhhc0V4aXRlZCkge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgY2F0ZWdvcnk6ICdjaGlsZF9wcm9jZXNzJyxcbiAgICAgICAgICBtZXNzYWdlOiBgQ2hpbGQgcHJvY2VzcyBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdvcmtlclRocmVhZEV2ZW50cyh3b3JrZXIpIHtcbiAgbGV0IHRocmVhZElkO1xuXG4gIHdvcmtlclxuICAgIC5vbignb25saW5lJywgKCkgPT4ge1xuICAgICAgdGhyZWFkSWQgPSB3b3JrZXIudGhyZWFkSWQ7XG4gICAgfSlcbiAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgY2F0ZWdvcnk6ICd3b3JrZXJfdGhyZWFkJyxcbiAgICAgICAgbWVzc2FnZTogYFdvcmtlciB0aHJlYWQgZXJyb3JlZCB3aXRoICcke2Vycm9yLm1lc3NhZ2V9J2AsXG4gICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICBkYXRhOiB7IHRocmVhZElkIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0cy5jaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbiA9IGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uO1xuZXhwb3J0cy5wcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoaWxkUHJvY2Vzcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      core.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n\n        core.addBreadcrumb(\n          {\n            category: 'console',\n            level: core.severityLevelFromString(level),\n            message: core.truncate(util.format.apply(undefined, args), 2048), // 2KB\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n});\n\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9jb25zb2xlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanM/OWIwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnbm9kZTp1dGlsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29uc29sZSc7XG5cbi8qKlxuICogQ2FwdHVyZSBjb25zb2xlIGxvZ3MgYXMgYnJlYWRjcnVtYnMuXG4gKi9cbmNvbnN0IGNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjb3JlLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgbGV2ZWw6IGNvcmUuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgICAgICAgICAgbWVzc2FnZTogY29yZS50cnVuY2F0ZSh1dGlsLmZvcm1hdC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLCAyMDQ4KSwgLy8gMktCXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnB1dDogWy4uLmFyZ3NdLFxuICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5jb25zb2xlSW50ZWdyYXRpb24gPSBjb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      resolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      resolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', resolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.16.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDBCQUEwQixtQkFBTyxDQUFDLG9OQUFtQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsK0lBQXVCOztBQUVsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxtQkFBbUI7QUFDekQsc0NBQXNDLGFBQWE7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZnMuanM/YmFjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25GcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpbGVTeXN0ZW0nO1xuXG4vKipcbiAqIFRoaXMgaW50ZWdyYXRpb24gd2lsbCBjcmVhdGUgc3BhbnMgZm9yIGBmc2AgQVBJIG9wZXJhdGlvbnMsIGxpa2UgcmVhZGluZyBhbmQgd3JpdGluZyBmaWxlcy5cbiAqXG4gKiAqKldBUk5JTkc6KiogVGhpcyBpbnRlZ3JhdGlvbiBtYXkgYWRkIHNpZ25pZmljYW50IG92ZXJoZWFkIHRvIHlvdXIgYXBwbGljYXRpb24uIEVzcGVjaWFsbHkgaW4gc2NlbmFyaW9zIHdpdGggYSBsb3Qgb2ZcbiAqIGZpbGUgSS9PLCBsaWtlIGZvciBleGFtcGxlIHdoZW4gcnVubmluZyBhIGZyYW1ld29yayBkZXYgc2VydmVyLCBpbmNsdWRpbmcgdGhpcyBpbnRlZ3JhdGlvbiBjYW4gbWFzc2l2ZWx5IHNsb3cgZG93blxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGlzIGludGVncmF0aW9uLlxuICovXG5jb25zdCBmc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihcbiAgKFxuICAgIG9wdGlvbnNcblxuID0ge30sXG4gICkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgc2V0dXBPbmNlKCkge1xuICAgICAgICBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gICAgICAgICAgSU5URUdSQVRJT05fTkFNRSxcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbmV3IGluc3RydW1lbnRhdGlvbkZzLkZzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgICAgICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICAgICAgICAgIGVuZEhvb2soZnVuY3Rpb25OYW1lLCB7IGFyZ3MsIHNwYW4sIGVycm9yIH0pIHtcbiAgICAgICAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUoYGZzLiR7ZnVuY3Rpb25OYW1lfWApO1xuXG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnZmlsZScsXG4gICAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmZpbGUuZnMnLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVjb3JkRXJyb3JNZXNzYWdlc0FzU3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiYgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgndGFyZ2V0X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdwYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUFJFRklYLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3ByZWZpeF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2V4aXN0aW5nX3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ25ld19wYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3NyY19hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZGVzdF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfT0xEX1BBVEhfTkVXX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdvbGRfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgb3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2ZzX2Vycm9yJywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICkoKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbik7XG5cbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSCA9IFsncmVuYW1lJywgJ3JlbmFtZVN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVCA9IFsnY29weUZpbGUnLCAnY3AnLCAnY29weUZpbGVTeW5jJywgJ2NwU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX0VYSVNUSU5HX1BBVEhfTkVXX1BBVEggPSBbJ2xpbmsnLCAnbGlua1N5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVggPSBbJ21rZHRlbXAnLCAnbWtkdGVtcFN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9UQVJHRVRfUEFUSCA9IFsnc3ltbGluaycsICdzeW1saW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHID0gW1xuICAnYWNjZXNzJyxcbiAgJ2FwcGVuZEZpbGUnLFxuICAnY2htb2QnLFxuICAnY2hvd24nLFxuICAnZXhpc3RzJyxcbiAgJ21rZGlyJyxcbiAgJ2xjaG93bicsXG4gICdsc3RhdCcsXG4gICdsdXRpbWVzJyxcbiAgJ29wZW4nLFxuICAnb3BlbmRpcicsXG4gICdyZWFkZGlyJyxcbiAgJ3JlYWRGaWxlJyxcbiAgJ3JlYWRsaW5rJyxcbiAgJ3JlYWxwYXRoJyxcbiAgJ3JlYWxwYXRoLm5hdGl2ZScsXG4gICdybScsXG4gICdybWRpcicsXG4gICdzdGF0JyxcbiAgJ3RydW5jYXRlJyxcbiAgJ3VubGluaycsXG4gICd1dGltZXMnLFxuICAnd3JpdGVGaWxlJyxcbiAgJ2FjY2Vzc1N5bmMnLFxuICAnYXBwZW5kRmlsZVN5bmMnLFxuICAnY2htb2RTeW5jJyxcbiAgJ2Nob3duU3luYycsXG4gICdleGlzdHNTeW5jJyxcbiAgJ2xjaG93blN5bmMnLFxuICAnbHN0YXRTeW5jJyxcbiAgJ2x1dGltZXNTeW5jJyxcbiAgJ29wZW5kaXJTeW5jJyxcbiAgJ21rZGlyU3luYycsXG4gICdvcGVuU3luYycsXG4gICdyZWFkZGlyU3luYycsXG4gICdyZWFkRmlsZVN5bmMnLFxuICAncmVhZGxpbmtTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYycsXG4gICdyZWFscGF0aFN5bmMubmF0aXZlJyxcbiAgJ3JtZGlyU3luYycsXG4gICdybVN5bmMnLFxuICAnc3RhdFN5bmMnLFxuICAndHJ1bmNhdGVTeW5jJyxcbiAgJ3VubGlua1N5bmMnLFxuICAndXRpbWVzU3luYycsXG4gICd3cml0ZUZpbGVTeW5jJyxcbl07XG5cbmV4cG9ydHMuZnNJbnRlZ3JhdGlvbiA9IGZzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n   init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n   _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /** Get the instrumentation for the https module. */\n   _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n   _getPatchIncomingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (\n      original,\n    ) => {\n      return function incomingRequest( event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n\n        instrumentation._diag.debug('http instrumentation for incoming request');\n\n        const isolationScope = core$1.getIsolationScope().clone();\n        const request = args[0] ;\n\n        const normalizedRequest = core$1.httpRequestToRequestData(request);\n\n        patchRequestToCaptureBody(request, isolationScope);\n\n        // Update the isolation scope, isolate this request\n        // TODO(v9): Stop setting `request`, we only rely on normalizedRequest anymore\n        isolationScope.setSDKProcessingMetadata({\n          request,\n          normalizedRequest,\n        });\n\n        const client = core$1.getClient();\n        if (client && client.getOptions().autoSessionTracking) {\n          isolationScope.setRequestSession({ status: 'ok' });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core$1.stripUrlQueryAndFragment(request.url || '/');\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n   _getPatchOutgoingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (original) => {\n      return function outgoingRequest( ...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n\n        const options = argsCopy.shift() ;\n\n        const extraOptions =\n          typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL)\n            ? (argsCopy.shift() )\n            : undefined;\n\n        const { optionsParsed } = instrumentationHttp.getRequestInfo(options, extraOptions);\n\n        const request = original.apply(this, args) ;\n\n        request.prependListener('response', (response) => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb =\n            typeof _ignoreOutgoingRequests === 'function'\n              ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed)\n              : true;\n\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(\n  nodule,\n  name,\n  wrapper,\n) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(\n  obj,\n  name,\n  value,\n) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value,\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core$1.parseUrl(url.toString());\n\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(req, isolationScope) {\n  const chunks = [];\n\n  function getChunksSize() {\n    return chunks.reduce((acc, chunk) => acc + chunk.byteLength, 0);\n  }\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              // If we have already read more than the max body length, we stop addiing chunks\n              // To avoid growing the memory indefinitely if a respons is e.g. streamed\n              if (getChunksSize() < MAX_BODY_BYTE_LENGTH) {\n                const chunk = args[0] ;\n                chunks.push(chunk);\n              } else if (debugBuild.DEBUG_BUILD) {\n                core$1.logger.log(\n                  `Dropping request body chunk because it maximum body length of ${MAX_BODY_BYTE_LENGTH}b is exceeded.`,\n                );\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        if (event === 'end') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const body = Buffer.concat(chunks).toString('utf-8');\n\n                if (body) {\n                  const normalizedRequest = { data: body } ;\n                  isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n                }\n              } catch (e2) {\n                // ignore errors here\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n  } catch (e3) {\n    // ignore errors if we can't patch stuff\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce\n\n(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests]),\n  });\n});\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\nconst _httpIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    },\n  };\n}) ;\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration(_httpIntegration);\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9odHRwL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxZQUFZLG1CQUFPLENBQUMsNklBQW9CO0FBQ3hDLDRCQUE0QixtQkFBTyxDQUFDLDBOQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsbVBBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw4SkFBZ0M7QUFDaEUsc0JBQXNCLG1CQUFPLENBQUMsMEpBQThCO0FBQzVELGtDQUFrQyxtQkFBTyxDQUFDLG9MQUFnQzs7QUFFMUU7O0FBRUE7O0FBRUE7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvaW5kZXguanM/Y2MyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbkh0dHAgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5jb25zdCBnZXRSZXF1ZXN0VXJsID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UmVxdWVzdFVybC5qcycpO1xuY29uc3QgU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0h0dHAnO1xuXG5jb25zdCBJTlNUUlVNRU5UQVRJT05fTkFNRSA9ICdAb3BlbnRlbGVtZXRyeV9zZW50cnktcGF0Y2hlZC9pbnN0cnVtZW50YXRpb24taHR0cCc7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlIdHRwID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlXG5cbihgJHtJTlRFR1JBVElPTl9OQU1FfS5zZW50cnlgLCBvcHRpb25zID0+IHtcbiAgcmV0dXJuIG5ldyBTZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uLlNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24oe1xuICAgIGJyZWFkY3J1bWJzOiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmJyZWFkY3J1bWJzXSksXG4gICAgaWdub3JlT3V0Z29pbmdSZXF1ZXN0czogX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLmlnbm9yZU91dGdvaW5nUmVxdWVzdHNdKSxcbiAgfSk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudE90ZWxIdHRwID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsIGNvbmZpZyA9PiB7XG4gIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IG5ldyBpbnN0cnVtZW50YXRpb25IdHRwLkh0dHBJbnN0cnVtZW50YXRpb24oY29uZmlnKTtcblxuICAvLyBXZSB3YW50IHRvIHVwZGF0ZSB0aGUgbG9nZ2VyIG5hbWVzcGFjZSBzbyB3ZSBjYW4gYmV0dGVyIGlkZW50aWZ5IHdoYXQgaXMgaGFwcGVuaW5nIGhlcmVcbiAgdHJ5IHtcbiAgICBpbnN0cnVtZW50YXRpb25bJ19kaWFnJ10gPSBhcGkuZGlhZy5jcmVhdGVDb21wb25lbnRMb2dnZXIoe1xuICAgICAgbmFtZXNwYWNlOiBJTlNUUlVNRU5UQVRJT05fTkFNRSxcbiAgICB9KTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGFyZSB3cml0aW5nIGEgcmVhZC1vbmx5IHByb3BlcnR5IGhlcmUuLi5cbiAgICBpbnN0cnVtZW50YXRpb24uaW5zdHJ1bWVudGF0aW9uTmFtZSA9IElOU1RSVU1FTlRBVElPTl9OQU1FO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBoZXJlLi4uXG4gIH1cblxuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uO1xufSk7XG5cbi8qKlxuICogSW5zdHJ1bWVudCB0aGUgSFRUUCBhbmQgSFRUUFMgbW9kdWxlcy5cbiAqL1xuY29uc3QgaW5zdHJ1bWVudEh0dHAgPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIC8vIFRoaXMgaXMgdGhlIFwicmVndWxhclwiIE9URUwgaW5zdHJ1bWVudGF0aW9uIHRoYXQgZW1pdHMgc3BhbnNcbiAgaWYgKG9wdGlvbnMuc3BhbnMgIT09IGZhbHNlKSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29uZmlnID0gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMpO1xuICAgIGluc3RydW1lbnRPdGVsSHR0cChpbnN0cnVtZW50YXRpb25Db25maWcpO1xuICB9XG5cbiAgLy8gVGhpcyBpcyB0aGUgU2VudHJ5LXNwZWNpZmljIGluc3RydW1lbnRhdGlvbiB0aGF0IGlzb2xhdGVzIHJlcXVlc3RzICYgY3JlYXRlcyBicmVhZGNydW1ic1xuICAvLyBOb3RlIHRoYXQgdGhpcyBfaGFzXyB0byBiZSB3cmFwcGVkIGFmdGVyIHRoZSBPVEVMIGluc3RydW1lbnRhdGlvbixcbiAgLy8gb3RoZXJ3aXNlIHRoZSBpc29sYXRpb24gd2lsbCBub3Qgd29yayBjb3JyZWN0bHlcbiAgaW5zdHJ1bWVudFNlbnRyeUh0dHAob3B0aW9ucyk7XG59O1xuXG5jb25zdCBfaHR0cEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIdHRwKG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogVGhlIGh0dHAgaW50ZWdyYXRpb24gaW5zdHJ1bWVudHMgTm9kZSdzIGludGVybmFsIGh0dHAgYW5kIGh0dHBzIG1vZHVsZXMuXG4gKiBJdCBjcmVhdGVzIGJyZWFkY3J1bWJzIGFuZCBzcGFucyBmb3Igb3V0Z29pbmcgSFRUUCByZXF1ZXN0cyB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50bHkgYWN0aXZlIHNwYW4uXG4gKi9cbmNvbnN0IGh0dHBJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2h0dHBJbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBAcGFyYW0gcmVxIGlzIGEgQ2xpZW50UmVxdWVzdCwgbWVhbmluZyB0aGUgcmVxdWVzdCB3YXMgY3JlYXRlZCB3aXRoaW4gdGhlIGV4cHJlc3MgYXBwXG4gKiBhbmQgaXQncyBhbiBvdXRnb2luZyByZXF1ZXN0LlxuICogQ2hlY2tpbmcgZm9yIHByb3BlcnRpZXMgaW5zdGVhZCBvZiB1c2luZyBgaW5zdGFuY2VPZmAgdG8gYXZvaWQgaW1wb3J0aW5nIHRoZSByZXF1ZXN0IGNsYXNzZXMuXG4gKi9cbmZ1bmN0aW9uIF9pc0NsaWVudFJlcXVlc3QocmVxKSB7XG4gIHJldHVybiAnb3V0cHV0RGF0YScgaW4gcmVxICYmICdvdXRwdXRTaXplJyBpbiByZXEgJiYgISgnY2xpZW50JyBpbiByZXEpICYmICEoJ3N0YXR1c0NvZGUnIGluIHJlcSk7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBpZiBhbiBpbmNvbWluZyByZXF1ZXN0IGlzIGEgcHJlZmV0Y2ggcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gaXNLbm93blByZWZldGNoUmVxdWVzdChyZXEpIHtcbiAgLy8gQ3VycmVudGx5IG9ubHkgaGFuZGxlcyBOZXh0LmpzIHByZWZldGNoIHJlcXVlc3RzIGJ1dCBtYXkgY2hlY2sgb3RoZXIgZnJhbWV3b3JrcyBpbiB0aGUgZnV0dXJlLlxuICByZXR1cm4gcmVxLmhlYWRlcnNbJ25leHQtcm91dGVyLXByZWZldGNoJ10gPT09ICcxJztcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25Db25maWcgPSB7XG4gICAgLi4uX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdhY2Nlc3MnLCBfMyA9PiBfMy5pbnN0cnVtZW50YXRpb24sICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80Ll9leHBlcmltZW50YWxDb25maWddKSxcblxuICAgIGRpc2FibGVJbmNvbWluZ1JlcXVlc3RJbnN0cnVtZW50YXRpb246IG9wdGlvbnMuZGlzYWJsZUluY29taW5nUmVxdWVzdFNwYW5zLFxuXG4gICAgaWdub3JlT3V0Z29pbmdSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBnZXRSZXF1ZXN0VXJsLmdldFJlcXVlc3RVcmwocmVxdWVzdCk7XG5cbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgPSBvcHRpb25zLmlnbm9yZU91dGdvaW5nUmVxdWVzdHM7XG4gICAgICBpZiAoX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgJiYgX2lnbm9yZU91dGdvaW5nUmVxdWVzdHModXJsLCByZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBpZ25vcmVJbmNvbWluZ1JlcXVlc3RIb29rOiByZXF1ZXN0ID0+IHtcbiAgICAgIC8vIHJlcXVlc3QudXJsIGlzIHRoZSBvbmx5IHByb3BlcnR5IHRoYXQgaG9sZHMgYW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSB1cmxcbiAgICAgIC8vIGl0IG9ubHkgY29uc2lzdHMgb2YgdGhlIFVSTCBwYXRoIGFuZCBxdWVyeSBzdHJpbmcgKGlmIGFueSlcbiAgICAgIGNvbnN0IHVybFBhdGggPSByZXF1ZXN0LnVybDtcblxuICAgICAgY29uc3QgbWV0aG9kID0gX29wdGlvbmFsQ2hhaW4oW3JlcXVlc3QsICdhY2Nlc3MnLCBfNSA9PiBfNS5tZXRob2QsICdvcHRpb25hbEFjY2VzcycsIF82ID0+IF82LnRvVXBwZXJDYXNlLCAnY2FsbCcsIF83ID0+IF83KCldKTtcbiAgICAgIC8vIFdlIGRvIG5vdCBjYXB0dXJlIE9QVElPTlMvSEVBRCByZXF1ZXN0cyBhcyB0cmFuc2FjdGlvbnNcbiAgICAgIGlmIChtZXRob2QgPT09ICdPUFRJT05TJyB8fCBtZXRob2QgPT09ICdIRUFEJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgX2lnbm9yZUluY29taW5nUmVxdWVzdHMgPSBvcHRpb25zLmlnbm9yZUluY29taW5nUmVxdWVzdHM7XG4gICAgICBpZiAodXJsUGF0aCAmJiBfaWdub3JlSW5jb21pbmdSZXF1ZXN0cyAmJiBfaWdub3JlSW5jb21pbmdSZXF1ZXN0cyh1cmxQYXRoLCByZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICByZXF1aXJlUGFyZW50Zm9yT3V0Z29pbmdTcGFuczogZmFsc2UsXG4gICAgcmVxdWlyZVBhcmVudGZvckluY29taW5nU3BhbnM6IGZhbHNlLFxuICAgIHJlcXVlc3RIb29rOiAoc3BhbiwgcmVxKSA9PiB7XG4gICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmh0dHAub3RlbC5odHRwJyk7XG4gICAgICBpZiAoIV9pc0NsaWVudFJlcXVlc3QocmVxKSAmJiBpc0tub3duUHJlZmV0Y2hSZXF1ZXN0KHJlcSkpIHtcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3NlbnRyeS5odHRwLnByZWZldGNoJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIF9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnYWNjZXNzJywgXzggPT4gXzguaW5zdHJ1bWVudGF0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfOSA9PiBfOS5yZXF1ZXN0SG9vaywgJ29wdGlvbmFsQ2FsbCcsIF8xMCA9PiBfMTAoc3BhbiwgcmVxKV0pO1xuICAgIH0sXG4gICAgcmVzcG9uc2VIb29rOiAoc3BhbiwgcmVzKSA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBvcGVudGVsZW1ldHJ5LmdldENsaWVudCgpO1xuICAgICAgaWYgKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLmF1dG9TZXNzaW9uVHJhY2tpbmcpIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICBjbGllbnRbJ19jYXB0dXJlUmVxdWVzdFNlc3Npb24nXSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdhY2Nlc3MnLCBfMTEgPT4gXzExLmluc3RydW1lbnRhdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzEyID0+IF8xMi5yZXNwb25zZUhvb2ssICdvcHRpb25hbENhbGwnLCBfMTMgPT4gXzEzKHNwYW4sIHJlcyldKTtcbiAgICB9LFxuICAgIGFwcGx5Q3VzdG9tQXR0cmlidXRlc09uU3BhbjogKFxuICAgICAgc3BhbixcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXNwb25zZSxcbiAgICApID0+IHtcbiAgICAgIF9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnYWNjZXNzJywgXzE0ID0+IF8xNC5pbnN0cnVtZW50YXRpb24sICdvcHRpb25hbEFjY2VzcycsIF8xNSA9PiBfMTUuYXBwbHlDdXN0b21BdHRyaWJ1dGVzT25TcGFuLCAnb3B0aW9uYWxDYWxsJywgXzE2ID0+IF8xNihzcGFuLCByZXF1ZXN0LCByZXNwb25zZSldKTtcbiAgICB9LFxuICB9IDtcblxuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uQ29uZmlnO1xufVxuXG5leHBvcnRzLmh0dHBJbnRlZ3JhdGlvbiA9IGh0dHBJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudE90ZWxIdHRwID0gaW5zdHJ1bWVudE90ZWxIdHRwO1xuZXhwb3J0cy5pbnN0cnVtZW50U2VudHJ5SHR0cCA9IGluc3RydW1lbnRTZW50cnlIdHRwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcz9jYmFjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhlIGtleSB1c2VkIHRvIHN0b3JlIHRoZSBsb2NhbCB2YXJpYWJsZXMgb24gdGhlIGVycm9yIG9iamVjdC5cbiAqL1xuY29uc3QgTE9DQUxfVkFSSUFCTEVTX0tFWSA9ICdfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJhdGUgbGltaXRlciB0aGF0IHdpbGwgY2FsbCB0aGUgZGlzYWJsZSBjYWxsYmFjayB3aGVuIHRoZSByYXRlIGxpbWl0IGlzIHJlYWNoZWQgYW5kIHRoZSBlbmFibGUgY2FsbGJhY2tcbiAqIHdoZW4gYSB0aW1lb3V0IGhhcyBvY2N1cnJlZC5cbiAqIEBwYXJhbSBtYXhQZXJTZWNvbmQgTWF4aW11bSBudW1iZXIgb2YgY2FsbHMgcGVyIHNlY29uZFxuICogQHBhcmFtIGVuYWJsZSBDYWxsYmFjayB0byBlbmFibGUgY2FwdHVyZVxuICogQHBhcmFtIGRpc2FibGUgQ2FsbGJhY2sgdG8gZGlzYWJsZSBjYXB0dXJlXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRvIGNhbGwgdG8gaW5jcmVtZW50IHRoZSByYXRlIGxpbWl0ZXIgY291bnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmF0ZUxpbWl0ZXIoXG4gIG1heFBlclNlY29uZCxcbiAgZW5hYmxlLFxuICBkaXNhYmxlLFxuKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCByZXRyeVNlY29uZHMgPSA1O1xuICBsZXQgZGlzYWJsZWRUaW1lb3V0ID0gMDtcblxuICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkVGltZW91dCA9PT0gMCkge1xuICAgICAgaWYgKGNvdW50ID4gbWF4UGVyU2Vjb25kKSB7XG4gICAgICAgIHJldHJ5U2Vjb25kcyAqPSAyO1xuICAgICAgICBkaXNhYmxlKHJldHJ5U2Vjb25kcyk7XG5cbiAgICAgICAgLy8gQ2FwIGF0IG9uZSBkYXlcbiAgICAgICAgaWYgKHJldHJ5U2Vjb25kcyA+IDg2NDAwKSB7XG4gICAgICAgICAgcmV0cnlTZWNvbmRzID0gODY0MDA7XG4gICAgICAgIH1cbiAgICAgICAgZGlzYWJsZWRUaW1lb3V0ID0gcmV0cnlTZWNvbmRzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNhYmxlZFRpbWVvdXQgLT0gMTtcblxuICAgICAgaWYgKGRpc2FibGVkVGltZW91dCA9PT0gMCkge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gIH0sIDEwMDApLnVucmVmKCk7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb3VudCArPSAxO1xuICB9O1xufVxuXG4vLyBBZGQgdHlwZXMgZm9yIHRoZSBleGNlcHRpb24gZXZlbnQgZGF0YVxuXG4vKiogQ291bGQgdGhpcyBiZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24/ICovXG5mdW5jdGlvbiBpc0Fub255bW91cyhuYW1lKSB7XG4gIHJldHVybiBuYW1lICE9PSB1bmRlZmluZWQgJiYgKG5hbWUubGVuZ3RoID09PSAwIHx8IG5hbWUgPT09ICc/JyB8fCBuYW1lID09PSAnPGFub255bW91cz4nKTtcbn1cblxuLyoqIERvIHRoZSBmdW5jdGlvbiBuYW1lcyBhcHBlYXIgdG8gbWF0Y2g/ICovXG5mdW5jdGlvbiBmdW5jdGlvbk5hbWVzTWF0Y2goYSwgYikge1xuICByZXR1cm4gYSA9PT0gYiB8fCAoaXNBbm9ueW1vdXMoYSkgJiYgaXNBbm9ueW1vdXMoYikpO1xufVxuXG5leHBvcnRzLkxPQ0FMX1ZBUklBQkxFU19LRVkgPSBMT0NBTF9WQVJJQUJMRVNfS0VZO1xuZXhwb3J0cy5jcmVhdGVSYXRlTGltaXRlciA9IGNyZWF0ZVJhdGVMaW1pdGVyO1xuZXhwb3J0cy5mdW5jdGlvbk5hbWVzTWF0Y2ggPSBmdW5jdGlvbk5hbWVzTWF0Y2g7XG5leHBvcnRzLmlzQW5vbnltb3VzID0gaXNBbm9ueW1vdXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxvQkFBb0IsbUJBQU8sQ0FBQywwSUFBc0I7QUFDbEQsNEJBQTRCLG1CQUFPLENBQUMsdUxBQTRCO0FBQ2hFLDJCQUEyQixtQkFBTyxDQUFDLHFMQUEyQjs7QUFFOUQsK0NBQStDO0FBQy9DO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanM/YTRiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlVmVyc2lvbiA9IHJlcXVpcmUoJy4uLy4uL25vZGVWZXJzaW9uLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc0FzeW5jID0gcmVxdWlyZSgnLi9sb2NhbC12YXJpYWJsZXMtYXN5bmMuanMnKTtcbmNvbnN0IGxvY2FsVmFyaWFibGVzU3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLXN5bmMuanMnKTtcblxuY29uc3QgbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIG5vZGVWZXJzaW9uLk5PREVfVkVSU0lPTi5tYWpvciA8IDE5ID8gbG9jYWxWYXJpYWJsZXNTeW5jLmxvY2FsVmFyaWFibGVzU3luY0ludGVncmF0aW9uKG9wdGlvbnMpIDogbG9jYWxWYXJpYWJsZXNBc3luYy5sb2NhbFZhcmlhYmxlc0FzeW5jSW50ZWdyYXRpb24ob3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSBsb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjQwLjAgKDdmZjQ2N2MpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjQwLjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\n\nfunction log(...args) {\n  core.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  })]),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.logger.log('Local variables rate-limit lifted.');\n                _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n              },\n              seconds => {\n                core.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvbG9jYWwtdmFyaWFibGVzLXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQywwSUFBc0I7QUFDbEQsZUFBZSxtQkFBTyxDQUFDLHlKQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscURBQXFELElBQUksR0FBRyxlQUFlLEdBQUcsYUFBYSxHQUFHLFlBQVk7QUFDMUc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsa0lBQXdCO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQSwwREFBMEQsd0NBQXdDO0FBQ2xHOztBQUVBO0FBQ0EsMERBQTBELHdDQUF3QztBQUNsRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYixLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxLQUFLOztBQUVkO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGlCQUFpQjtBQUNqRCxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUiw4QkFBOEIsdUJBQXVCO0FBQ3JELFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVLDRCQUE0QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLHNCQUFzQixzQ0FBc0M7O0FBRTVEOztBQUVBO0FBQ0E7QUFDQSxpRkFBaUYsY0FBYyxHQUFHLGFBQWE7O0FBRS9HO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsdUdBQXVHLFNBQVM7QUFDaEg7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQixrQkFBa0I7QUFDbEIscUJBQXFCO0FBQ3JCLHFDQUFxQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2xvY2FsLXZhcmlhYmxlcy1zeW5jLmpzPzZiMjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLyoqIENyZWF0ZXMgYSB1bmlxdWUgaGFzaCBmcm9tIHN0YWNrIGZyYW1lcyAqL1xuZnVuY3Rpb24gaGFzaEZyYW1lcyhmcmFtZXMpIHtcbiAgaWYgKGZyYW1lcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT25seSBoYXNoIHRoZSAxMCBtb3N0IHJlY2VudCBmcmFtZXMgKGllLiB0aGUgbGFzdCAxMClcbiAgcmV0dXJuIGZyYW1lcy5zbGljZSgtMTApLnJlZHVjZSgoYWNjLCBmcmFtZSkgPT4gYCR7YWNjfSwke2ZyYW1lLmZ1bmN0aW9ufSwke2ZyYW1lLmxpbmVub30sJHtmcmFtZS5jb2xub31gLCAnJyk7XG59XG5cbi8qKlxuICogV2UgdXNlIHRoZSBzdGFjayBwYXJzZXIgdG8gY3JlYXRlIGEgdW5pcXVlIGhhc2ggZnJvbSB0aGUgZXhjZXB0aW9uIHN0YWNrIHRyYWNlXG4gKiBUaGlzIGlzIHVzZWQgdG8gbG9va3VwIHZhcnMgd2hlbiB0aGUgZXhjZXB0aW9uIHBhc3NlcyB0aHJvdWdoIHRoZSBldmVudCBwcm9jZXNzb3JcbiAqL1xuZnVuY3Rpb24gaGFzaEZyb21TdGFjayhzdGFja1BhcnNlciwgc3RhY2spIHtcbiAgaWYgKHN0YWNrID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGhhc2hGcmFtZXMoc3RhY2tQYXJzZXIoc3RhY2ssIDEpKTtcbn1cblxuLyoqIENyZWF0ZXMgYSBjb250YWluZXIgZm9yIGNhbGxiYWNrcyB0byBiZSBjYWxsZWQgc2VxdWVudGlhbGx5ICovXG5mdW5jdGlvbiBjcmVhdGVDYWxsYmFja0xpc3QoY29tcGxldGUpIHtcbiAgLy8gQSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCBsYXN0IHRvIGZpcnN0XG4gIGxldCBjYWxsYmFja3MgPSBbXTtcblxuICBsZXQgY29tcGxldGVkQ2FsbGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNoZWNrZWRDb21wbGV0ZShyZXN1bHQpIHtcbiAgICBjYWxsYmFja3MgPSBbXTtcbiAgICBpZiAoY29tcGxldGVkQ2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZENhbGxlZCA9IHRydWU7XG4gICAgY29tcGxldGUocmVzdWx0KTtcbiAgfVxuXG4gIC8vIGNvbXBsZXRlIHNob3VsZCBiZSBjYWxsZWQgbGFzdFxuICBjYWxsYmFja3MucHVzaChjaGVja2VkQ29tcGxldGUpO1xuXG4gIGZ1bmN0aW9uIGFkZChmbikge1xuICAgIGNhbGxiYWNrcy5wdXNoKGZuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQocmVzdWx0KSB7XG4gICAgY29uc3QgcG9wcGVkID0gY2FsbGJhY2tzLnBvcCgpIHx8IGNoZWNrZWRDb21wbGV0ZTtcblxuICAgIHRyeSB7XG4gICAgICBwb3BwZWQocmVzdWx0KTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciwgd2Ugc3RpbGwgd2FudCB0byBjYWxsIHRoZSBjb21wbGV0ZSBjYWxsYmFja1xuICAgICAgY2hlY2tlZENvbXBsZXRlKHJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgYWRkLCBuZXh0IH07XG59XG5cbi8qKlxuICogUHJvbWlzZSBBUEkgaXMgYXZhaWxhYmxlIGFzIGBFeHBlcmltZW50YWxgIGFuZCBpbiBOb2RlIDE5IG9ubHkuXG4gKlxuICogQ2FsbGJhY2stYmFzZWQgQVBJIGlzIGBTdGFibGVgIHNpbmNlIHYxNCBhbmQgYEV4cGVyaW1lbnRhbGAgc2luY2UgdjguXG4gKiBCZWNhdXNlIG9mIHRoYXQsIHdlIGFyZSBjcmVhdGluZyBvdXIgb3duIGBBc3luY1Nlc3Npb25gIGNsYXNzLlxuICpcbiAqIGh0dHBzOi8vbm9kZWpzLm9yZy9kb2NzL2xhdGVzdC12MTkueC9hcGkvaW5zcGVjdG9yLmh0bWwjcHJvbWlzZXMtYXBpXG4gKiBodHRwczovL25vZGVqcy5vcmcvZG9jcy9sYXRlc3QtdjE0LngvYXBpL2luc3BlY3Rvci5odG1sXG4gKi9cbmNsYXNzIEFzeW5jU2Vzc2lvbiAge1xuICAvKiogVGhyb3dzIGlmIGluc3BlY3RvciBBUEkgaXMgbm90IGF2YWlsYWJsZSAqL1xuICAgY29uc3RydWN0b3IoICBfc2Vzc2lvbikge3RoaXMuX3Nlc3Npb24gPSBfc2Vzc2lvbjtcbiAgICAvL1xuICB9XG5cbiAgIHN0YXRpYyBhc3luYyBjcmVhdGUob3JEZWZhdWx0KSB7XG4gICAgaWYgKG9yRGVmYXVsdCkge1xuICAgICAgcmV0dXJuIG9yRGVmYXVsdDtcbiAgICB9XG5cbiAgICBjb25zdCBpbnNwZWN0b3IgPSBhd2FpdCBpbXBvcnQoJ25vZGU6aW5zcGVjdG9yJyk7XG4gICAgcmV0dXJuIG5ldyBBc3luY1Nlc3Npb24obmV3IGluc3BlY3Rvci5TZXNzaW9uKCkpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBjb25maWd1cmVBbmRDb25uZWN0KG9uUGF1c2UsIGNhcHR1cmVBbGwpIHtcbiAgICB0aGlzLl9zZXNzaW9uLmNvbm5lY3QoKTtcblxuICAgIHRoaXMuX3Nlc3Npb24ub24oJ0RlYnVnZ2VyLnBhdXNlZCcsIGV2ZW50ID0+IHtcbiAgICAgIG9uUGF1c2UoZXZlbnQsICgpID0+IHtcbiAgICAgICAgLy8gQWZ0ZXIgdGhlIHBhdXNlIHdvcmsgaXMgY29tcGxldGUsIHJlc3VtZSBleGVjdXRpb24gb3IgdGhlIGV4Y2VwdGlvbiBjb250ZXh0IG1lbW9yeSBpcyBsZWFrZWRcbiAgICAgICAgdGhpcy5fc2Vzc2lvbi5wb3N0KCdEZWJ1Z2dlci5yZXN1bWUnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc2Vzc2lvbi5wb3N0KCdEZWJ1Z2dlci5lbmFibGUnKTtcbiAgICB0aGlzLl9zZXNzaW9uLnBvc3QoJ0RlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zJywgeyBzdGF0ZTogY2FwdHVyZUFsbCA/ICdhbGwnIDogJ3VuY2F1Z2h0JyB9KTtcbiAgfVxuXG4gICBzZXRQYXVzZU9uRXhjZXB0aW9ucyhjYXB0dXJlQWxsKSB7XG4gICAgdGhpcy5fc2Vzc2lvbi5wb3N0KCdEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucycsIHsgc3RhdGU6IGNhcHR1cmVBbGwgPyAnYWxsJyA6ICd1bmNhdWdodCcgfSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGdldExvY2FsVmFyaWFibGVzKG9iamVjdElkLCBjb21wbGV0ZSkge1xuICAgIHRoaXMuX2dldFByb3BlcnRpZXMob2JqZWN0SWQsIHByb3BzID0+IHtcbiAgICAgIGNvbnN0IHsgYWRkLCBuZXh0IH0gPSBjcmVhdGVDYWxsYmFja0xpc3QoY29tcGxldGUpO1xuXG4gICAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcHMpIHtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtwcm9wLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi52YWx1ZSwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMub2JqZWN0SWRdKSAmJiBfb3B0aW9uYWxDaGFpbihbcHJvcCwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQudmFsdWUsICdhY2Nlc3MnLCBfNSA9PiBfNS5jbGFzc05hbWVdKSA9PT0gJ0FycmF5Jykge1xuICAgICAgICAgIGNvbnN0IGlkID0gcHJvcC52YWx1ZS5vYmplY3RJZDtcbiAgICAgICAgICBhZGQodmFycyA9PiB0aGlzLl91bnJvbGxBcnJheShpZCwgcHJvcC5uYW1lLCB2YXJzLCBuZXh0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX29wdGlvbmFsQ2hhaW4oW3Byb3AsICdvcHRpb25hbEFjY2VzcycsIF82ID0+IF82LnZhbHVlLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfNy5vYmplY3RJZF0pICYmIF9vcHRpb25hbENoYWluKFtwcm9wLCAnb3B0aW9uYWxBY2Nlc3MnLCBfOCA9PiBfOC52YWx1ZSwgJ29wdGlvbmFsQWNjZXNzJywgXzkgPT4gXzkuY2xhc3NOYW1lXSkgPT09ICdPYmplY3QnKSB7XG4gICAgICAgICAgY29uc3QgaWQgPSBwcm9wLnZhbHVlLm9iamVjdElkO1xuICAgICAgICAgIGFkZCh2YXJzID0+IHRoaXMuX3Vucm9sbE9iamVjdChpZCwgcHJvcC5uYW1lLCB2YXJzLCBuZXh0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX29wdGlvbmFsQ2hhaW4oW3Byb3AsICdvcHRpb25hbEFjY2VzcycsIF8xMCA9PiBfMTAudmFsdWVdKSkge1xuICAgICAgICAgIGFkZCh2YXJzID0+IHRoaXMuX3Vucm9sbE90aGVyKHByb3AsIHZhcnMsIG5leHQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0KHt9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFsbCB0aGUgUHJvcGVydHlEZXNjcmlwdG9ycyBvZiBhbiBvYmplY3RcbiAgICovXG4gICBfZ2V0UHJvcGVydGllcyhvYmplY3RJZCwgbmV4dCkge1xuICAgIHRoaXMuX3Nlc3Npb24ucG9zdChcbiAgICAgICdSdW50aW1lLmdldFByb3BlcnRpZXMnLFxuICAgICAge1xuICAgICAgICBvYmplY3RJZCxcbiAgICAgICAgb3duUHJvcGVydGllczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICAoZXJyLCBwYXJhbXMpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIG5leHQoW10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQocGFyYW1zLnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJvbGxzIGFuIGFycmF5IHByb3BlcnR5XG4gICAqL1xuICAgX3Vucm9sbEFycmF5KG9iamVjdElkLCBuYW1lLCB2YXJzLCBuZXh0KSB7XG4gICAgdGhpcy5fZ2V0UHJvcGVydGllcyhvYmplY3RJZCwgcHJvcHMgPT4ge1xuICAgICAgdmFyc1tuYW1lXSA9IHByb3BzXG4gICAgICAgIC5maWx0ZXIodiA9PiB2Lm5hbWUgIT09ICdsZW5ndGgnICYmICFpc05hTihwYXJzZUludCh2Lm5hbWUsIDEwKSkpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLm5hbWUsIDEwKSAtIHBhcnNlSW50KGIubmFtZSwgMTApKVxuICAgICAgICAubWFwKHYgPT4gX29wdGlvbmFsQ2hhaW4oW3YsICdvcHRpb25hbEFjY2VzcycsIF8xMSA9PiBfMTEudmFsdWUsICdvcHRpb25hbEFjY2VzcycsIF8xMiA9PiBfMTIudmFsdWVdKSk7XG5cbiAgICAgIG5leHQodmFycyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVW5yb2xscyBhbiBvYmplY3QgcHJvcGVydHlcbiAgICovXG4gICBfdW5yb2xsT2JqZWN0KG9iamVjdElkLCBuYW1lLCB2YXJzLCBuZXh0KSB7XG4gICAgdGhpcy5fZ2V0UHJvcGVydGllcyhvYmplY3RJZCwgcHJvcHMgPT4ge1xuICAgICAgdmFyc1tuYW1lXSA9IHByb3BzXG4gICAgICAgIC5tYXAodiA9PiBbdi5uYW1lLCBfb3B0aW9uYWxDaGFpbihbdiwgJ29wdGlvbmFsQWNjZXNzJywgXzEzID0+IF8xMy52YWx1ZSwgJ29wdGlvbmFsQWNjZXNzJywgXzE0ID0+IF8xNC52YWx1ZV0pXSlcbiAgICAgICAgLnJlZHVjZSgob2JqLCBba2V5LCB2YWxdKSA9PiB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge30gKTtcblxuICAgICAgbmV4dCh2YXJzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJvbGxzIG90aGVyIHByb3BlcnRpZXNcbiAgICovXG4gICBfdW5yb2xsT3RoZXIocHJvcCwgdmFycywgbmV4dCkge1xuICAgIGlmIChwcm9wLnZhbHVlKSB7XG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBwcm9wLnZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wLnZhbHVlLnZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcC52YWx1ZS52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHZhcnNbcHJvcC5uYW1lXSA9IGA8JHtwcm9wLnZhbHVlLnZhbHVlfT5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhcnNbcHJvcC5uYW1lXSA9IHByb3AudmFsdWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJ2Rlc2NyaXB0aW9uJyBpbiBwcm9wLnZhbHVlICYmIHByb3AudmFsdWUudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXJzW3Byb3AubmFtZV0gPSBgPCR7cHJvcC52YWx1ZS5kZXNjcmlwdGlvbn0+YDtcbiAgICAgIH0gZWxzZSBpZiAocHJvcC52YWx1ZS50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXJzW3Byb3AubmFtZV0gPSAnPHVuZGVmaW5lZD4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5leHQodmFycyk7XG4gIH1cbn1cblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMb2NhbFZhcmlhYmxlcyc7XG5cbi8qKlxuICogQWRkcyBsb2NhbCB2YXJpYWJsZXMgdG8gZXhjZXB0aW9uIGZyYW1lc1xuICovXG5jb25zdCBfbG9jYWxWYXJpYWJsZXNTeW5jSW50ZWdyYXRpb24gPSAoKFxuICBvcHRpb25zID0ge30sXG4gIHNlc3Npb25PdmVycmlkZSxcbikgPT4ge1xuICBjb25zdCBjYWNoZWRGcmFtZXMgPSBuZXcgY29yZS5MUlVNYXAoMjApO1xuICBsZXQgcmF0ZUxpbWl0ZXI7XG4gIGxldCBzaG91bGRQcm9jZXNzRXZlbnQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBhZGRMb2NhbFZhcmlhYmxlc1RvRXhjZXB0aW9uKGV4Y2VwdGlvbikge1xuICAgIGNvbnN0IGhhc2ggPSBoYXNoRnJhbWVzKF9vcHRpb25hbENoYWluKFtleGNlcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF8xNSA9PiBfMTUuc3RhY2t0cmFjZSwgJ29wdGlvbmFsQWNjZXNzJywgXzE2ID0+IF8xNi5mcmFtZXNdKSk7XG5cbiAgICBpZiAoaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBsb2NhbCB2YXJpYWJsZXMgZm9yIGFuIGV4Y2VwdGlvbiB0aGF0IG1hdGNoZXMgdGhlIGhhc2hcbiAgICAvLyByZW1vdmUgaXMgaWRlbnRpY2FsIHRvIGdldCBidXQgYWxzbyByZW1vdmVzIHRoZSBlbnRyeSBmcm9tIHRoZSBjYWNoZVxuICAgIGNvbnN0IGNhY2hlZEZyYW1lID0gY2FjaGVkRnJhbWVzLnJlbW92ZShoYXNoKTtcblxuICAgIGlmIChjYWNoZWRGcmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmlsdGVyIG91dCBmcmFtZXMgd2hlcmUgdGhlIGZ1bmN0aW9uIG5hbWUgaXMgYG5ldyBQcm9taXNlYCBzaW5jZSB0aGVzZSBhcmUgaW4gdGhlIGVycm9yLnN0YWNrIGZyYW1lc1xuICAgIC8vIGJ1dCBkbyBub3QgYXBwZWFyIGluIHRoZSBkZWJ1Z2dlciBjYWxsIGZyYW1lc1xuICAgIGNvbnN0IGZyYW1lcyA9IChfb3B0aW9uYWxDaGFpbihbZXhjZXB0aW9uLCAnYWNjZXNzJywgXzE3ID0+IF8xNy5zdGFja3RyYWNlLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMTggPT4gXzE4LmZyYW1lc10pIHx8IFtdKS5maWx0ZXIoZnJhbWUgPT4gZnJhbWUuZnVuY3Rpb24gIT09ICduZXcgUHJvbWlzZScpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIFNlbnRyeSBmcmFtZXMgYXJlIGluIHJldmVyc2Ugb3JkZXJcbiAgICAgIGNvbnN0IGZyYW1lSW5kZXggPSBmcmFtZXMubGVuZ3RoIC0gaSAtIDE7XG5cbiAgICAgIGNvbnN0IGNhY2hlZEZyYW1lVmFyaWFibGUgPSBjYWNoZWRGcmFtZVtpXTtcbiAgICAgIGNvbnN0IGZyYW1lVmFyaWFibGUgPSBmcmFtZXNbZnJhbWVJbmRleF07XG5cbiAgICAgIC8vIERyb3Agb3V0IGlmIHdlIHJ1biBvdXQgb2YgZnJhbWVzIHRvIG1hdGNoIHVwXG4gICAgICBpZiAoIWZyYW1lVmFyaWFibGUgfHwgIWNhY2hlZEZyYW1lVmFyaWFibGUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgLy8gV2UgbmVlZCB0byBoYXZlIHZhcnMgdG8gYWRkXG4gICAgICAgIGNhY2hlZEZyYW1lVmFyaWFibGUudmFycyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIC8vIFdlJ3JlIG5vdCBpbnRlcmVzdGVkIGluIGZyYW1lcyB0aGF0IGFyZSBub3QgaW5fYXBwIGJlY2F1c2UgdGhlIHZhcnMgYXJlIG5vdCByZWxldmFudFxuICAgICAgICBmcmFtZVZhcmlhYmxlLmluX2FwcCA9PT0gZmFsc2UgfHxcbiAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIG5hbWVzIG5lZWQgdG8gbWF0Y2hcbiAgICAgICAgIWNvbW1vbi5mdW5jdGlvbk5hbWVzTWF0Y2goZnJhbWVWYXJpYWJsZS5mdW5jdGlvbiwgY2FjaGVkRnJhbWVWYXJpYWJsZS5mdW5jdGlvbilcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZnJhbWVWYXJpYWJsZS52YXJzID0gY2FjaGVkRnJhbWVWYXJpYWJsZS52YXJzO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZExvY2FsVmFyaWFibGVzVG9FdmVudChldmVudCkge1xuICAgIGZvciAoY29uc3QgZXhjZXB0aW9uIG9mIF9vcHRpb25hbENoYWluKFtldmVudCwgJ29wdGlvbmFsQWNjZXNzJywgXzE5ID0+IF8xOS5leGNlcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF8yMCA9PiBfMjAudmFsdWVzXSkgfHwgW10pIHtcbiAgICAgIGFkZExvY2FsVmFyaWFibGVzVG9FeGNlcHRpb24oZXhjZXB0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBfb3B0aW9uYWxDaGFpbihbY2xpZW50LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMjEgPT4gXzIxLmdldE9wdGlvbnMsICdjYWxsJywgXzIyID0+IF8yMigpXSk7XG5cbiAgICAgIGlmICghX29wdGlvbmFsQ2hhaW4oW2NsaWVudE9wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8yMyA9PiBfMjMuaW5jbHVkZUxvY2FsVmFyaWFibGVzXSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IHNldHVwIHRoaXMgaW50ZWdyYXRpb24gaWYgdGhlIE5vZGUgdmVyc2lvbiBpcyA+PSB2MThcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzc2OTdcbiAgICAgIGNvbnN0IHVuc3VwcG9ydGVkTm9kZVZlcnNpb24gPSBub2RlVmVyc2lvbi5OT0RFX01BSk9SIDwgMTg7XG5cbiAgICAgIGlmICh1bnN1cHBvcnRlZE5vZGVWZXJzaW9uKSB7XG4gICAgICAgIGNvcmUubG9nZ2VyLmxvZygnVGhlIGBMb2NhbFZhcmlhYmxlc2AgaW50ZWdyYXRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gTm9kZSA+PSB2MTguJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgQXN5bmNTZXNzaW9uLmNyZWF0ZShzZXNzaW9uT3ZlcnJpZGUpLnRoZW4oXG4gICAgICAgIHNlc3Npb24gPT4ge1xuICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVBhdXNlZChcbiAgICAgICAgICAgIHN0YWNrUGFyc2VyLFxuICAgICAgICAgICAgeyBwYXJhbXM6IHsgcmVhc29uLCBkYXRhLCBjYWxsRnJhbWVzIH0gfSxcbiAgICAgICAgICAgIGNvbXBsZXRlLFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHJlYXNvbiAhPT0gJ2V4Y2VwdGlvbicgJiYgcmVhc29uICE9PSAncHJvbWlzZVJlamVjdGlvbicpIHtcbiAgICAgICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfb3B0aW9uYWxDaGFpbihbcmF0ZUxpbWl0ZXIsICdvcHRpb25hbENhbGwnLCBfMjQgPT4gXzI0KCldKTtcblxuICAgICAgICAgICAgLy8gZGF0YS5kZXNjcmlwdGlvbiBjb250YWlucyB0aGUgb3JpZ2luYWwgZXJyb3Iuc3RhY2tcbiAgICAgICAgICAgIGNvbnN0IGV4Y2VwdGlvbkhhc2ggPSBoYXNoRnJvbVN0YWNrKHN0YWNrUGFyc2VyLCBfb3B0aW9uYWxDaGFpbihbZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzI1ID0+IF8yNS5kZXNjcmlwdGlvbl0pKTtcblxuICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbkhhc2ggPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgeyBhZGQsIG5leHQgfSA9IGNyZWF0ZUNhbGxiYWNrTGlzdChmcmFtZXMgPT4ge1xuICAgICAgICAgICAgICBjYWNoZWRGcmFtZXMuc2V0KGV4Y2VwdGlvbkhhc2gsIGZyYW1lcyk7XG4gICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSdyZSBxdWV1aW5nIHVwIGFuZCBtYWtpbmcgYWxsIHRoZXNlIGNhbGxzIHN5bmNocm9ub3VzbHksIHdlIGNhbiBwb3RlbnRpYWxseSBvdmVyZmxvdyB0aGUgc3RhY2tcbiAgICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiB3ZSBvbmx5IGF0dGVtcHQgdG8gZ2V0IGxvY2FsIHZhcmlhYmxlcyBmb3IgdGhlIGZpcnN0IDUgZnJhbWVzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKGNhbGxGcmFtZXMubGVuZ3RoLCA1KTsgaSsrKSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IHsgc2NvcGVDaGFpbiwgZnVuY3Rpb25OYW1lLCB0aGlzOiBvYmogfSA9IGNhbGxGcmFtZXNbaV07XG5cbiAgICAgICAgICAgICAgY29uc3QgbG9jYWxTY29wZSA9IHNjb3BlQ2hhaW4uZmluZChzY29wZSA9PiBzY29wZS50eXBlID09PSAnbG9jYWwnKTtcblxuICAgICAgICAgICAgICAvLyBvYmouY2xhc3NOYW1lIGlzIHVuZGVmaW5lZCBpbiBFU00gbW9kdWxlc1xuICAgICAgICAgICAgICBjb25zdCBmbiA9XG4gICAgICAgICAgICAgICAgb2JqLmNsYXNzTmFtZSA9PT0gJ2dsb2JhbCcgfHwgIW9iai5jbGFzc05hbWUgPyBmdW5jdGlvbk5hbWUgOiBgJHtvYmouY2xhc3NOYW1lfS4ke2Z1bmN0aW9uTmFtZX1gO1xuXG4gICAgICAgICAgICAgIGlmIChfb3B0aW9uYWxDaGFpbihbbG9jYWxTY29wZSwgJ29wdGlvbmFsQWNjZXNzJywgXzI2ID0+IF8yNi5vYmplY3QsICdhY2Nlc3MnLCBfMjcgPT4gXzI3Lm9iamVjdElkXSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFkZChmcmFtZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgZnJhbWVzW2ldID0geyBmdW5jdGlvbjogZm4gfTtcbiAgICAgICAgICAgICAgICAgIG5leHQoZnJhbWVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGxvY2FsU2NvcGUub2JqZWN0Lm9iamVjdElkO1xuICAgICAgICAgICAgICAgIGFkZChmcmFtZXMgPT5cbiAgICAgICAgICAgICAgICAgIF9vcHRpb25hbENoYWluKFtzZXNzaW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMjggPT4gXzI4LmdldExvY2FsVmFyaWFibGVzLCAnY2FsbCcsIF8yOSA9PiBfMjkoaWQsIHZhcnMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXNbaV0gPSB7IGZ1bmN0aW9uOiBmbiwgdmFycyB9O1xuICAgICAgICAgICAgICAgICAgICBuZXh0KGZyYW1lcyk7XG4gICAgICAgICAgICAgICAgICB9KV0pLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV4dChbXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY2FwdHVyZUFsbCA9IG9wdGlvbnMuY2FwdHVyZUFsbEV4Y2VwdGlvbnMgIT09IGZhbHNlO1xuXG4gICAgICAgICAgc2Vzc2lvbi5jb25maWd1cmVBbmRDb25uZWN0KFxuICAgICAgICAgICAgKGV2LCBjb21wbGV0ZSkgPT5cbiAgICAgICAgICAgICAgaGFuZGxlUGF1c2VkKGNsaWVudE9wdGlvbnMuc3RhY2tQYXJzZXIsIGV2ICwgY29tcGxldGUpLFxuICAgICAgICAgICAgY2FwdHVyZUFsbCxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGNhcHR1cmVBbGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IG9wdGlvbnMubWF4RXhjZXB0aW9uc1BlclNlY29uZCB8fCA1MDtcblxuICAgICAgICAgICAgcmF0ZUxpbWl0ZXIgPSBjb21tb24uY3JlYXRlUmF0ZUxpbWl0ZXIoXG4gICAgICAgICAgICAgIG1heCxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUubG9nZ2VyLmxvZygnTG9jYWwgdmFyaWFibGVzIHJhdGUtbGltaXQgbGlmdGVkLicpO1xuICAgICAgICAgICAgICAgIF9vcHRpb25hbENoYWluKFtzZXNzaW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMzAgPT4gXzMwLnNldFBhdXNlT25FeGNlcHRpb25zLCAnY2FsbCcsIF8zMSA9PiBfMzEodHJ1ZSldKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2Vjb25kcyA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS5sb2dnZXIubG9nKFxuICAgICAgICAgICAgICAgICAgYExvY2FsIHZhcmlhYmxlcyByYXRlLWxpbWl0IGV4Y2VlZGVkLiBEaXNhYmxpbmcgY2FwdHVyaW5nIG9mIGNhdWdodCBleGNlcHRpb25zIGZvciAke3NlY29uZHN9IHNlY29uZHMuYCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIF9vcHRpb25hbENoYWluKFtzZXNzaW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMzIgPT4gXzMyLnNldFBhdXNlT25FeGNlcHRpb25zLCAnY2FsbCcsIF8zMyA9PiBfMzMoZmFsc2UpXSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNob3VsZFByb2Nlc3NFdmVudCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICBjb3JlLmxvZ2dlci5sb2coJ1RoZSBgTG9jYWxWYXJpYWJsZXNgIGludGVncmF0aW9uIGZhaWxlZCB0byBzdGFydC4nLCBlcnJvcik7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICBpZiAoc2hvdWxkUHJvY2Vzc0V2ZW50KSB7XG4gICAgICAgIHJldHVybiBhZGRMb2NhbFZhcmlhYmxlc1RvRXZlbnQoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICAvLyBUaGVzZSBhcmUgZW50aXJlbHkgZm9yIHRlc3RpbmdcbiAgICBfZ2V0Q2FjaGVkRnJhbWVzQ291bnQoKSB7XG4gICAgICByZXR1cm4gY2FjaGVkRnJhbWVzLnNpemU7XG4gICAgfSxcbiAgICBfZ2V0Rmlyc3RDYWNoZWRGcmFtZSgpIHtcbiAgICAgIHJldHVybiBjYWNoZWRGcmFtZXMudmFsdWVzKClbMF07XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIGxvY2FsIHZhcmlhYmxlcyB0byBleGNlcHRpb24gZnJhbWVzLlxuICovXG5jb25zdCBsb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2xvY2FsVmFyaWFibGVzU3luY0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5jcmVhdGVDYWxsYmFja0xpc3QgPSBjcmVhdGVDYWxsYmFja0xpc3Q7XG5leHBvcnRzLmhhc2hGcmFtZXMgPSBoYXNoRnJhbWVzO1xuZXhwb3J0cy5oYXNoRnJvbVN0YWNrID0gaGFzaEZyb21TdGFjaztcbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNTeW5jSW50ZWdyYXRpb24gPSBsb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsLXZhcmlhYmxlcy1zeW5jLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \****************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  // This integration only works in CJS contexts\n  if (!commonjs.isCjs()) {\n    debugBuild.DEBUG_BUILD &&\n      core.logger.warn(\n        'modulesIntegration only works in CommonJS (CJS) environments. Remove this integration if you are using ESM.',\n      );\n    return {\n      name: INTEGRATION_NAME,\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n *\n * Only works in CommonJS (CJS) environments.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsZ0JBQWdCLG1CQUFPLENBQUMsd0JBQVM7QUFDakMsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVJQUFtQjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQyw2SUFBc0I7O0FBRS9DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFhLGVBQWUscUJBQWE7QUFDcEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLDRDQUFZLElBQUksNENBQVk7QUFDakQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzPzgxYjEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZV9mcyA9IHJlcXVpcmUoJ25vZGU6ZnMnKTtcbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbmpzLmpzJyk7XG5cbmxldCBtb2R1bGVDYWNoZTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb2R1bGVzJztcblxuY29uc3QgX21vZHVsZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIC8vIFRoaXMgaW50ZWdyYXRpb24gb25seSB3b3JrcyBpbiBDSlMgY29udGV4dHNcbiAgaWYgKCFjb21tb25qcy5pc0NqcygpKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgY29yZS5sb2dnZXIud2FybihcbiAgICAgICAgJ21vZHVsZXNJbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIGluIENvbW1vbkpTIChDSlMpIGVudmlyb25tZW50cy4gUmVtb3ZlIHRoaXMgaW50ZWdyYXRpb24gaWYgeW91IGFyZSB1c2luZyBFU00uJyxcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQpIHtcbiAgICAgIGV2ZW50Lm1vZHVsZXMgPSB7XG4gICAgICAgIC4uLmV2ZW50Lm1vZHVsZXMsXG4gICAgICAgIC4uLl9nZXRNb2R1bGVzKCksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgbm9kZSBtb2R1bGVzIC8gcGFja2FnZXMgdG8gdGhlIGV2ZW50LlxuICpcbiAqIE9ubHkgd29ya3MgaW4gQ29tbW9uSlMgKENKUykgZW52aXJvbm1lbnRzLlxuICovXG5jb25zdCBtb2R1bGVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb2R1bGVzSW50ZWdyYXRpb24pO1xuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYXRocyAqL1xuZnVuY3Rpb24gZ2V0UGF0aHMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUuY2FjaGUgPyBPYmplY3Qua2V5cyhyZXF1aXJlLmNhY2hlICkgOiBbXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyAqL1xuZnVuY3Rpb24gY29sbGVjdE1vZHVsZXMoKVxuXG4ge1xuICBjb25zdCBtYWluUGF0aHMgPSAocmVxdWlyZS5tYWluICYmIHJlcXVpcmUubWFpbi5wYXRocykgfHwgW107XG4gIGNvbnN0IHBhdGhzID0gZ2V0UGF0aHMoKTtcbiAgY29uc3QgaW5mb3NcblxuID0ge307XG4gIGNvbnN0IHNlZW5cblxuID0ge307XG5cbiAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICBsZXQgZGlyID0gcGF0aDtcblxuICAgIC8qKiBUcmF2ZXJzZSBkaXJlY3RvcmllcyB1cHdhcmQgaW4gdGhlIHNlYXJjaCBvZiBwYWNrYWdlLmpzb24gZmlsZSAqL1xuICAgIGNvbnN0IHVwZGlyID0gKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZyA9IGRpcjtcbiAgICAgIGRpciA9IG5vZGVfcGF0aC5kaXJuYW1lKG9yaWcpO1xuXG4gICAgICBpZiAoIWRpciB8fCBvcmlnID09PSBkaXIgfHwgc2VlbltvcmlnXSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG1haW5QYXRocy5pbmRleE9mKGRpcikgPCAwKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwa2dmaWxlID0gbm9kZV9wYXRoLmpvaW4ob3JpZywgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgc2VlbltvcmlnXSA9IHRydWU7XG5cbiAgICAgIGlmICghbm9kZV9mcy5leGlzdHNTeW5jKHBrZ2ZpbGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gSlNPTi5wYXJzZShub2RlX2ZzLnJlYWRGaWxlU3luYyhwa2dmaWxlLCAndXRmOCcpKVxuXG47XG4gICAgICAgIGluZm9zW2luZm8ubmFtZV0gPSBpbmZvLnZlcnNpb247XG4gICAgICB9IGNhdGNoIChfb08pIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdXBkaXIoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGluZm9zO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgbGlzdCBvZiBtb2R1bGVzIGFuZCB0aGUgdmVyc2lvbnMgbG9hZGVkIGJ5IHRoZSBlbnRyeSBmaWxlIGZvciB5b3VyIG5vZGUuanMgYXBwLiAqL1xuZnVuY3Rpb24gX2dldE1vZHVsZXMoKSB7XG4gIGlmICghbW9kdWxlQ2FjaGUpIHtcbiAgICBtb2R1bGVDYWNoZSA9IGNvbGxlY3RNb2R1bGVzKCk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZUNhY2hlO1xufVxuXG5leHBvcnRzLm1vZHVsZXNJbnRlZ3JhdGlvbiA9IG1vZHVsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.6.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const ctx = api.context.active();\n            const addedHeaders = {};\n\n            // We generate a virtual span context from the active one,\n            // Where we attach the URL to the trace state, so the propagator can pick it up\n            const activeSpan = api.trace.getSpan(ctx);\n            const propagationContext = activeSpan\n              ? opentelemetry.getPropagationContextFromSpan(activeSpan)\n              : core.getCurrentScope().getPropagationContext();\n\n            const spanContext = opentelemetry.generateSpanContextForPropagationContext(propagationContext);\n            // We know that in practice we'll _always_ haven a traceState here\n            spanContext.traceState = _optionalChain([spanContext, 'access', _2 => _2.traceState, 'optionalAccess', _3 => _3.set, 'call', _4 => _4('sentry.url', url)]);\n            const ctxWithUrlTraceState = api.trace.setSpanContext(ctx, spanContext);\n\n            api.propagation.inject(ctxWithUrlTraceState, addedHeaders);\n\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = core.parseUrl(url.toString());\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9vbnVuaGFuZGxlZHJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxzQkFBc0IsbUJBQU8sQ0FBQyx1SkFBMkI7O0FBRXpEOztBQUVBLHVEQUF1RDtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsTUFBTTtBQUMxRixLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUNBQWlDO0FBQ2xELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzPzIwMGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZXJyb3JoYW5kbGluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL2Vycm9yaGFuZGxpbmcuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdPblVuaGFuZGxlZFJlamVjdGlvbic7XG5cbmNvbnN0IF9vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCAnd2Fybic7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgZ2xvYmFsLnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihjbGllbnQsIHsgbW9kZSB9KSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgYSBnbG9iYWwgcHJvbWlzZSByZWplY3Rpb24gaGFuZGxlci5cbiAqL1xuY29uc3Qgb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIFNlbmQgYW4gZXhjZXB0aW9uIHdpdGggcmVhc29uXG4gKiBAcGFyYW0gcmVhc29uIHN0cmluZ1xuICogQHBhcmFtIHByb21pc2UgcHJvbWlzZVxuICpcbiAqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIoXG4gIGNsaWVudCxcbiAgb3B0aW9ucyxcbikge1xuICByZXR1cm4gZnVuY3Rpb24gc2VuZFVuaGFuZGxlZFByb21pc2UocmVhc29uLCBwcm9taXNlKSB7XG4gICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihyZWFzb24sIHtcbiAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBwcm9taXNlLFxuICAgICAgY2FwdHVyZUNvbnRleHQ6IHtcbiAgICAgICAgZXh0cmE6IHsgdW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbjogdHJ1ZSB9LFxuICAgICAgfSxcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ29udW5oYW5kbGVkcmVqZWN0aW9uJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBoYW5kbGVSZWplY3Rpb24ocmVhc29uLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBIYW5kbGVyIGZvciBgbW9kZWAgb3B0aW9uXG5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUmVqZWN0aW9uKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWFzb24sXG4gIG9wdGlvbnMsXG4pIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvN2NmNmY5ZTk2NGFhMDA3NzI5NjUzOTFjMjNhY2RhNmQ3MTk3MmE5YS9saWIvaW50ZXJuYWwvcHJvY2Vzcy9wcm9taXNlcy5qcyNMMjM0LUwyNDBcbiAgY29uc3QgcmVqZWN0aW9uV2FybmluZyA9XG4gICAgJ1RoaXMgZXJyb3Igb3JpZ2luYXRlZCBlaXRoZXIgYnkgJyArXG4gICAgJ3Rocm93aW5nIGluc2lkZSBvZiBhbiBhc3luYyBmdW5jdGlvbiB3aXRob3V0IGEgY2F0Y2ggYmxvY2ssICcgK1xuICAgICdvciBieSByZWplY3RpbmcgYSBwcm9taXNlIHdoaWNoIHdhcyBub3QgaGFuZGxlZCB3aXRoIC5jYXRjaCgpLicgK1xuICAgICcgVGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uOic7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAob3B0aW9ucy5tb2RlID09PSAnd2FybicpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uICYmIHJlYXNvbi5zdGFjayA/IHJlYXNvbi5zdGFjayA6IHJlYXNvbik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tb2RlID09PSAnc3RyaWN0Jykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgIH0pO1xuICAgIGVycm9yaGFuZGxpbmcubG9nQW5kRXhpdFByb2Nlc3MocmVhc29uKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbn1cblxuZXhwb3J0cy5tYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIgPSBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXI7XG5leHBvcnRzLm9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSBvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b251bmhhbmRsZWRyZWplY3Rpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && \"development\" !== 'development') {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      core.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    core.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9zcG90bGlnaHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLDRIQUFjOztBQUVuQzs7QUFFQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxhQUFvQixvQkFBb0IsRUFFekY7QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLElBQUk7QUFDMUIsSUFBSTtBQUNKLHlEQUF5RCxJQUFJO0FBQzdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsVUFBVTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcz9lZThjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdTcG90bGlnaHQnO1xuXG5jb25zdCBfc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBfb3B0aW9ucyA9IHtcbiAgICBzaWRlY2FyVXJsOiBvcHRpb25zLnNpZGVjYXJVcmwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODk2OS9zdHJlYW0nLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgY29yZS5sb2dnZXIud2FybihcIltTcG90bGlnaHRdIEl0IHNlZW1zIHlvdSdyZSBub3QgaW4gZGV2IG1vZGUuIERvIHlvdSByZWFsbHkgd2FudCB0byBoYXZlIFNwb3RsaWdodCBlbmFibGVkP1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIF9vcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFVzZSB0aGlzIGludGVncmF0aW9uIHRvIHNlbmQgZXJyb3JzIGFuZCB0cmFuc2FjdGlvbnMgdG8gU3BvdGxpZ2h0LlxuICpcbiAqIExlYXJuIG1vcmUgYWJvdXQgc3BvdGxpZ2h0IGF0IGh0dHBzOi8vc3BvdGxpZ2h0anMuY29tXG4gKlxuICogSW1wb3J0YW50OiBUaGlzIGludGVncmF0aW9uIG9ubHkgd29ya3Mgd2l0aCBOb2RlIDE4IG9yIG5ld2VyLlxuICovXG5jb25zdCBzcG90bGlnaHRJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3Nwb3RsaWdodEludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgb3B0aW9ucykge1xuICBjb25zdCBzcG90bGlnaHRVcmwgPSBwYXJzZVNpZGVjYXJVcmwob3B0aW9ucy5zaWRlY2FyVXJsKTtcbiAgaWYgKCFzcG90bGlnaHRVcmwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZmFpbGVkUmVxdWVzdHMgPSAwO1xuXG4gIGNsaWVudC5vbignYmVmb3JlRW52ZWxvcGUnLCAoZW52ZWxvcGUpID0+IHtcbiAgICBpZiAoZmFpbGVkUmVxdWVzdHMgPiAzKSB7XG4gICAgICBjb3JlLmxvZ2dlci53YXJuKCdbU3BvdGxpZ2h0XSBEaXNhYmxlZCBTZW50cnkgLT4gU3BvdGxpZ2h0IGludGVncmF0aW9uIGR1ZSB0byB0b28gbWFueSBmYWlsZWQgcmVxdWVzdHMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpYWxpemVkRW52ZWxvcGUgPSBjb3JlLnNlcmlhbGl6ZUVudmVsb3BlKGVudmVsb3BlKTtcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBnZXROYXRpdmVIdHRwUmVxdWVzdCgpO1xuICAgIGNvbnN0IHJlcSA9IHJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBwYXRoOiBzcG90bGlnaHRVcmwucGF0aG5hbWUsXG4gICAgICAgIGhvc3RuYW1lOiBzcG90bGlnaHRVcmwuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHNwb3RsaWdodFVybC5wb3J0LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXNlbnRyeS1lbnZlbG9wZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlICYmIHJlcy5zdGF0dXNDb2RlID49IDIwMCAmJiByZXMuc3RhdHVzQ29kZSA8IDQwMCkge1xuICAgICAgICAgIC8vIFJlc2V0IGZhaWxlZCByZXF1ZXN0cyBjb3VudGVyIG9uIHN1Y2Nlc3NcbiAgICAgICAgICBmYWlsZWRSZXF1ZXN0cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLm9uKCdkYXRhJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcblxuICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgcmVxLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgIGZhaWxlZFJlcXVlc3RzKys7XG4gICAgICBjb3JlLmxvZ2dlci53YXJuKCdbU3BvdGxpZ2h0XSBGYWlsZWQgdG8gc2VuZCBlbnZlbG9wZSB0byBTcG90bGlnaHQgU2lkZWNhcicpO1xuICAgIH0pO1xuICAgIHJlcS53cml0ZShzZXJpYWxpemVkRW52ZWxvcGUpO1xuICAgIHJlcS5lbmQoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lkZWNhclVybCh1cmwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChgJHt1cmx9YCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb3JlLmxvZ2dlci53YXJuKGBbU3BvdGxpZ2h0XSBJbnZhbGlkIHNpZGVjYXIgVVJMOiAke3VybH1gKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogV2Ugd2FudCB0byBnZXQgYW4gdW5wYXRjaGVkIGh0dHAgcmVxdWVzdCBpbXBsZW1lbnRhdGlvbiB0byBhdm9pZCBjYXB0dXJpbmcgb3VyIG93biBjYWxscy5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlSHR0cFJlcXVlc3QoKSB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gaHR0cDtcbiAgaWYgKGlzV3JhcHBlZChyZXF1ZXN0KSkge1xuICAgIHJldHVybiByZXF1ZXN0Ll9fc2VudHJ5X29yaWdpbmFsX187XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gaXNXcmFwcGVkKGltcGwpIHtcbiAgcmV0dXJuICdfX3NlbnRyeV9vcmlnaW5hbF9fJyBpbiBpbXBsO1xufVxuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuZXhwb3J0cy5nZXROYXRpdmVIdHRwUmVxdWVzdCA9IGdldE5hdGl2ZUh0dHBSZXF1ZXN0O1xuZXhwb3J0cy5zcG90bGlnaHRJbnRlZ3JhdGlvbiA9IHNwb3RsaWdodEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BvdGxpZ2h0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FtcXBsaWIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyxtT0FBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw4SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcz9jYTMzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkFtcXBsaWIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tYW1xcGxpYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQW1xcGxpYic7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgY29uc3VtZUVuZEhvb2s6IChzcGFuKSA9PiB7XG4gICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwuY29uc3VtZXInKTtcbiAgfSxcbiAgcHVibGlzaEhvb2s6IChzcGFuKSA9PiB7XG4gICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwucHVibGlzaGVyJyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYi5BbXFwbGliSW5zdHJ1bWVudGF0aW9uKGNvbmZpZykpO1xuXG5jb25zdCBfYW1xcGxpYkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRBbXFwbGliKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFthbXFwbGliXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9hbXFwbGliKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgYW1xcGxpYkludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2FtcXBsaWIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5hbXFwbGliSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBhbXFwbGliSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9hbXFwbGliSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmFtcXBsaWJJbnRlZ3JhdGlvbiA9IGFtcXBsaWJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEFtcXBsaWIgPSBpbnN0cnVtZW50QW1xcGxpYjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFtcXBsaWIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Nvbm5lY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyxtT0FBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw4SkFBZ0M7O0FBRWhFOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcz84Y2EyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkNvbm5lY3QgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tY29ubmVjdCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgZW5zdXJlSXNXcmFwcGVkID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29ubmVjdCc7XG5cbmNvbnN0IGluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25Db25uZWN0LkNvbm5lY3RJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9jb25uZWN0SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudENvbm5lY3QoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbQ29ubmVjdF0oaHR0cHM6Ly9naXRodWIuY29tL3NlbmNoYWxhYnMvY29ubmVjdC8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3UgaW5pdGlhbGl6ZSB5b3VyIGNvbm5lY3QgYXBwLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtjb25uZWN0IGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2Nvbm5lY3QvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuY29ubmVjdEludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBjb25uZWN0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9jb25uZWN0SW50ZWdyYXRpb24pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gY29ubmVjdEVycm9yTWlkZGxld2FyZShlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnIpO1xuICBuZXh0KGVycik7XG59XG5cbi8qKlxuICogQWRkIGEgQ29ubmVjdCBtaWRkbGV3YXJlIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBDb25uZWN0IGFwcCB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBjb25uZWN0ID0gcmVxdWlyZShcImNvbm5lY3RcIik7XG4gKlxuICogY29uc3QgYXBwID0gY29ubmVjdCgpO1xuICpcbiAqIFNlbnRyeS5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91IGNvbm5lY3Qgcm91dGVzIGhlcmVcbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbmNvbnN0IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShjb25uZWN0RXJyb3JNaWRkbGV3YXJlKTtcblxuICAvLyBTYWRseSwgQ29ubmVjdEluc3RydW1lbnRhdGlvbiBoYXMgbm8gcmVxdWVzdEhvb2ssIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSBhdHRyaWJ1dGVzIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGNvbm5lY3RcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICBlbnN1cmVJc1dyYXBwZWQuZW5zdXJlSXNXcmFwcGVkKGFwcC51c2UsICdjb25uZWN0Jyk7XG59O1xuXG5mdW5jdGlvbiBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snY29ubmVjdC50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBjb25uZWN0IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5jb25uZWN0JyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uY29ubmVjdGAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRvIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snY29ubmVjdC5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5jb25uZWN0SW50ZWdyYXRpb24gPSBjb25uZWN0SW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudENvbm5lY3Q7XG5leHBvcnRzLnNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.12.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (\n          spanJSON.description === 'dataloader.load' ||\n          spanJSON.description === 'dataloader.loadMany' ||\n          spanJSON.description === 'dataloader.batch'\n        ) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGtDQUFrQyxtQkFBTyxDQUFDLDRPQUEyQztBQUNyRixhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsa0pBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanM/ZmI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25EYXRhbG9hZGVyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWRhdGFsb2FkZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdEYXRhbG9hZGVyJztcblxuY29uc3QgaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIuRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9kYXRhbG9hZGVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudERhdGFsb2FkZXIoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtzcGFuSlNPTiwgJ2FjY2VzcycsIF8gPT4gXy5kZXNjcmlwdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuc3RhcnRzV2l0aCwgJ2NhbGwnLCBfMyA9PiBfMygnZGF0YWxvYWRlcicpXSkpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLmRhdGFsb2FkZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXNlIGFyZSBhbGwgcG9zc2libGUgZGF0YWxvYWRlciBzcGFuIGRlc2NyaXB0aW9uc1xuICAgICAgICAvLyBTdGlsbCBjaGVja2luZyBmb3IgdGhlIGZ1dHVyZSB2ZXJzaW9uc1xuICAgICAgICAvLyBpbiBjYXNlIHRoZXkgYWRkIHN1cHBvcnQgZm9yIGBjbGVhcmAgYW5kIGBwcmltZWBcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5sb2FkJyB8fFxuICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5sb2FkTWFueScgfHxcbiAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIuYmF0Y2gnXG4gICAgICAgICkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2NhY2hlLmdldCcpO1xuICAgICAgICAgIC8vIFRPRE86IFdlIGNhbiB0cnkgYWRkaW5nIGBrZXlgIHRvIHRoZSBgZGF0YWAgYXR0cmlidXRlIHVwc3RyZWFtLlxuICAgICAgICAgIC8vIE9yIGFsdGVybmF0aXZlbHksIHdlIGNhbiBhZGQgYHJlcXVlc3RIb29rYCB0byB0aGUgZGF0YWxvYWRlciBpbnN0cnVtZW50YXRpb24uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbZGF0YWxvYWRlcl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGF0YWxvYWRlcikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGRhdGFsb2FkZXJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9kYXRhbG9hZGVyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZGF0YWxvYWRlckludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgZGF0YWxvYWRlckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZGF0YWxvYWRlckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5kYXRhbG9hZGVySW50ZWdyYXRpb24gPSBkYXRhbG9hZGVySW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnREYXRhbG9hZGVyID0gaW5zdHJ1bWVudERhdGFsb2FkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhbG9hZGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n        const attributes = core.spanToJSON(span).data || {};\n        // this is one of: middleware, request_handler, router\n        const type = attributes['express.type'];\n\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n        }\n\n        // Also update the name, we don't need to \"middleware - \" prefix\n        const name = attributes['express.name'];\n        if (typeof name === 'string') {\n          span.updateName(name);\n        }\n      },\n      spanNameHook(info, defaultName) {\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD &&\n            core.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n          return defaultName;\n        }\n        if (info.layerType === 'request_handler') {\n          // type cast b/c Otel unfortunately types info.request as any :(\n          const req = info.request ;\n          const method = req.method ? req.method.toUpperCase() : 'GET';\n          core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n        }\n        return defaultName;\n      },\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    _req,\n    res,\n    next,\n  ) {\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n      next(error);\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2V4cHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLG1PQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMElBQXNCO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw4SkFBZ0M7QUFDaEUsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0VBQWtFLEtBQUs7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsV0FBVztBQUM5RTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscURBQXFELGFBQWEsc0NBQXNDO0FBQ3hHO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZXhwcmVzcy5qcz8yZWVmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkV4cHJlc3MgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0V4cHJlc3MnO1xuXG5jb25zdCBpbnN0cnVtZW50RXhwcmVzcyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRXhwcmVzcy5FeHByZXNzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5odHRwLm90ZWwuZXhwcmVzcycpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcbiAgICAgICAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlciwgcm91dGVyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydleHByZXNzLnR5cGUnXTtcblxuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0uZXhwcmVzc2ApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdG8gXCJtaWRkbGV3YXJlIC0gXCIgcHJlZml4XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydleHByZXNzLm5hbWUnXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNwYW5OYW1lSG9vayhpbmZvLCBkZWZhdWx0TmFtZSkge1xuICAgICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpID09PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICAgICAgY29yZS5sb2dnZXIud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZm8ubGF5ZXJUeXBlID09PSAncmVxdWVzdF9oYW5kbGVyJykge1xuICAgICAgICAgIC8vIHR5cGUgY2FzdCBiL2MgT3RlbCB1bmZvcnR1bmF0ZWx5IHR5cGVzIGluZm8ucmVxdWVzdCBhcyBhbnkgOihcbiAgICAgICAgICBjb25zdCByZXEgPSBpbmZvLnJlcXVlc3QgO1xuICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcS5tZXRob2QgPyByZXEubWV0aG9kLnRvVXBwZXJDYXNlKCkgOiAnR0VUJztcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtpbmZvLnJvdXRlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0TmFtZTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfZXhwcmVzc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRFeHByZXNzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0V4cHJlc3NdKGh0dHBzOi8vZXhwcmVzc2pzLmNvbS8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwRXhwcmVzc0Vycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgRXhwcmVzcyBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2V4cHJlc3MgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvZXhwcmVzcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5leHByZXNzSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGV4cHJlc3NJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2V4cHJlc3NJbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogQW4gRXhwcmVzcy1jb21wYXRpYmxlIGVycm9yIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIGV4cHJlc3NFcnJvckhhbmRsZXIob3B0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gc2VudHJ5RXJyb3JNaWRkbGV3YXJlKFxuICAgIGVycm9yLFxuICAgIF9yZXEsXG4gICAgcmVzLFxuICAgIG5leHQsXG4gICkge1xuICAgIGNvbnN0IHNob3VsZEhhbmRsZUVycm9yID0gX29wdGlvbmFsQ2hhaW4oW29wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5zaG91bGRIYW5kbGVFcnJvcl0pIHx8IGRlZmF1bHRTaG91bGRIYW5kbGVFcnJvcjtcblxuICAgIGlmIChzaG91bGRIYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkuYXV0b1Nlc3Npb25UcmFja2luZykge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYFNlc3Npb25GbHVzaGVyYCBpcyBpbnN0YW50aWF0ZWQgb24gdGhlIGNsaWVudCB0byBnbyBpbnRvIHRoaXMgYnJhbmNoIHRoYXQgbWFya3MgdGhlXG4gICAgICAgIC8vIGByZXF1ZXN0U2Vzc2lvbi5zdGF0dXNgIGFzIGBDcmFzaGVkYCwgYW5kIHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGBTZXNzaW9uRmx1c2hlcmAgaXMgb25seVxuICAgICAgICAvLyBpbnN0YW50aWF0ZWQgd2hlbiB0aGUgdGhlYHJlcXVlc3RIYW5kbGVyYCBtaWRkbGV3YXJlIGlzIGluaXRpYWxpc2VkLCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGQgYmVcbiAgICAgICAgLy8gcnVubmluZyBpbiBTZXNzaW9uQWdncmVnYXRlcyBtb2RlXG4gICAgICAgIGNvbnN0IGlzU2Vzc2lvbkFnZ3JlZ2F0ZXNNb2RlID0gY2xpZW50Wydfc2Vzc2lvbkZsdXNoZXInXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaXNTZXNzaW9uQWdncmVnYXRlc01vZGUpIHtcbiAgICAgICAgICBjb25zdCByZXF1ZXN0U2Vzc2lvbiA9IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5nZXRSZXF1ZXN0U2Vzc2lvbigpO1xuICAgICAgICAgIC8vIElmIGFuIGVycm9yIGJ1YmJsZXMgdG8gdGhlIGBlcnJvckhhbmRsZXJgLCB0aGVuIHRoaXMgaXMgYW4gdW5oYW5kbGVkIGVycm9yLCBhbmQgc2hvdWxkIGJlIHJlcG9ydGVkIGFzIGFcbiAgICAgICAgICAvLyBDcmFzaGVkIHNlc3Npb24uIFRoZSBgX3JlcXVlc3RTZXNzaW9uLnN0YXR1c2AgaXMgY2hlY2tlZCB0byBlbnN1cmUgdGhhdCB0aGlzIGVycm9yIGlzIGhhcHBlbmluZyB3aXRoaW5cbiAgICAgICAgICAvLyB0aGUgYm91bmRzIG9mIGEgcmVxdWVzdCwgYW5kIGlmIHNvIHRoZSBzdGF0dXMgaXMgdXBkYXRlZFxuICAgICAgICAgIGlmIChyZXF1ZXN0U2Vzc2lvbiAmJiByZXF1ZXN0U2Vzc2lvbi5zdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVxdWVzdFNlc3Npb24uc3RhdHVzID0gJ2NyYXNoZWQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBldmVudElkID0gY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7IG1lY2hhbmlzbTogeyB0eXBlOiAnbWlkZGxld2FyZScsIGhhbmRsZWQ6IGZhbHNlIH0gfSk7XG4gICAgICAocmVzICkuc2VudHJ5ID0gZXZlbnRJZDtcbiAgICAgIG5leHQoZXJyb3IpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dChlcnJvcik7XG4gIH07XG59XG5cbi8qKlxuICogQWRkIGFuIEV4cHJlc3MgZXJyb3IgaGFuZGxlciB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogVGhlIGVycm9yIGhhbmRsZXIgbXVzdCBiZSBiZWZvcmUgYW55IG90aGVyIG1pZGRsZXdhcmUgYW5kIGFmdGVyIGFsbCBjb250cm9sbGVycy5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBFeHByZXNzIGluc3RhbmNlc1xuICogQHBhcmFtIG9wdGlvbnMge0V4cHJlc3NIYW5kbGVyT3B0aW9uc30gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaGFuZGxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbiAqXG4gKiBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gKlxuICogLy8gQWRkIHlvdXIgcm91dGVzLCBldGMuXG4gKlxuICogLy8gQWRkIHRoaXMgYWZ0ZXIgYWxsIHJvdXRlcyxcbiAqIC8vIGJ1dCBiZWZvcmUgYW55IGFuZCBvdGhlciBlcnJvci1oYW5kbGluZyBtaWRkbGV3YXJlcyBhcmUgZGVmaW5lZFxuICogU2VudHJ5LnNldHVwRXhwcmVzc0Vycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIGFwcC5saXN0ZW4oMzAwMCk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gc2V0dXBFeHByZXNzRXJyb3JIYW5kbGVyKFxuICBhcHAsXG4gIG9wdGlvbnMsXG4pIHtcbiAgYXBwLnVzZShleHByZXNzRXJyb3JIYW5kbGVyKG9wdGlvbnMpKTtcbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAnZXhwcmVzcycpO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbVJlc3BvbnNlKGVycm9yKSB7XG4gIGNvbnN0IHN0YXR1c0NvZGUgPSBlcnJvci5zdGF0dXMgfHwgZXJyb3Iuc3RhdHVzQ29kZSB8fCBlcnJvci5zdGF0dXNfY29kZSB8fCAoZXJyb3Iub3V0cHV0ICYmIGVycm9yLm91dHB1dC5zdGF0dXNDb2RlKTtcbiAgcmV0dXJuIHN0YXR1c0NvZGUgPyBwYXJzZUludChzdGF0dXNDb2RlICwgMTApIDogNTAwO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHJlc3BvbnNlIGNvZGUgaXMgaW50ZXJuYWwgc2VydmVyIGVycm9yICovXG5mdW5jdGlvbiBkZWZhdWx0U2hvdWxkSGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgY29uc3Qgc3RhdHVzID0gZ2V0U3RhdHVzQ29kZUZyb21SZXNwb25zZShlcnJvcik7XG4gIHJldHVybiBzdGF0dXMgPj0gNTAwO1xufVxuXG5leHBvcnRzLmV4cHJlc3NFcnJvckhhbmRsZXIgPSBleHByZXNzRXJyb3JIYW5kbGVyO1xuZXhwb3J0cy5leHByZXNzSW50ZWdyYXRpb24gPSBleHByZXNzSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRFeHByZXNzID0gaW5zdHJ1bWVudEV4cHJlc3M7XG5leHBvcnRzLnNldHVwRXhwcmVzc0Vycm9ySGFuZGxlciA9IHNldHVwRXhwcmVzc0Vycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cHJlc3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fastify@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastify = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationFastify.FastifyInstrumentation({\n      requestHook(span) {\n        addFastifySpanAttributes(span);\n      },\n    }),\n);\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (_request, _reply, error) => {\n        core.captureException(error);\n      });\n\n      // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n      // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n      // https://fastify.dev/docs/latest/Reference/Lifecycle/\n      fastify.addHook('onRequest', async (request, _reply) => {\n        const reqWithRouteInfo = request ;\n\n        // Taken from Otel Fastify instrumentation:\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n        const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n        const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n\n        core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\n\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=fastify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.39.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan =\n          spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsbUNBQW1DLG1CQUFPLENBQUMsa1BBQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7O0FBRXJEOztBQUVBLG9KQUFvSjs7QUFFcEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzPzJmNGEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR2VuZXJpY1Bvb2wnO1xuXG5jb25zdCBpbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sLkdlbmVyaWNQb29sSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9nZW5lcmljUG9vbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRHZW5lcmljUG9vbCgpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgICAgIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNwYW5KU09OLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgIC8vIHR5cG8gaW4gZW1pdHRlZCBzcGFuIGZvciB2ZXJzaW9uIDw9IDAuMzguMCBvZiBAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sXG4gICAgICAgIGNvbnN0IGlzR2VuZXJpY1Bvb2xTcGFuID1cbiAgICAgICAgICBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYXF1aXJlJyB8fCBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYWNxdWlyZSc7XG5cbiAgICAgICAgaWYgKGlzR2VuZXJpY1Bvb2xTcGFuKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5nZW5lcmljX3Bvb2wnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtnZW5lcmljLXBvb2xdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dlbmVyaWMtcG9vbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGdlbmVyaWNQb29sSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZ2VuZXJpY3Bvb2wvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5nZW5lcmljUG9vbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dlbmVyaWNQb29sSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBnZW5lcmljUG9vbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50R2VuZXJpY1Bvb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmljUG9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (_options = {}) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return new instrumentationGraphql.GraphQLInstrumentation({\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data || {};\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n\n          // We guard to only do this on http.server spans\n\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            existingOperations.push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (existingOperations) {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n        }\n      },\n    });\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dyYXBocWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyxtT0FBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLG1QQUF1QjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLGtEQUFrRCxlQUFlLEVBQUUsY0FBYyxPQUFPLGNBQWM7O0FBRXRHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcz8yMmRkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdyYXBocWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR3JhcGhxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHcmFwaHFsID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoX29wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRPcHRpb25zV2l0aERlZmF1bHRzKF9vcHRpb25zKTtcblxuICAgIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uR3JhcGhxbC5HcmFwaFFMSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmdyYXBocWwub3RlbC5ncmFwaHFsJyk7XG5cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gICAgICAgIC8vIElmIG9wZXJhdGlvbi5uYW1lIGlzIG5vdCBzZXQsIHdlIGZhbGwgYmFjayB0byB1c2Ugb3BlcmF0aW9uLnR5cGUgb25seVxuICAgICAgICBjb25zdCBvcGVyYXRpb25UeXBlID0gYXR0cmlidXRlc1snZ3JhcGhxbC5vcGVyYXRpb24udHlwZSddO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25OYW1lID0gYXR0cmlidXRlc1snZ3JhcGhxbC5vcGVyYXRpb24ubmFtZSddO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnVzZU9wZXJhdGlvbk5hbWVGb3JSb290U3BhbiAmJiBvcGVyYXRpb25UeXBlKSB7XG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKHNwYW4pO1xuXG4gICAgICAgICAgLy8gV2UgZ3VhcmQgdG8gb25seSBkbyB0aGlzIG9uIGh0dHAuc2VydmVyIHNwYW5zXG5cbiAgICAgICAgICBjb25zdCByb290U3BhbkF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRhdGEgfHwge307XG5cbiAgICAgICAgICBjb25zdCBleGlzdGluZ09wZXJhdGlvbnMgPSByb290U3BhbkF0dHJpYnV0ZXNbb3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OXSB8fCBbXTtcblxuICAgICAgICAgIGNvbnN0IG5ld09wZXJhdGlvbiA9IG9wZXJhdGlvbk5hbWUgPyBgJHtvcGVyYXRpb25UeXBlfSAke29wZXJhdGlvbk5hbWV9YCA6IGAke29wZXJhdGlvblR5cGV9YDtcblxuICAgICAgICAgIC8vIFdlIGtlZXAgdHJhY2sgb2YgZWFjaCBvcGVyYXRpb24gb24gdGhlIHJvb3Qgc3BhblxuICAgICAgICAgIC8vIFRoaXMgY2FuIGVpdGhlciBiZSBhIHN0cmluZywgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyAoaWYgdGhlcmUgYXJlIG11bHRpcGxlIG9wZXJhdGlvbnMpXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmdPcGVyYXRpb25zKSkge1xuICAgICAgICAgICAgZXhpc3RpbmdPcGVyYXRpb25zLnB1c2gobmV3T3BlcmF0aW9uKTtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIGV4aXN0aW5nT3BlcmF0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChleGlzdGluZ09wZXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIFtleGlzdGluZ09wZXJhdGlvbnMsIG5ld09wZXJhdGlvbl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUob3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OLCBuZXdPcGVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbik7XG5cbmNvbnN0IF9ncmFwaHFsSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gV2Ugc2V0IGRlZmF1bHRzIGhlcmUsIHRvbywgYmVjYXVzZSBvdGhlcndpc2Ugd2UnZCB1cGRhdGUgdGhlIGluc3RydW1lbnRhdGlvbiBjb25maWdcbiAgICAgIC8vIHRvIHRoZSBjb25maWcgd2l0aG91dCBkZWZhdWx0cywgYXMgYGdlbmVyYXRlSW5zdHJ1bWVudE9uY2VgIGF1dG9tYXRpY2FsbHkgY2FsbHMgYHNldENvbmZpZyhvcHRpb25zKWBcbiAgICAgIC8vIHdoZW4gYmVpbmcgY2FsbGVkIHRoZSBzZWNvbmQgdGltZVxuICAgICAgaW5zdHJ1bWVudEdyYXBocWwoZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtncmFwaHFsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9ncmFwaHFsKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ3JhcGhxbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2dyYXBocWwvKS5cbiAqXG4gKiBAcGFyYW0ge0dyYXBocWxPcHRpb25zfSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEdyYXBoUUwgaW50ZWdyYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZ3JhcGhxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGdyYXBocWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dyYXBocWxJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGlnbm9yZVJlc29sdmVTcGFuczogdHJ1ZSxcbiAgICBpZ25vcmVUcml2aWFsUmVzb2x2ZVNwYW5zOiB0cnVlLFxuICAgIHVzZU9wZXJhdGlvbk5hbWVGb3JSb290U3BhbjogdHJ1ZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xufVxuXG5leHBvcnRzLmdyYXBocWxJbnRlZ3JhdGlvbiA9IGdyYXBocWxJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEdyYXBocWwgPSBpbnN0cnVtZW50R3JhcGhxbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return event && (event ).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hhcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDRCQUE0QixtQkFBTyxDQUFDLDBOQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsNklBQXlCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLHFKQUE2QjtBQUN4RCx3QkFBd0IsbUJBQU8sQ0FBQyxpS0FBbUM7O0FBRW5FOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsdUhBQXVILEVBQUUsV0FBVztBQUM3TDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7QUFDSDs7QUFFQSx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcz80NjllIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIYXBpJztcblxuY29uc3QgaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkhhcGkuSGFwaUluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2hhcGlJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50SGFwaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtIYXBpXShodHRwczovL2hhcGkuZGV2LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcilgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2hhcGkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvaGFwaS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5oYXBpSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGhhcGlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hhcGlJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGlzRXJyb3JFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQgJiYgKGV2ZW50ICkuZXJyb3IgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc2VuZEVycm9yVG9TZW50cnkoZXJyb3JEYXRhKSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvckRhdGEsIHtcbiAgICBtZWNoYW5pc206IHtcbiAgICAgIHR5cGU6ICdoYXBpJyxcbiAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgZGF0YToge1xuICAgICAgICBmdW5jdGlvbjogJ2hhcGlFcnJvclBsdWdpbicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5jb25zdCBoYXBpRXJyb3JQbHVnaW4gPSB7XG4gIG5hbWU6ICdTZW50cnlIYXBpRXJyb3JQbHVnaW4nLFxuICB2ZXJzaW9uOiBjb3JlLlNES19WRVJTSU9OLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWdpc3RlcjogYXN5bmMgZnVuY3Rpb24gKHNlcnZlckFyZykge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlckFyZyA7XG5cbiAgICBzZXJ2ZXIuZXZlbnRzLm9uKHsgbmFtZTogJ3JlcXVlc3QnLCBjaGFubmVsczogWydlcnJvciddIH0sIChyZXF1ZXN0LCBldmVudCkgPT4ge1xuICAgICAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSAhPT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgICAgICBjb25zdCByb3V0ZSA9IHJlcXVlc3Qucm91dGU7XG4gICAgICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5wYXRoKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHtfb3B0aW9uYWxDaGFpbihbcm91dGUsICdhY2Nlc3MnLCBfID0+IF8ubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfMyA9PiBfMygpXSkgfHwgJ0dFVCd9ICR7cm91dGUucGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBzdGlsbCB0aGUgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFcnJvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICBzZW5kRXJyb3JUb1NlbnRyeShldmVudC5lcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIEFkZCBhIEhhcGkgcGx1Z2luIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gc2VydmVyIFRoZSBIYXBpIHNlcnZlciB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBIYXBpID0gcmVxdWlyZSgnQGhhcGkvaGFwaScpO1xuICpcbiAqIGNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XG4gKiAgIGNvbnN0IHNlcnZlciA9IEhhcGkuc2VydmVyKCk7XG4gKlxuICogICAvLyBhbGwgeW91ciByb3V0ZXMgaGVyZVxuICpcbiAqICAgYXdhaXQgU2VudHJ5LnNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpO1xuICpcbiAqICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpIHtcbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGhhcGlFcnJvclBsdWdpbik7XG5cbiAgLy8gU2FkbHksIG1pZGRsZXdhcmUgc3BhbnMgZG8gbm90IGdvIHRocm91Z2ggYHJlcXVlc3RIb29rYCwgc28gd2UgaGFuZGxlIHRob3NlIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGhhcGlcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoc2VydmVyLnJlZ2lzdGVyLCAnaGFwaScpO1xufVxuXG5mdW5jdGlvbiBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IHJvdXRlciwgcGx1Z2luLCBzZXJ2ZXIuZXh0XG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydoYXBpLnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIEhhcGkgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmhhcGknLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5oYXBpYCxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaGFwaUVycm9yUGx1Z2luID0gaGFwaUVycm9yUGx1Z2luO1xuZXhwb3J0cy5oYXBpSW50ZWdyYXRpb24gPSBoYXBpSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRIYXBpID0gaW5zdHJ1bWVudEhhcGk7XG5leHBvcnRzLnNldHVwSGFwaUVycm9ySGFuZGxlciA9IHNldHVwSGFwaUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index$1 = __webpack_require__(/*! ../http/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    fastify.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    // For now, we do not include prisma by default because it has ESM issues\n    // See https://github.com/prisma/prisma/issues/23410\n    // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n    // prismaIntegration(),\n    // eslint-disable-next-line deprecation/deprecation\n    nest.nestIntegration(),\n    index.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index$1.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    fastify.instrumentFastify,\n    index.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    // eslint-disable-next-line deprecation/deprecation\n    nest.instrumentNest,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsZ0JBQWdCLG1CQUFPLENBQUMsa0pBQWtCO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLG1KQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLG1KQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLG1KQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLG1KQUFjO0FBQ3RDLG9CQUFvQixtQkFBTyxDQUFDLDJKQUFrQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQyxtSkFBYztBQUN0QyxjQUFjLG1CQUFPLENBQUMseUpBQWlCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQywrSUFBWTtBQUNsQyxZQUFZLG1CQUFPLENBQUMsMklBQVU7QUFDOUIsb0JBQW9CLG1CQUFPLENBQUMsMkpBQWtCO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQywrSUFBWTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxxSkFBZTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsK0lBQVk7QUFDbEMsZUFBZSxtQkFBTyxDQUFDLGlKQUFhO0FBQ3BDLGFBQWEsbUJBQU8sQ0FBQyx1SkFBZ0I7QUFDckMsaUJBQWlCLG1CQUFPLENBQUMscUpBQWU7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLCtJQUFZO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLG1KQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEMsZ0RBQWdEO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzP2NjYzkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2h0dHAvaW5kZXguanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCcuL2V4cHJlc3MuanMnKTtcbmNvbnN0IGZhc3RpZnkgPSByZXF1aXJlKCcuL2Zhc3RpZnkuanMnKTtcbmNvbnN0IGdlbmVyaWNQb29sID0gcmVxdWlyZSgnLi9nZW5lcmljUG9vbC5qcycpO1xuY29uc3QgZ3JhcGhxbCA9IHJlcXVpcmUoJy4vZ3JhcGhxbC5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2hhcGkvaW5kZXguanMnKTtcbmNvbnN0IGthZmthID0gcmVxdWlyZSgnLi9rYWZrYS5qcycpO1xuY29uc3Qga29hID0gcmVxdWlyZSgnLi9rb2EuanMnKTtcbmNvbnN0IGxydW1lbW9pemVyID0gcmVxdWlyZSgnLi9scnVtZW1vaXplci5qcycpO1xuY29uc3QgbW9uZ28gPSByZXF1aXJlKCcuL21vbmdvLmpzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJy4vbW9uZ29vc2UuanMnKTtcbmNvbnN0IG15c3FsID0gcmVxdWlyZSgnLi9teXNxbC5qcycpO1xuY29uc3QgbXlzcWwyID0gcmVxdWlyZSgnLi9teXNxbDIuanMnKTtcbmNvbnN0IG5lc3QgPSByZXF1aXJlKCcuL25lc3QvbmVzdC5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL3Bvc3RncmVzLmpzJyk7XG5jb25zdCByZWRpcyA9IHJlcXVpcmUoJy4vcmVkaXMuanMnKTtcbmNvbnN0IHRlZGlvdXMgPSByZXF1aXJlKCcuL3RlZGlvdXMuanMnKTtcblxuLyoqXG4gKiBXaXRoIE9URUwsIGFsbCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgd2lsbCBiZSBhZGRlZCwgYXMgT1RFTCBvbmx5IGluaXRpYWxpemVzIHRoZW0gd2hlbiB0aGUgcGF0Y2hlZCBwYWNrYWdlIGlzIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG5mdW5jdGlvbiBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSB7XG4gIHJldHVybiBbXG4gICAgZXhwcmVzcy5leHByZXNzSW50ZWdyYXRpb24oKSxcbiAgICBmYXN0aWZ5LmZhc3RpZnlJbnRlZ3JhdGlvbigpLFxuICAgIGdyYXBocWwuZ3JhcGhxbEludGVncmF0aW9uKCksXG4gICAgbW9uZ28ubW9uZ29JbnRlZ3JhdGlvbigpLFxuICAgIG1vbmdvb3NlLm1vbmdvb3NlSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbC5teXNxbEludGVncmF0aW9uKCksXG4gICAgbXlzcWwyLm15c3FsMkludGVncmF0aW9uKCksXG4gICAgcmVkaXMucmVkaXNJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzLnBvc3RncmVzSW50ZWdyYXRpb24oKSxcbiAgICAvLyBGb3Igbm93LCB3ZSBkbyBub3QgaW5jbHVkZSBwcmlzbWEgYnkgZGVmYXVsdCBiZWNhdXNlIGl0IGhhcyBFU00gaXNzdWVzXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlcy8yMzQxMFxuICAgIC8vIFRPRE8gdjg6IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgc29sdXRpb24gZm9yIHRoaXMsIG1heWJlIG9ubHkgZGlzYWJsZSBpbiBFU00gbW9kZT9cbiAgICAvLyBwcmlzbWFJbnRlZ3JhdGlvbigpLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG5lc3QubmVzdEludGVncmF0aW9uKCksXG4gICAgaW5kZXguaGFwaUludGVncmF0aW9uKCksXG4gICAga29hLmtvYUludGVncmF0aW9uKCksXG4gICAgY29ubmVjdC5jb25uZWN0SW50ZWdyYXRpb24oKSxcbiAgICB0ZWRpb3VzLnRlZGlvdXNJbnRlZ3JhdGlvbigpLFxuICAgIGdlbmVyaWNQb29sLmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKSxcbiAgICBrYWZrYS5rYWZrYUludGVncmF0aW9uKCksXG4gICAgYW1xcGxpYi5hbXFwbGliSW50ZWdyYXRpb24oKSxcbiAgICBscnVtZW1vaXplci5scnVNZW1vaXplckludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBtZXRob2RzIHRvIGluc3RydW1lbnQgT1RFTCwgd2hlbiBwcmVsb2FkIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQoKSB7XG4gIHJldHVybiBbXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50T3RlbEh0dHAsXG4gICAgZXhwcmVzcy5pbnN0cnVtZW50RXhwcmVzcyxcbiAgICBjb25uZWN0Lmluc3RydW1lbnRDb25uZWN0LFxuICAgIGZhc3RpZnkuaW5zdHJ1bWVudEZhc3RpZnksXG4gICAgaW5kZXguaW5zdHJ1bWVudEhhcGksXG4gICAga2Fma2EuaW5zdHJ1bWVudEthZmthLFxuICAgIGtvYS5pbnN0cnVtZW50S29hLFxuICAgIGxydW1lbW9pemVyLmluc3RydW1lbnRMcnVNZW1vaXplcixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBuZXN0Lmluc3RydW1lbnROZXN0LFxuICAgIG1vbmdvLmluc3RydW1lbnRNb25nbyxcbiAgICBtb25nb29zZS5pbnN0cnVtZW50TW9uZ29vc2UsXG4gICAgbXlzcWwuaW5zdHJ1bWVudE15c3FsLFxuICAgIG15c3FsMi5pbnN0cnVtZW50TXlzcWwyLFxuICAgIHBvc3RncmVzLmluc3RydW1lbnRQb3N0Z3JlcyxcbiAgICBpbmRleC5pbnN0cnVtZW50SGFwaSxcbiAgICBncmFwaHFsLmluc3RydW1lbnRHcmFwaHFsLFxuICAgIHJlZGlzLmluc3RydW1lbnRSZWRpcyxcbiAgICB0ZWRpb3VzLmluc3RydW1lbnRUZWRpb3VzLFxuICAgIGdlbmVyaWNQb29sLmluc3RydW1lbnRHZW5lcmljUG9vbCxcbiAgICBhbXFwbGliLmluc3RydW1lbnRBbXFwbGliLFxuICBdO1xufVxuXG5leHBvcnRzLmdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucyA9IGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucztcbmV4cG9ydHMuZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCA9IGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.4.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2thZmthLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsa09BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanM/MDI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LYWZrYWpzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWthZmthanMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0thZmthJztcblxuY29uc3QgaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25LYWZrYWpzLkthZmthSnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgY29uc3VtZXJIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwuY29uc3VtZXInKTtcbiAgICAgIH0sXG4gICAgICBwcm9kdWNlckhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5wcm9kdWNlcicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9rYWZrYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLYWZrYSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBba2Fma2Fqc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uva2Fma2FqcykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGthZmthSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMva2Fma2EvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5rYWZrYUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGthZmthSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9rYWZrYUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S2Fma2EgPSBpbnN0cnVtZW50S2Fma2E7XG5leHBvcnRzLmthZmthSW50ZWdyYXRpb24gPSBrYWZrYUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2Fma2EuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKnex();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { data } = core.spanToJSON(span);\n        // knex.version is always set in the span data\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n        if (data && 'knex.version' in data) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw0QkFBNEIsbUJBQU8sQ0FBQywwTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanM/NDZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LbmV4ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtuZXgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLbmV4JztcblxuY29uc3QgaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25LbmV4LktuZXhJbnN0cnVtZW50YXRpb24oeyByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSB9KSxcbik7XG5cbmNvbnN0IF9rbmV4SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEtuZXgoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgLy8ga25leC52ZXJzaW9uIGlzIGFsd2F5cyBzZXQgaW4gdGhlIHNwYW4gZGF0YVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvMDMwOWNhZWFmYzQ0YWM5Y2IxM2EzMzQ1Yjc5MGIwMWI3NmQwNDk3ZC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24ta25leC9zcmMvaW5zdHJ1bWVudGF0aW9uLnRzI0wxMzhcbiAgICAgICAgaWYgKGRhdGEgJiYgJ2tuZXgudmVyc2lvbicgaW4gZGF0YSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwua25leCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEtuZXggaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgW0tuZXhdKGh0dHBzOi8va25leGpzLm9yZy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtuZXhJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGtuZXhJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tuZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50S25leDtcbmV4cG9ydHMua25leEludGVncmF0aW9uID0ga25leEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a25leC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKoa.KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = core.spanToJSON(span).data;\n        const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tvYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMkJBQTJCLG1CQUFPLENBQUMsdU5BQW9DO0FBQ3ZFLDRCQUE0QixtQkFBTyxDQUFDLGlNQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMElBQXNCO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLGtKQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw4SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxFQUFFLE1BQU07QUFDekU7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDREQUE0RCxLQUFLO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzPzljMGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS29hID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtvYScpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tvYSc7XG5cbmNvbnN0IGluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbktvYS5Lb2FJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWVzdEhvb2soc3BhbiwgaW5mbykge1xuICAgICAgICBhZGRLb2FTcGFuQXR0cmlidXRlcyhzcGFuKTtcblxuICAgICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpID09PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JPVVRFXTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBjb25zdCBtZXRob2QgPSBfb3B0aW9uYWxDaGFpbihbaW5mbywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmNvbnRleHQsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnJlcXVlc3QsICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zLm1ldGhvZCwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQudG9VcHBlckNhc2UsICdjYWxsJywgXzUgPT4gXzUoKV0pIHx8ICdHRVQnO1xuICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtyb3V0ZX1gKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9rb2FJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S29hKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0tvYV0oaHR0cHM6Ly9rb2Fqcy5jb20vKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEtvYUVycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgS29hIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBba29hIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2tvYS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5rb2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3Qga29hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9rb2FJbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogQWRkIGFuIEtvYSBlcnJvciBoYW5kbGVyIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBUaGUgZXJyb3IgaGFuZGxlciBtdXN0IGJlIGJlZm9yZSBhbnkgb3RoZXIgbWlkZGxld2FyZSBhbmQgYWZ0ZXIgYWxsIGNvbnRyb2xsZXJzLlxuICpcbiAqIEBwYXJhbSBhcHAgVGhlIEV4cHJlc3MgaW5zdGFuY2VzXG4gKiBAcGFyYW0gb3B0aW9ucyB7RXhwcmVzc0hhbmRsZXJPcHRpb25zfSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBoYW5kbGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICogY29uc3QgS29hID0gcmVxdWlyZShcImtvYVwiKTtcbiAqXG4gKiBjb25zdCBhcHAgPSBuZXcgS29hKCk7XG4gKlxuICogU2VudHJ5LnNldHVwS29hRXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdXIgcm91dGVzLCBldGMuXG4gKlxuICogYXBwLmxpc3RlbigzMDAwKTtcbiAqIGBgYFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3Qgc2V0dXBLb2FFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBuZXh0KCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2tvYScpO1xufTtcblxuZnVuY3Rpb24gYWRkS29hU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5odHRwLm90ZWwua29hJyk7XG5cbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhIHx8IHt9O1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByb3V0ZXJcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2tvYS50eXBlJ107XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsIGAke3R5cGV9LmtvYWApO1xuICB9XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWVcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2tvYS5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBTb21laG93LCBuYW1lIGlzIHNvbWV0aW1lcyBgJydgIGZvciBtaWRkbGV3YXJlIHNwYW5zXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2lzc3Vlcy8yMjIwXG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUgfHwgJzwgdW5rbm93biA+Jyk7XG4gIH1cbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50S29hID0gaW5zdHJ1bWVudEtvYTtcbmV4cG9ydHMua29hSW50ZWdyYXRpb24gPSBrb2FJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBLb2FFcnJvckhhbmRsZXIgPSBzZXR1cEtvYUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtvYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsbUNBQW1DLG1CQUFPLENBQUMsa1BBQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7O0FBRXJEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzP2Y4NzUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTHJ1TWVtb2l6ZXInO1xuXG5jb25zdCBpbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50THJ1TWVtb2l6ZXIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2xydS1tZW1vaXplcl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbHJ1LW1lbW9pemVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9scnVtZW1vaXplci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmxydU1lbW9pemVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2xydU1lbW9pemVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnRMcnVNZW1vaXplcjtcbmV4cG9ydHMubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGxydU1lbW9pemVySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnVtZW1vaXplci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsbU9BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQyx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzP2YyODgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nbyc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYi5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGRiU3RhdGVtZW50U2VyaWFsaXplcjogX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ28nKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG4vKipcbiAqIFJlcGxhY2VzIHZhbHVlcyBpbiBkb2N1bWVudCB3aXRoICc/JywgaGlkaW5nIFBJSSBhbmQgaGVscGluZyBncm91cGluZy5cbiAqL1xuZnVuY3Rpb24gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIoY29tbWFuZE9iaikge1xuICBjb25zdCByZXN1bHRPYmogPSBfc2NydWJTdGF0ZW1lbnQoY29tbWFuZE9iaik7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHRPYmopO1xufVxuXG5mdW5jdGlvbiBfc2NydWJTdGF0ZW1lbnQodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChlbGVtZW50ID0+IF9zY3J1YlN0YXRlbWVudChlbGVtZW50KSk7XG4gIH1cblxuICBpZiAoaXNDb21tYW5kT2JqKHZhbHVlKSkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7fTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAubWFwKChba2V5LCBlbGVtZW50XSkgPT4gW2tleSwgX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpXSlcbiAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgaWYgKGlzQ29tbWFuZEVudHJ5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgcHJldltjdXJyZW50WzBdXSA9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCBpbml0aWFsKTtcbiAgfVxuXG4gIC8vIEEgdmFsdWUgbGlrZSBzdHJpbmcgb3IgbnVtYmVyLCBwb3NzaWJsZSBjb250YWlucyBQSUksIHNjcnViIGl0XG4gIHJldHVybiAnPyc7XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZE9iaih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhaXNCdWZmZXIodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWx1ZSkge1xuICBsZXQgaXNCdWZmZXIgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIodmFsdWUpO1xuICB9XG4gIHJldHVybiBpc0J1ZmZlcjtcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kRW50cnkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5jb25zdCBfbW9uZ29JbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ28oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW21vbmdvZGJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvZGIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29JbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5fZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplciA9IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyO1xuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50TW9uZ287XG5leHBvcnRzLm1vbmdvSW50ZWdyYXRpb24gPSBtb25nb0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ28uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvb3NlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsZ0NBQWdDLG1CQUFPLENBQUMsc09BQXlDO0FBQ2pGLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanM/Y2RlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb29zZSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ29vc2UnO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlLk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nb29zZScpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb29zZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nb29zZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29vc2VdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvb3NlKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbW9uZ29vc2VJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9tb25nb29zZS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm1vbmdvb3NlSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBtb25nb29zZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29vc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudE1vbmdvb3NlO1xuZXhwb3J0cy5tb25nb29zZUludGVncmF0aW9uID0gbW9uZ29vc2VJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvb3NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsNkJBQTZCLG1CQUFPLENBQUMsNk5BQXNDO0FBQzNFLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7O0FBRXJEOztBQUVBLGtJQUFrSTs7QUFFbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcz9iMTIxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwnO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbk15c3FsLk15U1FMSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9teXNxbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbXlzcWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWxJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9teXNxbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWxJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudE15c3FsO1xuZXhwb3J0cy5teXNxbEludGVncmF0aW9uID0gbXlzcWxJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDhCQUE4QixtQkFBTyxDQUFDLGdPQUF1QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsa0pBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDhKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcz8xODNlIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsMiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsMic7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk15c3FsMi5NeVNRTDJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm15c3FsMicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9teXNxbDJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbDJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsMikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsMkludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsMi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbDJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsMkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudE15c3FsMjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsMi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n\n  core.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => ( target.name)); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs',\n    },\n  };\n}\n\n/**\n * Returns span options for nest event spans.\n */\nfunction getEventSpanOptions(event)\n\n {\n  return {\n    name: `event ${event}`,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'event.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.event.nestjs',\n    },\n    forceTransaction: true,\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    },\n  });\n}\n\nexports.getEventSpanOptions = getEventSpanOptions;\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3QvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsTUFBTTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwyQkFBMkI7QUFDM0IsZ0NBQWdDO0FBQ2hDLG9CQUFvQjtBQUNwQiw0QkFBNEI7QUFDNUIsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL25lc3QvaGVscGVycy5qcz9kYzUxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBzZW50cnlQYXRjaGVkID0gJ3NlbnRyeVBhdGNoZWQnO1xuXG4vKipcbiAqIEhlbHBlciBjaGVja2luZyBpZiBhIGNvbmNyZXRlIHRhcmdldCBjbGFzcyBpcyBhbHJlYWR5IHBhdGNoZWQuXG4gKlxuICogV2UgYWxyZWFkeSBndWFyZCBkdXBsaWNhdGUgcGF0Y2hpbmcgd2l0aCBpc1dyYXBwZWQuIEhvd2V2ZXIsIGlzV3JhcHBlZCBjaGVja3Mgd2hldGhlciBhIGZpbGUgaGFzIGJlZW4gcGF0Y2hlZCwgd2hlcmVhcyB3ZSB1c2UgdGhpcyBjaGVjayBmb3IgY29uY3JldGUgdGFyZ2V0IGNsYXNzZXMuXG4gKiBUaGlzIGNoZWNrIG1pZ2h0IG5vdCBiZSBuZWNlc3NhcnksIGJ1dCBiZXR0ZXIgdG8gcGxheSBpdCBzYWZlLlxuICovXG5mdW5jdGlvbiBpc1BhdGNoZWQodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQuc2VudHJ5UGF0Y2hlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29yZS5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkodGFyZ2V0LCBzZW50cnlQYXRjaGVkLCB0cnVlKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgc3BhbiBvcHRpb25zIGZvciBuZXN0IG1pZGRsZXdhcmUgc3BhbnMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGVcbmZ1bmN0aW9uIGdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucyh0YXJnZXQsIG5hbWUgPSB1bmRlZmluZWQpIHtcbiAgY29uc3Qgc3Bhbl9uYW1lID0gX251bGxpc2hDb2FsZXNjZShuYW1lLCAoKSA9PiAoIHRhcmdldC5uYW1lKSk7IC8vIGZhbGxiYWNrIHRvIGNsYXNzIG5hbWUgaWYgbm8gbmFtZSBpcyBwcm92aWRlZFxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogc3Bhbl9uYW1lLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnbWlkZGxld2FyZS5uZXN0anMnLFxuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5taWRkbGV3YXJlLm5lc3RqcycsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHNwYW4gb3B0aW9ucyBmb3IgbmVzdCBldmVudCBzcGFucy5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRTcGFuT3B0aW9ucyhldmVudClcblxuIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBgZXZlbnQgJHtldmVudH1gLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnZXZlbnQubmVzdGpzJyxcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZXZlbnQubmVzdGpzJyxcbiAgICB9LFxuICAgIGZvcmNlVHJhbnNhY3Rpb246IHRydWUsXG4gIH07XG59XG5cbi8qKlxuICogQWRkcyBpbnN0cnVtZW50YXRpb24gdG8gYSBqcyBvYnNlcnZhYmxlIGFuZCBhdHRhY2hlcyB0aGUgc3BhbiB0byBhbiBhY3RpdmUgcGFyZW50IHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRPYnNlcnZhYmxlKG9ic2VydmFibGUsIGFjdGl2ZVNwYW4pIHtcbiAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUgPSBuZXcgUHJveHkob2JzZXJ2YWJsZS5zdWJzY3JpYmUsIHtcbiAgICAgIGFwcGx5OiAob3JpZ2luYWxTdWJzY3JpYmUsIHRoaXNBcmdTdWJzY3JpYmUsIGFyZ3NTdWJzY3JpYmUpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aEFjdGl2ZVNwYW4oYWN0aXZlU3BhbiwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG9yaWdpbmFsU3Vic2NyaWJlLmFwcGx5KHRoaXNBcmdTdWJzY3JpYmUsIGFyZ3NTdWJzY3JpYmUpO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5hZGQoKCkgPT4gYWN0aXZlU3Bhbi5lbmQoKSk7XG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUHJveGllcyB0aGUgbmV4dCgpIGNhbGwgaW4gYSBuZXN0anMgbWlkZGxld2FyZSB0byBlbmQgdGhlIHNwYW4gd2hlbiBpdCBpcyBjYWxsZWQuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRQcm94eShuZXh0LCBzcGFuLCBwcmV2U3Bhbikge1xuICByZXR1cm4gbmV3IFByb3h5KG5leHQsIHtcbiAgICBhcHBseTogKG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KSA9PiB7XG4gICAgICBzcGFuLmVuZCgpO1xuXG4gICAgICBpZiAocHJldlNwYW4pIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aEFjdGl2ZVNwYW4ocHJldlNwYW4sICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseShvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmdldEV2ZW50U3Bhbk9wdGlvbnMgPSBnZXRFdmVudFNwYW5PcHRpb25zO1xuZXhwb3J0cy5nZXRNaWRkbGV3YXJlU3Bhbk9wdGlvbnMgPSBnZXRNaWRkbGV3YXJlU3Bhbk9wdGlvbnM7XG5leHBvcnRzLmdldE5leHRQcm94eSA9IGdldE5leHRQcm94eTtcbmV4cG9ydHMuaW5zdHJ1bWVudE9ic2VydmFibGUgPSBpbnN0cnVtZW50T2JzZXJ2YWJsZTtcbmV4cG9ydHMuaXNQYXRjaGVkID0gaXNQYXRjaGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-nestjs-core@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestEventInstrumentation = __webpack_require__(/*! ./sentry-nest-event-instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Nest';\n\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\n\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\n\nconst instrumentNestEvent = instrument.generateInstrumentOnce('Nest-Event', () => {\n  return new sentryNestEventInstrumentation.SentryNestEventInstrumentation();\n});\n\nconst instrumentNest = Object.assign(\n  () => {\n    instrumentNestCore();\n    instrumentNestCommon();\n    instrumentNestEvent();\n  },\n  { id: INTEGRATION_NAME },\n);\n\n/**\n * Integration capturing tracing data for NestJS.\n *\n * @deprecated The `nestIntegration` is deprecated. Instead, use the NestJS SDK directly (`@sentry/nestjs`), or use the `nestIntegration` export from `@sentry/nestjs`.\n */\nconst nestIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    },\n  };\n});\n\n/**\n * Setup an error handler for Nest.\n *\n * @deprecated `setupNestErrorHandler` is deprecated.\n * Instead use the `@sentry/nestjs` package, which has more functional APIs for capturing errors.\n * See the [`@sentry/nestjs` Setup Guide](https://docs.sentry.io/platforms/javascript/guides/nestjs/) for how to set up the Sentry NestJS SDK.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[Sentry] Warning: You used the `setupNestErrorHandler()` method to set up Sentry error monitoring. This function is deprecated and will be removed in the next major version. Instead, it is recommended to use the `@sentry/nestjs` package. To set up the NestJS SDK see: https://docs.sentry.io/platforms/javascript/guides/nestjs/',\n    );\n  });\n\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        core.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n\n      if (context.getType() === 'http') {\n        const req = context.switchToHttp().getRequest();\n        if (req.route) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n\n      return next.handle();\n    },\n  });\n\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n\n  app.useGlobalFilters(wrappedFilter);\n}\n\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;\n//# sourceMappingURL=nest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMEJBQTBCLG1CQUFPLENBQUMsb05BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsOEpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcz9lY2JkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblBnID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXBnJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQb3N0Z3Jlcyc7XG5cbmNvbnN0IGluc3RydW1lbnRQb3N0Z3JlcyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uUGcuUGdJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5wb3N0Z3JlcycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9wb3N0Z3Jlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQb3N0Z3JlcygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcGddKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BnKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcG9zdGdyZXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wb3N0Z3Jlcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnBvc3RncmVzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBwb3N0Z3Jlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcG9zdGdyZXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudFBvc3RncmVzO1xuZXhwb3J0cy5wb3N0Z3Jlc0ludGVncmF0aW9uID0gcG9zdGdyZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvc3RncmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@prisma+instrumentation@5.19.1/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n    // @ts-expect-error We need to do the following for interop reasons\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n\n  return new EsmInteropPrismaInstrumentation({});\n});\n\nconst _prismaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        if (spanJSON.description === 'prisma:engine:db_query') {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n *\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * @example\n *\n * Make sure `previewFeatures = [\"tracing\"]` is set in the prisma client generator block. See the\n * [prisma docs](https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing) for more details.\n *\n * ```prisma\n * generator client {\n *  provider = \"prisma-client-js\"\n *  previewFeatures = [\"tracing\"]\n * }\n * ```\n *\n * Then you can use the integration like this:\n *\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.prismaIntegration()],\n * });\n * ```\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ByaXNtYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsOEJBQThCLG1CQUFPLENBQUMsd0pBQXlCO0FBQy9ELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wcmlzbWEuanM/ZDc4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBwcmlzbWFJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAcHJpc21hL2luc3RydW1lbnRhdGlvbicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1ByaXNtYSc7XG5cbmNvbnN0IGluc3RydW1lbnRQcmlzbWEgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4ge1xuICBjb25zdCBFc21JbnRlcm9wUHJpc21hSW5zdHJ1bWVudGF0aW9uID1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIG5lZWQgdG8gZG8gdGhlIGZvbGxvd2luZyBmb3IgaW50ZXJvcCByZWFzb25zXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIF9vcHRpb25hbENoYWluKFtwcmlzbWFJbnN0cnVtZW50YXRpb24sICdhY2Nlc3MnLCBfID0+IF8uZGVmYXVsdCwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuUHJpc21hSW5zdHJ1bWVudGF0aW9uXSkgfHwgcHJpc21hSW5zdHJ1bWVudGF0aW9uLlByaXNtYUluc3RydW1lbnRhdGlvbjtcblxuICByZXR1cm4gbmV3IEVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24oe30pO1xufSk7XG5cbmNvbnN0IF9wcmlzbWFJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50UHJpc21hKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgIGlmIChfb3B0aW9uYWxDaGFpbihbc3BhbkpTT04sICdhY2Nlc3MnLCBfMyA9PiBfMy5kZXNjcmlwdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQuc3RhcnRzV2l0aCwgJ2NhbGwnLCBfNSA9PiBfNSgncHJpc21hOicpXSkpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnByaXNtYScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAncHJpc21hOmVuZ2luZTpkYl9xdWVyeScpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZGIuc3lzdGVtJywgJ3ByaXNtYScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3ByaXNtYV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJpc21hKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcHJpc21hSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcHJpc21hLykuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBNYWtlIHN1cmUgYHByZXZpZXdGZWF0dXJlcyA9IFtcInRyYWNpbmdcIl1gIGlzIHNldCBpbiB0aGUgcHJpc21hIGNsaWVudCBnZW5lcmF0b3IgYmxvY2suIFNlZSB0aGVcbiAqIFtwcmlzbWEgZG9jc10oaHR0cHM6Ly93d3cucHJpc21hLmlvL2RvY3MvY29uY2VwdHMvY29tcG9uZW50cy9wcmlzbWEtY2xpZW50L29wZW50ZWxlbWV0cnktdHJhY2luZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBgYGBwcmlzbWFcbiAqIGdlbmVyYXRvciBjbGllbnQge1xuICogIHByb3ZpZGVyID0gXCJwcmlzbWEtY2xpZW50LWpzXCJcbiAqICBwcmV2aWV3RmVhdHVyZXMgPSBbXCJ0cmFjaW5nXCJdXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGVuIHlvdSBjYW4gdXNlIHRoZSBpbnRlZ3JhdGlvbiBsaWtlIHRoaXM6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5wcmlzbWFJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHByaXNtYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcHJpc21hSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRQcmlzbWEgPSBpbnN0cnVtZW50UHJpc21hO1xuZXhwb3J0cy5wcmlzbWFJbnRlZ3JhdGlvbiA9IHByaXNtYUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpc21hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3JlZGlzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyxtT0FBd0M7QUFDL0UsOEJBQThCLG1CQUFPLENBQUMsbU9BQXdDO0FBQzlFLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxrSkFBMEI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsb0pBQTJCOztBQUV0RDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0ZBQWtGO0FBQzNHOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0M7QUFDeEMsR0FBRztBQUNILElBQUksc0JBQXNCO0FBQzFCOztBQUVBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanM/Yjk5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Jb3JlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWlvcmVkaXMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvblJlZGlzNCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcy00Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCByZWRpc0NhY2hlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmVkaXNDYWNoZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1JlZGlzJztcblxubGV0IF9yZWRpc09wdGlvbnMgPSB7fTtcblxuY29uc3QgY2FjaGVSZXNwb25zZUhvb2sgPSAoc3BhbiwgcmVkaXNDb21tYW5kLCBjbWRBcmdzLCByZXNwb25zZSkgPT4ge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnJlZGlzJyk7XG5cbiAgY29uc3Qgc2FmZUtleSA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKTtcbiAgY29uc3QgY2FjaGVPcGVyYXRpb24gPSByZWRpc0NhY2hlLmdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCk7XG5cbiAgaWYgKFxuICAgICFzYWZlS2V5IHx8XG4gICAgIWNhY2hlT3BlcmF0aW9uIHx8XG4gICAgIV9vcHRpb25hbENoYWluKFtfcmVkaXNPcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uY2FjaGVQcmVmaXhlc10pIHx8XG4gICAgIXJlZGlzQ2FjaGUuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIHNhZmVLZXksIF9yZWRpc09wdGlvbnMuY2FjaGVQcmVmaXhlcylcbiAgKSB7XG4gICAgLy8gbm90IHJlbGV2YW50IGZvciBjYWNoZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG90ZWwvaW9yZWRpcyBzZWVtcyB0byBiZSB1c2luZyB0aGUgb2xkIHN0YW5kYXJkLCBhcyB0aGVyZSB3YXMgYSBjaGFuZ2UgdG8gdGhvc2UgcGFyYW1zOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2lzc3Vlcy8zMTk5XG4gIC8vIFdlIGFyZSB1c2luZyBwYXJhbXMgYmFzZWQgb24gdGhlIGRvY3M6IGh0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9kb2NzL3NwZWNzL3NlbWNvbnYvYXR0cmlidXRlcy1yZWdpc3RyeS9uZXR3b3JrL1xuICBjb25zdCBuZXR3b3JrUGVlckFkZHJlc3MgPSBfb3B0aW9uYWxDaGFpbihbY29yZS5zcGFuVG9KU09OLCAnY2FsbCcsIF8yID0+IF8yKHNwYW4pLCAnYWNjZXNzJywgXzMgPT4gXzMuZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzRbJ25ldC5wZWVyLm5hbWUnXV0pO1xuICBjb25zdCBuZXR3b3JrUGVlclBvcnQgPSBfb3B0aW9uYWxDaGFpbihbY29yZS5zcGFuVG9KU09OLCAnY2FsbCcsIF81ID0+IF81KHNwYW4pLCAnYWNjZXNzJywgXzYgPT4gXzYuZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXzcgPT4gXzdbJ25ldC5wZWVyLnBvcnQnXV0pO1xuICBpZiAobmV0d29ya1BlZXJQb3J0ICYmIG5ldHdvcmtQZWVyQWRkcmVzcykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7ICduZXR3b3JrLnBlZXIuYWRkcmVzcyc6IG5ldHdvcmtQZWVyQWRkcmVzcywgJ25ldHdvcmsucGVlci5wb3J0JzogbmV0d29ya1BlZXJQb3J0IH0pO1xuICB9XG5cbiAgY29uc3QgY2FjaGVJdGVtU2l6ZSA9IHJlZGlzQ2FjaGUuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSk7XG5cbiAgaWYgKGNhY2hlSXRlbVNpemUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUsIGNhY2hlSXRlbVNpemUpO1xuICB9XG5cbiAgaWYgKHJlZGlzQ2FjaGUuaXNJbkNvbW1hbmRzKHJlZGlzQ2FjaGUuR0VUX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGNhY2hlSXRlbVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCwgY2FjaGVJdGVtU2l6ZSA+IDApO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogY2FjaGVPcGVyYXRpb24sXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWV06IHNhZmVLZXksXG4gIH0pO1xuXG4gIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNhZmVLZXkuam9pbignLCAnKTtcblxuICBzcGFuLnVwZGF0ZU5hbWUoY29yZS50cnVuY2F0ZShzcGFuRGVzY3JpcHRpb24sIDEwMjQpKTtcbn07XG5cbmNvbnN0IGluc3RydW1lbnRJT1JlZGlzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdJT1JlZGlzJywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbklvcmVkaXMuSU9SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudFJlZGlzNCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnUmVkaXMtNCcsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25SZWRpczQuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpczQoKTtcblxuICAgIC8vIHRvZG86IGltcGxlbWVudCB0aGVtIGdyYWR1YWxseVxuICAgIC8vIG5ldyBMZWdhY3lSZWRpc0luc3RydW1lbnRhdGlvbih7fSksXG4gIH0sXG4gIHsgaWQ6IElOVEVHUkFUSU9OX05BTUUgfSxcbik7XG5cbmNvbnN0IF9yZWRpc0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIF9yZWRpc09wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgaW5zdHJ1bWVudFJlZGlzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtyZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVkaXMpIGFuZFxuICogW2lvcmVkaXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2lvcmVkaXMpIGxpYnJhcmllcy5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHJlZGlzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcmVkaXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5yZWRpc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcmVkaXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3JlZGlzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRSZWRpcyA9IGluc3RydW1lbnRSZWRpcztcbmV4cG9ydHMucmVkaXNJbnRlZ3JhdGlvbiA9IHJlZGlzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentTedious();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { description, data } = core.spanToJSON(span);\n        // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n        if (!description || _optionalChain([data, 'optionalAccess', _ => _['db.system']]) !== 'mssql') {\n          return;\n        }\n\n        const operation = _optionalChain([description, 'optionalAccess', _2 => _2.split, 'call', _3 => _3(' '), 'access', _4 => _4[0]]) || '';\n        if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3RlZGlvdXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLG1PQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsa0pBQTBCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdJQUF3STs7QUFFeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3RlZGlvdXMuanM/NDUxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25UZWRpb3VzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXRlZGlvdXMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTID0gbmV3IFNldChbXG4gICdjYWxsUHJvY2VkdXJlJyxcbiAgJ2V4ZWNTcWwnLFxuICAnZXhlY1NxbEJhdGNoJyxcbiAgJ2V4ZWNCdWxrTG9hZCcsXG4gICdwcmVwYXJlJyxcbiAgJ2V4ZWN1dGUnLFxuXSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVGVkaW91cyc7XG5cbmNvbnN0IGluc3RydW1lbnRUZWRpb3VzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25UZWRpb3VzLlRlZGlvdXNJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX3RlZGlvdXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50VGVkaW91cygpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgLy8gVGVkaXVzIGludGVncmF0aW9uIGFsd2F5cyBzZXQgYSBzcGFuIG5hbWUgYW5kIGBkYi5zeXN0ZW1gIGF0dHJpYnV0ZSB0byBgbXNzcWxgLlxuICAgICAgICBpZiAoIWRlc2NyaXB0aW9uIHx8IF9vcHRpb25hbENoYWluKFtkYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF9bJ2RiLnN5c3RlbSddXSkgIT09ICdtc3NxbCcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBfb3B0aW9uYWxDaGFpbihbZGVzY3JpcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnNwbGl0LCAnY2FsbCcsIF8zID0+IF8zKCcgJyksICdhY2Nlc3MnLCBfNCA9PiBfNFswXV0pIHx8ICcnO1xuICAgICAgICBpZiAoVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTLmhhcyhvcGVyYXRpb24pKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC50ZWRpb3VzJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbdGVkaW91c10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGVkaW91cykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHRlZGlvdXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy90ZWRpb3VzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudGVkaW91c0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgdGVkaW91c0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdGVkaW91c0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50VGVkaW91cyA9IGluc3RydW1lbnRUZWRpb3VzO1xuZXhwb3J0cy50ZWRpb3VzSW50ZWdyYXRpb24gPSB0ZWRpb3VzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWRpb3VzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL25vZGVWZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFjOztBQUVuQztBQUNBOztBQUVBLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanM/ODhiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IE5PREVfVkVSU0lPTiA9IGNvcmUucGFyc2VTZW12ZXIocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA7XG5jb25zdCBOT0RFX01BSk9SID0gTk9ERV9WRVJTSU9OLm1ham9yO1xuXG5leHBvcnRzLk5PREVfTUFKT1IgPSBOT0RFX01BSk9SO1xuZXhwb3J0cy5OT0RFX1ZFUlNJT04gPSBOT0RFX1ZFUlNJT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlVmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvY29udGV4dE1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwwQkFBMEIsbUJBQU8sQ0FBQyx1TkFBb0M7QUFDdEUsc0JBQXNCLG1CQUFPLENBQUMsbVBBQXVCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzPzk4N2YiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29udGV4dEFzeW5jSG9va3MgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGN1c3RvbSBDb250ZXh0TWFuYWdlciBmb3IgT3BlblRlbGVtZXRyeSwgd2hpY2ggZXh0ZW5kcyB0aGUgZGVmYXVsdCBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyLlxuICogSXQgZW5zdXJlcyB0aGF0IHdlIGNyZWF0ZSBhIG5ldyBodWIgcGVyIGNvbnRleHQsIHNvIHRoYXQgdGhlIE9URUwgQ29udGV4dCAmIHRoZSBTZW50cnkgSHViIGFyZSBhbHdheXMgaW4gc3luYy5cbiAqXG4gKiBOb3RlIHRoYXQgd2UgY3VycmVudGx5IG9ubHkgc3VwcG9ydCBBc3luY0hvb2tzIHdpdGggdGhpcyxcbiAqIGJ1dCBzaW5jZSB0aGlzIHNob3VsZCB3b3JrIGZvciBOb2RlIDE0KyBhbnlob3cgdGhhdCBzaG91bGQgYmUgZ29vZCBlbm91Z2guXG4gKi9cbmNvbnN0IFNlbnRyeUNvbnRleHRNYW5hZ2VyID0gb3BlbnRlbGVtZXRyeS53cmFwQ29udGV4dE1hbmFnZXJDbGFzcyhjb250ZXh0QXN5bmNIb29rcy5Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyKTtcblxuZXhwb3J0cy5TZW50cnlDb250ZXh0TWFuYWdlciA9IFNlbnRyeUNvbnRleHRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dE1hbmFnZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name];\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n    { id: name },\n  );\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvaW5zdHJ1bWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELHNCQUFzQixtQkFBTyxDQUFDLG1QQUF1Qjs7QUFFckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxNQUFNLFVBQVU7QUFDaEI7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvaW5zdHJ1bWVudC5qcz9hMTg2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuLyoqIEV4cG9ydGVkIG9ubHkgZm9yIHRlc3RzLiAqL1xuY29uc3QgSU5TVFJVTUVOVEVEID0ge307XG5cbi8qKlxuICogSW5zdHJ1bWVudCBhbiBPcGVuVGVsZW1ldHJ5IGluc3RydW1lbnRhdGlvbiBvbmNlLlxuICogVGhpcyB3aWxsIHNraXAgcnVubmluZyBpbnN0cnVtZW50YXRpb24gYWdhaW4gaWYgaXQgd2FzIGFscmVhZHkgaW5zdHJ1bWVudGVkLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBuYW1lLFxuICBjcmVhdG9yLFxuKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV07XG4gICAgICBpZiAoaW5zdHJ1bWVudGVkKSB7XG4gICAgICAgIC8vIElmIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCBlbnN1cmUgd2UgdXBkYXRlIHRoZW1cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpbnN0cnVtZW50ZWQuc2V0Q29uZmlnKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gY3JlYXRvcihvcHRpb25zKTtcbiAgICAgIElOU1RSVU1FTlRFRFtuYW1lXSA9IGluc3RydW1lbnRhdGlvbjtcblxuICAgICAgb3BlbnRlbGVtZXRyeS5hZGRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcbiAgICB7IGlkOiBuYW1lIH0sXG4gICk7XG59XG5cbmV4cG9ydHMuSU5TVFJVTUVOVEVEID0gSU5TVFJVTUVOVEVEO1xuZXhwb3J0cy5nZW5lcmF0ZUluc3RydW1lbnRPbmNlID0gZ2VuZXJhdGVJbnN0cnVtZW50T25jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Byb3h5L2Jhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxtQkFBTyxDQUFDLDhCQUFZOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Byb3h5L2Jhc2UuanM/MmZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbnJlcXVpcmUoJ25vZGU6aHR0cHMnKTtcblxuLyoqXG4qIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBmb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL3RyZWUvYjEzMzI5NWZkMTZmNjQ3NTU3OGI2YjE1YmQ5YjRlMzNlY2IwZDBiN1xuKiBXaXRoIHRoZSBmb2xsb3dpbmcgTElDRU5TRTpcbipcbiogKFRoZSBNSVQgTGljZW5zZSlcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIE5hdGhhbiBSYWpsaWNoIDxuYXRoYW5AdG9vdGFsbG5hdGUubmV0PipcbipcbiogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4qIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4qIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4qIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6KlxuKlxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4qXG4qXG4qIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdBZ2VudEJhc2VJbnRlcm5hbFN0YXRlJyk7XG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cC5BZ2VudCB7XG5cbiAgLy8gU2V0IGJ5IGBodHRwLkFnZW50YCAtIG1pc3NpbmcgZnJvbSBgQHR5cGVzL25vZGVgXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXNbSU5URVJOQUxdID0ge307XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhbiBgaHR0cGAgb3IgYGh0dHBzYCByZXF1ZXN0LlxuICAgKi9cbiAgaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIHRoZSBgc2VjdXJlRW5kcG9pbnRgIHByb3BlcnR5IGV4cGxpY2l0bHksIHNpbmNlIHRoaXNcbiAgICAgIC8vIG1lYW5zIHRoYXQgYSBwYXJlbnQgYEFnZW50YCBpcyBcInBhc3NpbmcgdGhyb3VnaFwiIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICBpZiAodHlwZW9mIChvcHRpb25zICkuc2VjdXJlRW5kcG9pbnQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWN1cmVFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gZXhwbGljaXQgYHNlY3VyZWAgZW5kcG9pbnQsIGNoZWNrIGlmIGBwcm90b2NvbGAgcHJvcGVydHkgaXNcbiAgICAgIC8vIHNldC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIGNhc2Ugc2luY2UgdXNpbmcgYSBmdWxsIHN0cmluZyBVUkxcbiAgICAgIC8vIG9yIGBVUkxgIGluc3RhbmNlIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gdXNhZ2UuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBpZiBubyBgcHJvdG9jb2xgIHByb3BlcnR5IHdhcyBzZXQsIHRoZW4gZmFsbCBiYWNrIHRvXG4gICAgLy8gY2hlY2tpbmcgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBjdXJyZW50IGNhbGwgc3RhY2ssIGFuZCB0cnkgdG9cbiAgICAvLyBkZXRlY3QgdGhlIFwiaHR0cHNcIiBtb2R1bGUuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKHR5cGVvZiBzdGFjayAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RhY2suc3BsaXQoJ1xcbicpLnNvbWUobCA9PiBsLmluZGV4T2YoJyhodHRwcy5qczonKSAhPT0gLTEgfHwgbC5pbmRleE9mKCdub2RlOmh0dHBzOicpICE9PSAtMSk7XG4gIH1cblxuICBjcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYikge1xuICAgIGNvbnN0IGNvbm5lY3RPcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNlY3VyZUVuZHBvaW50OiB0aGlzLmlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucyksXG4gICAgfTtcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0KHJlcSwgY29ubmVjdE9wdHMpKVxuICAgICAgLnRoZW4oc29ja2V0ID0+IHtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIGh0dHAuQWdlbnQpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBhZGRSZXF1ZXN0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICAgIHJldHVybiBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIGNvbm5lY3RPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gc29ja2V0O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBjcmVhdGVTb2NrZXQoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgIHN1cGVyLmNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH0sIGNiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldDtcbiAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIGlmICghc29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNvY2tldCB3YXMgcmV0dXJuZWQgaW4gdGhlIGBjb25uZWN0KClgIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cblxuICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIF9udWxsaXNoQ29hbGVzY2UodGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQsICgpID0+ICggKHRoaXMucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODApKSk7XG4gIH1cblxuICBzZXQgZGVmYXVsdFBvcnQodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQgPSB2O1xuICAgIH1cbiAgfVxuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICByZXR1cm4gX251bGxpc2hDb2FsZXNjZSh0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCwgKCkgPT4gKCAodGhpcy5pc1NlY3VyZUVuZHBvaW50KCkgPyAnaHR0cHM6JyA6ICdodHRwOicpKSk7XG4gIH1cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0ucHJvdG9jb2wgPSB2O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLkFnZW50ID0gQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Byb3h5L3BhcnNlLXByb3h5LXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFjOztBQUVuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsT0FBTztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanM/MDczMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcbiAgY29yZS5sb2dnZXIubG9nKCdbaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2VdJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUHJveHlSZXNwb25zZShzb2NrZXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gICAgLy8gdGhlIENPTk5FQ1QgcmVzcG9uc2UsIHNvIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gXCIyMDBcIlxuICAgIC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXG4gICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBjb25zdCBiID0gc29ja2V0LnJlYWQoKTtcbiAgICAgIGlmIChiKSBvbmRhdGEoYik7XG4gICAgICBlbHNlIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCByZWFkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignUHJveHkgY29ubmVjdGlvbiBlbmRlZCBiZWZvcmUgcmVjZWl2aW5nIENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnKCdvbmVycm9yICVvJywgZXJyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZGF0YShiKSB7XG4gICAgICBidWZmZXJzLnB1c2goYik7XG4gICAgICBidWZmZXJzTGVuZ3RoICs9IGIubGVuZ3RoO1xuXG4gICAgICBjb25zdCBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgICBjb25zdCBlbmRPZkhlYWRlcnMgPSBidWZmZXJlZC5pbmRleE9mKCdcXHJcXG5cXHJcXG4nKTtcblxuICAgICAgaWYgKGVuZE9mSGVhZGVycyA9PT0gLTEpIHtcbiAgICAgICAgLy8ga2VlcCBidWZmZXJpbmdcbiAgICAgICAgZGVidWcoJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XG4gICAgICAgIHJlYWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXJQYXJ0cyA9IGJ1ZmZlcmVkLnNsaWNlKDAsIGVuZE9mSGVhZGVycykudG9TdHJpbmcoJ2FzY2lpJykuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgY29uc3QgZmlyc3RMaW5lID0gaGVhZGVyUGFydHMuc2hpZnQoKTtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdObyBoZWFkZXIgcmVjZWl2ZWQgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlJykpO1xuICAgICAgfVxuICAgICAgY29uc3QgZmlyc3RMaW5lUGFydHMgPSBmaXJzdExpbmUuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSArKGZpcnN0TGluZVBhcnRzWzFdIHx8IDApO1xuICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IGZpcnN0TGluZVBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlclBhcnRzKSB7XG4gICAgICAgIGlmICghaGVhZGVyKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZmlyc3RDb2xvbiA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGlmIChmaXJzdENvbG9uID09PSAtMSkge1xuICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZTogXCIke2hlYWRlcn1cImApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBoZWFkZXIuc2xpY2UoMCwgZmlyc3RDb2xvbikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc2xpY2UoZmlyc3RDb2xvbiArIDEpLnRyaW1TdGFydCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gaGVhZGVyc1trZXldO1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1trZXldID0gW2N1cnJlbnQsIHZhbHVlXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVidWcoJ2dvdCBwcm94eSBzZXJ2ZXIgcmVzcG9uc2U6ICVvICVvJywgZmlyc3RMaW5lLCBoZWFkZXJzKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBjb25uZWN0OiB7XG4gICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGJ1ZmZlcmVkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5vbignZW5kJywgb25lbmQpO1xuXG4gICAgcmVhZCgpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSBwYXJzZVByb3h5UmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wcm94eS1yZXNwb25zZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n// PUBLIC APIS\n\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE && core.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(\n        () => {\n          debugBuild.DEBUG_BUILD && core.logger.log('Flushing client reports based on interval.');\n          this._flushOutcomes();\n        },\n        _nullishCoalesce(clientOptions.clientReportFlushInterval, () => ( DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)),\n      )\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsV0FBVyxtQkFBTyxDQUFDLHdCQUFTO0FBQzVCLFlBQVksbUJBQU8sQ0FBQyw2SUFBb0I7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLDRIQUFjO0FBQ25DLHVCQUF1QixtQkFBTyxDQUFDLHNDQUFnQjtBQUMvQyxtQkFBbUIsbUJBQU8sQ0FBQyx1SUFBbUI7O0FBRTlDLHVEQUF1RDs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQ0FBK0M7QUFDaEU7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVDQUF1QyxZQUFZLFlBQVksaURBQWlELHdCQUF3QixFQUFFO0FBQzFJOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9jbGllbnQuanM/M2FkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlLFxuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBvcyA9IHJlcXVpcmUoJ25vZGU6b3MnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgd29ya2VyX3RocmVhZHMgPSByZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfQ0xJRU5UX1JFUE9SVF9GTFVTSF9JTlRFUlZBTF9NUyA9IDYwMDAwOyAvLyA2MHMgd2FzIGNob3NlbiBhcmJpdHJhcmlseVxuXG4vKiogQSBjbGllbnQgZm9yIHVzaW5nIFNlbnRyeSB3aXRoIE5vZGUgJiBPcGVuVGVsZW1ldHJ5LiAqL1xuY2xhc3MgTm9kZUNsaWVudCBleHRlbmRzIGNvcmUuU2VydmVyUnVudGltZUNsaWVudCB7XG5cbiAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHBsYXRmb3JtOiAnbm9kZScsXG4gICAgICBydW50aW1lOiB7IG5hbWU6ICdub2RlJywgdmVyc2lvbjogZ2xvYmFsLnByb2Nlc3MudmVyc2lvbiB9LFxuICAgICAgc2VydmVyTmFtZTogb3B0aW9ucy5zZXJ2ZXJOYW1lIHx8IGdsb2JhbC5wcm9jZXNzLmVudi5TRU5UUllfTkFNRSB8fCBvcy5ob3N0bmFtZSgpLFxuICAgIH07XG5cbiAgICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEoY2xpZW50T3B0aW9ucywgJ25vZGUnKTtcblxuICAgIGNvcmUubG9nZ2VyLmxvZyhcbiAgICAgIGBJbml0aWFsaXppbmcgU2VudHJ5OiBwcm9jZXNzOiAke3Byb2Nlc3MucGlkfSwgdGhyZWFkOiAke3dvcmtlcl90aHJlYWRzLmlzTWFpblRocmVhZCA/ICdtYWluJyA6IGB3b3JrZXItJHt3b3JrZXJfdGhyZWFkcy50aHJlYWRJZH1gfS5gLFxuICAgICk7XG5cbiAgICBzdXBlcihjbGllbnRPcHRpb25zKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIE9URUwgdHJhY2VyLiAqL1xuICAgZ2V0IHRyYWNlcigpIHtcbiAgICBpZiAodGhpcy5fdHJhY2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhY2VyO1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWUgPSAnQHNlbnRyeS9ub2RlJztcbiAgICBjb25zdCB2ZXJzaW9uID0gY29yZS5TREtfVkVSU0lPTjtcbiAgICBjb25zdCB0cmFjZXIgPSBhcGkudHJhY2UuZ2V0VHJhY2VyKG5hbWUsIHZlcnNpb24pO1xuICAgIHRoaXMuX3RyYWNlciA9IHRyYWNlcjtcblxuICAgIHJldHVybiB0cmFjZXI7XG4gIH1cblxuICAvLyBFc2xpbnQgaWdub3JlIGV4cGxhbmF0aW9uOiBUaGlzIGlzIGFscmVhZHkgZG9jdW1lbnRlZCBpbiBzdXBlci5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbiAgIGFzeW5jIGZsdXNoKHRpbWVvdXQpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMudHJhY2VQcm92aWRlcjtcbiAgICBjb25zdCBzcGFuUHJvY2Vzc29yID0gX29wdGlvbmFsQ2hhaW4oW3Byb3ZpZGVyLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uYWN0aXZlU3BhblByb2Nlc3Nvcl0pO1xuXG4gICAgaWYgKHNwYW5Qcm9jZXNzb3IpIHtcbiAgICAgIGF3YWl0IHNwYW5Qcm9jZXNzb3IuZm9yY2VGbHVzaCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdldE9wdGlvbnMoKS5zZW5kQ2xpZW50UmVwb3J0cykge1xuICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5mbHVzaCh0aW1lb3V0KTtcbiAgfVxuXG4gIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgY2xvc2UodGltZW91dCkge1xuICAgIGlmICh0aGlzLl9jbGllbnRSZXBvcnRJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9jbGllbnRSZXBvcnRJbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIpIHtcbiAgICAgIHByb2Nlc3Mub2ZmKCdiZWZvcmVFeGl0JywgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmNsb3NlKHRpbWVvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdpbGwgc3RhcnQgdHJhY2tpbmcgY2xpZW50IHJlcG9ydHMgZm9yIHRoaXMgY2xpZW50LlxuICAgKlxuICAgKiBOT1RJQ0U6IFRoaXMgbWV0aG9kIHdpbGwgY3JlYXRlIGFuIGludGVydmFsIHRoYXQgaXMgcGVyaW9kaWNhbGx5IGNhbGxlZCBhbmQgYXR0YWNoIGEgYHByb2Nlc3Mub24oJ2JlZm9yZUV4aXQnKWBcbiAgICogaG9vay4gVG8gY2xlYW4gdXAgdGhlc2UgcmVzb3VyY2VzLCBjYWxsIGAuY2xvc2UoKWAgd2hlbiB5b3Ugbm8gbG9uZ2VyIGludGVuZCB0byB1c2UgdGhlIGNsaWVudC4gTm90IGRvaW5nIHNvIHdpbGxcbiAgICogcmVzdWx0IGluIGEgbWVtb3J5IGxlYWsuXG4gICAqL1xuICAvLyBUaGUgcmVhc29uIGNsaWVudCByZXBvcnRzIG5lZWQgdG8gYmUgbWFudWFsbHkgYWN0aXZhdGVkIHdpdGggdGhpcyBtZXRob2QgaW5zdGVhZCBvZiBqdXN0IGVuYWJsaW5nIHRoZW0gaW4gYVxuICAvLyBjb25zdHJ1Y3RvciwgaXMgdGhhdCBpZiB1c2VycyBwZXJpb2RpY2FsbHkgYW5kIHVuYm91bmRlZGx5IGNyZWF0ZSBuZXcgY2xpZW50cywgd2Ugd2lsbCBjcmVhdGUgbW9yZSBhbmQgbW9yZVxuICAvLyBpbnRlcnZhbHMgYW5kIGJlZm9yZUV4aXQgbGlzdGVuZXJzLCB0aHVzIGxlYWtpbmcgbWVtb3J5LiBJbiB0aGVzZSBzaXR1YXRpb25zLCB1c2VycyBhcmUgcmVxdWlyZWQgdG8gY2FsbFxuICAvLyBgY2xpZW50LmNsb3NlKClgIGluIG9yZGVyIHRvIGRpc3Bvc2Ugb2YgdGhlIGFjcXVpcmVkIHJlc291cmNlcy5cbiAgLy8gV2UgYXNzdW1lIHRoYXQgY2FsbGluZyB0aGlzIG1ldGhvZCBpbiBTZW50cnkuaW5pdCgpIGlzIGEgc2Vuc2libGUgZGVmYXVsdCwgYmVjYXVzZSBjYWxsaW5nIFNlbnRyeS5pbml0KCkgb3ZlciBhbmRcbiAgLy8gb3ZlciBhZ2FpbiB3b3VsZCBhbHNvIHJlc3VsdCBpbiBtZW1vcnkgbGVha3MuXG4gIC8vIE5vdGU6IFdlIGhhdmUgZXhwZXJpbWVudGVkIHdpdGggdXNpbmcgYEZpbmFsaXphdGlvblJlZ2lzdHlgIHRvIGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBjbGllbnQgaXMgZ2FyYmFnZVxuICAvLyBjb2xsZWN0ZWQsIGJ1dCBpdCBkaWQgbm90IHdvcmssIGJlY2F1c2UgdGhlIGNsZWFudXAgZnVuY3Rpb24gbmV2ZXIgZ290IGNhbGxlZC5cbiAgIHN0YXJ0Q2xpZW50UmVwb3J0VHJhY2tpbmcoKSB7XG4gICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgIGlmIChjbGllbnRPcHRpb25zLnNlbmRDbGllbnRSZXBvcnRzKSB7XG4gICAgICB0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9mbHVzaE91dGNvbWVzKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9jbGllbnRSZXBvcnRJbnRlcnZhbCA9IHNldEludGVydmFsKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5sb2coJ0ZsdXNoaW5nIGNsaWVudCByZXBvcnRzIGJhc2VkIG9uIGludGVydmFsLicpO1xuICAgICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX251bGxpc2hDb2FsZXNjZShjbGllbnRPcHRpb25zLmNsaWVudFJlcG9ydEZsdXNoSW50ZXJ2YWwsICgpID0+ICggREVGQVVMVF9DTElFTlRfUkVQT1JUX0ZMVVNIX0lOVEVSVkFMX01TKSksXG4gICAgICApXG4gICAgICAgIC8vIFVucmVmIGlzIGNyaXRpY2FsIGZvciBub3QgcHJldmVudGluZyB0aGUgcHJvY2VzcyBmcm9tIGV4aXRpbmcgYmVjYXVzZSB0aGUgaW50ZXJ2YWwgaXMgYWN0aXZlLlxuICAgICAgICAudW5yZWYoKTtcblxuICAgICAgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcsIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLk5vZGVDbGllbnQgPSBOb2RlQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    console$1.consoleIntegration(),\n    index.httpIntegration(),\n    nodeFetch.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$1.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1);\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    core.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n\n  const autoSessionTracking =\n    typeof release !== 'string'\n      ? false\n      : options.autoSessionTracking === undefined\n        ? true\n        : options.autoSessionTracking;\n\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const baseOptions = core.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true,\n  });\n\n  const overwriteOptions = core.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate,\n  });\n\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations,\n    }),\n  };\n\n  return clientOptions;\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYztBQUNuQyxzQkFBc0IsbUJBQU8sQ0FBQyxtUEFBdUI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsdUlBQW1CO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLHlKQUE0QjtBQUN0RCxnQkFBZ0IsbUJBQU8sQ0FBQyx5SkFBNEI7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsbUtBQWlDO0FBQzlELHFCQUFxQixtQkFBTyxDQUFDLG1LQUFpQztBQUM5RCxjQUFjLG1CQUFPLENBQUMsK0pBQStCO0FBQ3JELGdCQUFnQixtQkFBTyxDQUFDLHFMQUEwQztBQUNsRSxnQkFBZ0IsbUJBQU8sQ0FBQyx5SkFBNEI7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsK0pBQStCO0FBQ3pELDRCQUE0QixtQkFBTyxDQUFDLGlMQUF3QztBQUM1RSw2QkFBNkIsbUJBQU8sQ0FBQyxtTEFBeUM7QUFDOUUsa0JBQWtCLG1CQUFPLENBQUMsNkpBQThCO0FBQ3hELGdCQUFnQixtQkFBTyxDQUFDLHFLQUFrQztBQUMxRCxhQUFhLG1CQUFPLENBQUMsK0lBQXVCO0FBQzVDLGlCQUFpQixtQkFBTyxDQUFDLDZJQUFzQjtBQUMvQyxrQkFBa0IsbUJBQU8sQ0FBQywrSUFBdUI7QUFDakQsWUFBWSxtQkFBTyxDQUFDLDBIQUFVO0FBQzlCLGVBQWUsbUJBQU8sQ0FBQyxnSUFBYTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxvSUFBZTs7QUFFeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHlEQUF5RCxNQUFNO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxnQ0FBZ0MsdUNBQXVDOztBQUV2RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUU7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZFQUE2RSxjQUFjO0FBQzNGO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDhCQUE4QjtBQUM5QixnREFBZ0Q7QUFDaEQsWUFBWTtBQUNaLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luZGV4LmpzP2FjMzkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBjb25zb2xlJDEgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcycpO1xuY29uc3QgY29udGV4dCA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9jb250ZXh0LmpzJyk7XG5jb25zdCBjb250ZXh0bGluZXMgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvY29udGV4dGxpbmVzLmpzJyk7XG5jb25zdCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9odHRwL2luZGV4LmpzJyk7XG5jb25zdCBpbmRleCQxID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcycpO1xuY29uc3QgbW9kdWxlcyA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzJyk7XG5jb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC5qcycpO1xuY29uc3Qgb251bmNhdWdodGV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9vbnVuY2F1Z2h0ZXhjZXB0aW9uLmpzJyk7XG5jb25zdCBvbnVuaGFuZGxlZHJlamVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9vbnVuaGFuZGxlZHJlamVjdGlvbi5qcycpO1xuY29uc3Qgc3BvdGxpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0cy9odHRwLmpzJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbmpzLmpzJyk7XG5jb25zdCBlbnZUb0Jvb2wgPSByZXF1aXJlKCcuLi91dGlscy9lbnZUb0Jvb2wuanMnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJy4vYXBpLmpzJyk7XG5jb25zdCBjbGllbnQgPSByZXF1aXJlKCcuL2NsaWVudC5qcycpO1xuY29uc3QgaW5pdE90ZWwgPSByZXF1aXJlKCcuL2luaXRPdGVsLmpzJyk7XG5cbmZ1bmN0aW9uIGdldENqc09ubHlJbnRlZ3JhdGlvbnMoKSB7XG4gIHJldHVybiBjb21tb25qcy5pc0NqcygpID8gW21vZHVsZXMubW9kdWxlc0ludGVncmF0aW9uKCldIDogW107XG59XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgaW50ZWdyYXRpb25zLCBleGNsdWRpbmcgcGVyZm9ybWFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UoKSB7XG4gIHJldHVybiBbXG4gICAgLy8gQ29tbW9uXG4gICAgY29yZS5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uKCksXG4gICAgY29yZS5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24oKSxcbiAgICBjb3JlLmxpbmtlZEVycm9yc0ludGVncmF0aW9uKCksXG4gICAgY29yZS5yZXF1ZXN0RGF0YUludGVncmF0aW9uKCksXG4gICAgLy8gTmF0aXZlIFdyYXBwZXJzXG4gICAgY29uc29sZSQxLmNvbnNvbGVJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4Lmh0dHBJbnRlZ3JhdGlvbigpLFxuICAgIG5vZGVGZXRjaC5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbigpLFxuICAgIC8vIEdsb2JhbCBIYW5kbGVyc1xuICAgIG9udW5jYXVnaHRleGNlcHRpb24ub25VbmNhdWdodEV4Y2VwdGlvbkludGVncmF0aW9uKCksXG4gICAgb251bmhhbmRsZWRyZWplY3Rpb24ub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbigpLFxuICAgIC8vIEV2ZW50IEluZm9cbiAgICBjb250ZXh0bGluZXMuY29udGV4dExpbmVzSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQxLmxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24oKSxcbiAgICBjb250ZXh0Lm5vZGVDb250ZXh0SW50ZWdyYXRpb24oKSxcbiAgICBjaGlsZFByb2Nlc3MuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24oKSxcbiAgICAuLi5nZXRDanNPbmx5SW50ZWdyYXRpb25zKCksXG4gIF07XG59XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgTm9kZSBTREsuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIFtcbiAgICAuLi5nZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlKCksXG4gICAgLy8gV2Ugb25seSBhZGQgcGVyZm9ybWFuY2UgaW50ZWdyYXRpb25zIGlmIHRyYWNpbmcgaXMgZW5hYmxlZFxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1lYW5zIHRoYXQgd2l0aG91dCB0cmFjaW5nIGVuYWJsZWQsIGUuZy4gYGV4cHJlc3NJbnRlZ3JhdGlvbigpYCB3aWxsIG5vdCBiZSBhZGRlZFxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBnZW5lcmFsbHkgcmVxdWVzdCBpc29sYXRpb24gd2lsbCB3b3JrIChiZWNhdXNlIHRoYXQgaXMgZG9uZSBieSBodHRwSW50ZWdyYXRpb24pXG4gICAgLy8gQnV0IGB0cmFuc2FjdGlvbk5hbWVgIHdpbGwgbm90IGJlIHNldCBhdXRvbWF0aWNhbGx5XG4gICAgLi4uKHNob3VsZEFkZFBlcmZvcm1hbmNlSW50ZWdyYXRpb25zKG9wdGlvbnMpID8gaW5kZXgkMi5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSA6IFtdKSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkQWRkUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICBpZiAoIWNvcmUuaGFzVHJhY2luZ0VuYWJsZWQob3B0aW9ucykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBXZSB3YW50IHRvIGVuc3VyZSBgdHJhY2VzU2FtcGxlUmF0ZWAgaXMgbm90IGp1c3QgdW5kZWZpbmVkL251bGwgaGVyZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlVHJhY2luZyB8fCBvcHRpb25zLnRyYWNlc1NhbXBsZVJhdGUgIT0gbnVsbCB8fCAndHJhY2VzU2FtcGxlcicgaW4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZS5cbiAqL1xuZnVuY3Rpb24gaW5pdChvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IGFueSBpbnRlZ3JhdGlvbnMgYWRkZWQgYnkgZGVmYXVsdC5cbiAqL1xuZnVuY3Rpb24gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gX2luaXQob3B0aW9ucywgKCkgPT4gW10pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gX2luaXQoXG4gIF9vcHRpb25zID0ge30sXG4gIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsLFxuKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBnZXRDbGllbnRPcHRpb25zKF9vcHRpb25zLCBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCk7XG5cbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgY29yZS5sb2dnZXIuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBgY29uc29sZS53YXJuYCByYXRoZXIgdGhhbiBgbG9nZ2VyLndhcm5gIHNpbmNlIGJ5IG5vbi1kZWJ1ZyBidW5kbGVzIGhhdmUgYWxsIGBsb2dnZXIueGAgc3RhdGVtZW50cyBzdHJpcHBlZFxuICAgICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb21tb25qcy5pc0NqcygpICYmIG9wdGlvbnMucmVnaXN0ZXJFc21Mb2FkZXJIb29rcyAhPT0gZmFsc2UpIHtcbiAgICBpbml0T3RlbC5tYXliZUluaXRpYWxpemVFc21Mb2FkZXIob3B0aW9ucy5yZWdpc3RlckVzbUxvYWRlckhvb2tzID09PSB0cnVlID8gdW5kZWZpbmVkIDogb3B0aW9ucy5yZWdpc3RlckVzbUxvYWRlckhvb2tzKTtcbiAgfVxuXG4gIG9wZW50ZWxlbWV0cnkuc2V0T3BlblRlbGVtZXRyeUNvbnRleHRBc3luY0NvbnRleHRTdHJhdGVneSgpO1xuXG4gIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgc2NvcGUudXBkYXRlKG9wdGlvbnMuaW5pdGlhbFNjb3BlKTtcblxuICBpZiAob3B0aW9ucy5zcG90bGlnaHQgJiYgIW9wdGlvbnMuaW50ZWdyYXRpb25zLnNvbWUoKHsgbmFtZSB9KSA9PiBuYW1lID09PSBzcG90bGlnaHQuSU5URUdSQVRJT05fTkFNRSkpIHtcbiAgICBvcHRpb25zLmludGVncmF0aW9ucy5wdXNoKFxuICAgICAgc3BvdGxpZ2h0LnNwb3RsaWdodEludGVncmF0aW9uKHtcbiAgICAgICAgc2lkZWNhclVybDogdHlwZW9mIG9wdGlvbnMuc3BvdGxpZ2h0ID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuc3BvdGxpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGNsaWVudCQxID0gbmV3IGNsaWVudC5Ob2RlQ2xpZW50KG9wdGlvbnMpO1xuICAvLyBUaGUgY2xpZW50IGlzIG9uIHRoZSBjdXJyZW50IHNjb3BlLCBmcm9tIHdoZXJlIGl0IGdlbmVyYWxseSBpcyBpbmhlcml0ZWRcbiAgY29yZS5nZXRDdXJyZW50U2NvcGUoKS5zZXRDbGllbnQoY2xpZW50JDEpO1xuXG4gIGNsaWVudCQxLmluaXQoKTtcblxuICBjb3JlLmxvZ2dlci5sb2coYFJ1bm5pbmcgaW4gJHtjb21tb25qcy5pc0NqcygpID8gJ0NvbW1vbkpTJyA6ICdFU00nfSBtb2RlLmApO1xuXG4gIGlmIChvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcpIHtcbiAgICBzdGFydFNlc3Npb25UcmFja2luZygpO1xuICB9XG5cbiAgY2xpZW50JDEuc3RhcnRDbGllbnRSZXBvcnRUcmFja2luZygpO1xuXG4gIHVwZGF0ZVNjb3BlRnJvbUVudlZhcmlhYmxlcygpO1xuXG4gIC8vIElmIHVzZXJzIG9wdC1vdXQgb2YgdGhpcywgdGhleSBfaGF2ZV8gdG8gc2V0IHVwIE9wZW5UZWxlbWV0cnkgdGhlbXNlbHZlc1xuICAvLyBUaGVyZSBpcyBubyB3YXkgdG8gdXNlIHRoaXMgU0RLIHdpdGhvdXQgT3BlblRlbGVtZXRyeSFcbiAgaWYgKCFvcHRpb25zLnNraXBPcGVuVGVsZW1ldHJ5U2V0dXApIHtcbiAgICBpbml0T3RlbC5pbml0T3BlblRlbGVtZXRyeShjbGllbnQkMSk7XG4gICAgdmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXAoKTtcbiAgfVxuXG4gIG9wZW50ZWxlbWV0cnkuZW5oYW5jZURzY1dpdGhPcGVuVGVsZW1ldHJ5Um9vdFNwYW5OYW1lKGNsaWVudCQxKTtcbiAgb3BlbnRlbGVtZXRyeS5zZXR1cEV2ZW50Q29udGV4dFRyYWNlKGNsaWVudCQxKTtcblxuICByZXR1cm4gY2xpZW50JDE7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgdGhhdCB5b3VyIE9wZW5UZWxlbWV0cnkgc2V0dXAgaXMgY29ycmVjdC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXAoKSB7XG4gIGlmICghZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNldHVwID0gb3BlbnRlbGVtZXRyeS5vcGVuVGVsZW1ldHJ5U2V0dXBDaGVjaygpO1xuXG4gIGNvbnN0IHJlcXVpcmVkID0gWydTZW50cnlDb250ZXh0TWFuYWdlcicsICdTZW50cnlQcm9wYWdhdG9yJ107XG5cbiAgaWYgKGNvcmUuaGFzVHJhY2luZ0VuYWJsZWQoKSkge1xuICAgIHJlcXVpcmVkLnB1c2goJ1NlbnRyeVNwYW5Qcm9jZXNzb3InKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgayBvZiByZXF1aXJlZCkge1xuICAgIGlmICghc2V0dXAuaW5jbHVkZXMoaykpIHtcbiAgICAgIGNvcmUubG9nZ2VyLmVycm9yKFxuICAgICAgICBgWW91IGhhdmUgdG8gc2V0IHVwIHRoZSAke2t9LiBXaXRob3V0IHRoaXMsIHRoZSBPcGVuVGVsZW1ldHJ5ICYgU2VudHJ5IGludGVncmF0aW9uIHdpbGwgbm90IHdvcmsgcHJvcGVybHkuYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZXR1cC5pbmNsdWRlcygnU2VudHJ5U2FtcGxlcicpKSB7XG4gICAgY29yZS5sb2dnZXIud2FybihcbiAgICAgICdZb3UgaGF2ZSB0byBzZXQgdXAgdGhlIFNlbnRyeVNhbXBsZXIuIFdpdGhvdXQgdGhpcywgdGhlIE9wZW5UZWxlbWV0cnkgJiBTZW50cnkgaW50ZWdyYXRpb24gbWF5IHN0aWxsIHdvcmssIGJ1dCBzYW1wbGUgcmF0ZXMgc2V0IGZvciB0aGUgU2VudHJ5IFNESyB3aWxsIG5vdCBiZSByZXNwZWN0ZWQuIElmIHlvdSB1c2UgYSBjdXN0b20gc2FtcGxlciwgbWFrZSBzdXJlIHRvIHVzZSBgd3JhcFNhbXBsaW5nRGVjaXNpb25gLicsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRPcHRpb25zKFxuICBvcHRpb25zLFxuICBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCxcbikge1xuICBjb25zdCByZWxlYXNlID0gZ2V0UmVsZWFzZShvcHRpb25zLnJlbGVhc2UpO1xuXG4gIGNvbnN0IGF1dG9TZXNzaW9uVHJhY2tpbmcgPVxuICAgIHR5cGVvZiByZWxlYXNlICE9PSAnc3RyaW5nJ1xuICAgICAgPyBmYWxzZVxuICAgICAgOiBvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHRydWVcbiAgICAgICAgOiBvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmc7XG5cbiAgaWYgKG9wdGlvbnMuc3BvdGxpZ2h0ID09IG51bGwpIHtcbiAgICBjb25zdCBzcG90bGlnaHRFbnYgPSBlbnZUb0Jvb2wuZW52VG9Cb29sKHByb2Nlc3MuZW52LlNFTlRSWV9TUE9UTElHSFQsIHsgc3RyaWN0OiB0cnVlIH0pO1xuICAgIGlmIChzcG90bGlnaHRFbnYgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5zcG90bGlnaHQgPSBwcm9jZXNzLmVudi5TRU5UUllfU1BPVExJR0hUO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnNwb3RsaWdodCA9IHNwb3RsaWdodEVudjtcbiAgICB9XG4gIH1cblxuICBjb25zdCB0cmFjZXNTYW1wbGVSYXRlID0gZ2V0VHJhY2VzU2FtcGxlUmF0ZShvcHRpb25zLnRyYWNlc1NhbXBsZVJhdGUpO1xuXG4gIGNvbnN0IGJhc2VPcHRpb25zID0gY29yZS5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgdHJhbnNwb3J0OiBodHRwLm1ha2VOb2RlVHJhbnNwb3J0LFxuICAgIGRzbjogcHJvY2Vzcy5lbnYuU0VOVFJZX0RTTixcbiAgICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuU0VOVFJZX0VOVklST05NRU5ULFxuICAgIHNlbmRDbGllbnRSZXBvcnRzOiB0cnVlLFxuICB9KTtcblxuICBjb25zdCBvdmVyd3JpdGVPcHRpb25zID0gY29yZS5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgcmVsZWFzZSxcbiAgICBhdXRvU2Vzc2lvblRyYWNraW5nLFxuICAgIHRyYWNlc1NhbXBsZVJhdGUsXG4gIH0pO1xuXG4gIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7XG4gICAgLi4uYmFzZU9wdGlvbnMsXG4gICAgLi4ub3B0aW9ucyxcbiAgICAuLi5vdmVyd3JpdGVPcHRpb25zLFxuICB9O1xuXG4gIGlmIChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9IGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsKG1lcmdlZE9wdGlvbnMpO1xuICB9XG5cbiAgY29uc3QgY2xpZW50T3B0aW9ucyA9IHtcbiAgICAuLi5tZXJnZWRPcHRpb25zLFxuICAgIHN0YWNrUGFyc2VyOiBjb3JlLnN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyhvcHRpb25zLnN0YWNrUGFyc2VyIHx8IGFwaS5kZWZhdWx0U3RhY2tQYXJzZXIpLFxuICAgIGludGVncmF0aW9uczogY29yZS5nZXRJbnRlZ3JhdGlvbnNUb1NldHVwKHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnM6IG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyxcbiAgICAgIGludGVncmF0aW9uczogb3B0aW9ucy5pbnRlZ3JhdGlvbnMsXG4gICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIGNsaWVudE9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGdldFJlbGVhc2UocmVsZWFzZSkge1xuICBpZiAocmVsZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlbGVhc2U7XG4gIH1cblxuICBjb25zdCBkZXRlY3RlZFJlbGVhc2UgPSBhcGkuZ2V0U2VudHJ5UmVsZWFzZSgpO1xuICBpZiAoZGV0ZWN0ZWRSZWxlYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZGV0ZWN0ZWRSZWxlYXNlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2VzU2FtcGxlUmF0ZSh0cmFjZXNTYW1wbGVSYXRlKSB7XG4gIGlmICh0cmFjZXNTYW1wbGVSYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJhY2VzU2FtcGxlUmF0ZTtcbiAgfVxuXG4gIGNvbnN0IHNhbXBsZVJhdGVGcm9tRW52ID0gcHJvY2Vzcy5lbnYuU0VOVFJZX1RSQUNFU19TQU1QTEVfUkFURTtcbiAgaWYgKCFzYW1wbGVSYXRlRnJvbUVudikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBwYXJzZWQgPSBwYXJzZUZsb2F0KHNhbXBsZVJhdGVGcm9tRW52KTtcbiAgcmV0dXJuIGlzRmluaXRlKHBhcnNlZCkgPyBwYXJzZWQgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogVXBkYXRlIHNjb3BlIGFuZCBwcm9wYWdhdGlvbiBjb250ZXh0IGJhc2VkIG9uIGVudmlyb25tZW50YWwgdmFyaWFibGVzLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JmY3MvYmxvYi9tYWluL3RleHQvMDA3MS1jb250aW51ZS10cmFjZS1vdmVyLXByb2Nlc3MtYm91bmRhcmllcy5tZFxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlU2NvcGVGcm9tRW52VmFyaWFibGVzKCkge1xuICBpZiAoZW52VG9Cb29sLmVudlRvQm9vbChwcm9jZXNzLmVudi5TRU5UUllfVVNFX0VOVklST05NRU5UKSAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCBzZW50cnlUcmFjZUVudiA9IHByb2Nlc3MuZW52LlNFTlRSWV9UUkFDRTtcbiAgICBjb25zdCBiYWdnYWdlRW52ID0gcHJvY2Vzcy5lbnYuU0VOVFJZX0JBR0dBR0U7XG4gICAgY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gY29yZS5wcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhzZW50cnlUcmFjZUVudiwgYmFnZ2FnZUVudik7XG4gICAgY29yZS5nZXRDdXJyZW50U2NvcGUoKS5zZXRQcm9wYWdhdGlvbkNvbnRleHQocHJvcGFnYXRpb25Db250ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZSBhdXRvbWF0aWMgU2Vzc2lvbiBUcmFja2luZyBmb3IgdGhlIG5vZGUgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRTZXNzaW9uVHJhY2tpbmcoKSB7XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS5hdXRvU2Vzc2lvblRyYWNraW5nKSB7XG4gICAgY2xpZW50LmluaXRTZXNzaW9uRmx1c2hlcigpO1xuICB9XG5cbiAgY29yZS5zdGFydFNlc3Npb24oKTtcblxuICAvLyBFbWl0dGVkIGluIHRoZSBjYXNlIG9mIGhlYWx0aHkgc2Vzc2lvbnMsIGVycm9yIG9mIGBtZWNoYW5pc20uaGFuZGxlZDogdHJ1ZWAgYW5kIHVuaGFuZGxlZHJlamVjdGlvbnMgYmVjYXVzZVxuICAvLyBUaGUgJ2JlZm9yZUV4aXQnIGV2ZW50IGlzIG5vdCBlbWl0dGVkIGZvciBjb25kaXRpb25zIGNhdXNpbmcgZXhwbGljaXQgdGVybWluYXRpb24sXG4gIC8vIHN1Y2ggYXMgY2FsbGluZyBwcm9jZXNzLmV4aXQoKSBvciB1bmNhdWdodCBleGNlcHRpb25zLlxuICAvLyBSZWY6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfZXZlbnRfYmVmb3JlZXhpdFxuICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgKCkgPT4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuZ2V0U2Vzc2lvbigpO1xuXG4gICAgLy8gT25seSBjYWxsIGVuZFNlc3Npb24sIGlmIHRoZSBTZXNzaW9uIGV4aXN0cyBvbiBTY29wZSBhbmQgU2Vzc2lvblN0YXR1cyBpcyBub3QgYVxuICAgIC8vIFRlcm1pbmFsIFN0YXR1cyBpLmUuIEV4aXRlZCBvciBDcmFzaGVkIGJlY2F1c2VcbiAgICAvLyBcIldoZW4gYSBzZXNzaW9uIGlzIG1vdmVkIGF3YXkgZnJvbSBvayBpdCBtdXN0IG5vdCBiZSB1cGRhdGVkIGFueW1vcmUuXCJcbiAgICAvLyBSZWY6IGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9zZXNzaW9ucy9cbiAgICBpZiAoc2Vzc2lvbiAmJiBzZXNzaW9uLnN0YXR1cyAhPT0gJ29rJykge1xuICAgICAgY29yZS5lbmRTZXNzaW9uKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0cy5nZXREZWZhdWx0SW50ZWdyYXRpb25zID0gZ2V0RGVmYXVsdEludGVncmF0aW9ucztcbmV4cG9ydHMuZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZSA9IGdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2U7XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5pbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBpbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLnZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwID0gdmFsaWRhdGVPcGVuVGVsZW1ldHJ5U2V0dXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+resources@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(instrument)/../../node_modules/.pnpm/import-in-the-middle@1.11.2/node_modules/import-in-the-middle/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client);\n  client.traceProvider = provider;\n}\n\nfunction getRegisterOptions(esmHookConfig) {\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    return { data: { addHookMessagePort, include: esmHookConfig.include || [] }, transferList: [addHookMessagePort] };\n  }\n\n  return { data: esmHookConfig };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl =\n      typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) !== 'undefined' ? (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) : undefined;\n\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        core.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or use version 7.x of the Sentry Node.js SDK.',\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n  });\n  provider.addSpanProcessor(\n    new opentelemetry.SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration,\n    }),\n  );\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager(),\n  });\n\n  return provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbml0T3RlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7QUFDckMsWUFBWSxtQkFBTyxDQUFDLDZJQUFvQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyx5TEFBMEI7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsd01BQStCO0FBQzVELDRCQUE0QixtQkFBTyxDQUFDLGlNQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsbVBBQXVCO0FBQ3JELDBCQUEwQixtQkFBTyxDQUFDLDBJQUFzQjtBQUN4RCxjQUFjLG1CQUFPLENBQUMscUtBQWtDO0FBQ3hELHVCQUF1QixtQkFBTyxDQUFDLHVKQUEyQjtBQUMxRCxpQkFBaUIsbUJBQU8sQ0FBQyw2SUFBc0I7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0EsYUFBYSxRQUFRLDBEQUEwRDtBQUMvRTs7QUFFQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHFEQUFpQyxtUEFBbVAscURBQWlDOztBQUVyVztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxVQUFVLFFBQVE7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyw0QkFBNEI7QUFDNUIsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbml0T3RlbC5qcz82NzgyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG1vZHVsZU1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCByZXNvdXJjZXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9yZXNvdXJjZXMnKTtcbmNvbnN0IHNka1RyYWNlQmFzZSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3Nkay10cmFjZS1iYXNlJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcbmNvbnN0IGltcG9ydEluVGhlTWlkZGxlID0gcmVxdWlyZSgnaW1wb3J0LWluLXRoZS1taWRkbGUnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcbmNvbnN0IGNvbnRleHRNYW5hZ2VyID0gcmVxdWlyZSgnLi4vb3RlbC9jb250ZXh0TWFuYWdlci5qcycpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb25qcy5qcycpO1xuXG52YXIgX2RvY3VtZW50Q3VycmVudFNjcmlwdCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0IDogbnVsbDtcbi8qKlxuICogSW5pdGlhbGl6ZSBPcGVuVGVsZW1ldHJ5IGZvciBOb2RlLlxuICovXG5mdW5jdGlvbiBpbml0T3BlblRlbGVtZXRyeShjbGllbnQpIHtcbiAgaWYgKGNsaWVudC5nZXRPcHRpb25zKCkuZGVidWcpIHtcbiAgICBzZXR1cE9wZW5UZWxlbWV0cnlMb2dnZXIoKTtcbiAgfVxuXG4gIGNvbnN0IHByb3ZpZGVyID0gc2V0dXBPdGVsKGNsaWVudCk7XG4gIGNsaWVudC50cmFjZVByb3ZpZGVyID0gcHJvdmlkZXI7XG59XG5cbmZ1bmN0aW9uIGdldFJlZ2lzdGVyT3B0aW9ucyhlc21Ib29rQ29uZmlnKSB7XG4gIGlmIChfb3B0aW9uYWxDaGFpbihbZXNtSG9va0NvbmZpZywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLm9ubHlJbmNsdWRlSW5zdHJ1bWVudGVkTW9kdWxlc10pKSB7XG4gICAgY29uc3QgeyBhZGRIb29rTWVzc2FnZVBvcnQgfSA9IGltcG9ydEluVGhlTWlkZGxlLmNyZWF0ZUFkZEhvb2tNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIC8vIElmIHRoZSB1c2VyIHN1cHBsaWVkIGluY2x1ZGUsIHdlIG5lZWQgdG8gdXNlIHRoYXQgYXMgYSBzdGFydGluZyBwb2ludCBvciB1c2UgYW4gZW1wdHkgYXJyYXkgdG8gZW5zdXJlIG5vIG1vZHVsZXNcbiAgICAvLyBhcmUgd3JhcHBlZCBpZiB0aGV5IGFyZSBub3QgaG9va2VkXG4gICAgcmV0dXJuIHsgZGF0YTogeyBhZGRIb29rTWVzc2FnZVBvcnQsIGluY2x1ZGU6IGVzbUhvb2tDb25maWcuaW5jbHVkZSB8fCBbXSB9LCB0cmFuc2Zlckxpc3Q6IFthZGRIb29rTWVzc2FnZVBvcnRdIH07XG4gIH1cblxuICByZXR1cm4geyBkYXRhOiBlc21Ib29rQ29uZmlnIH07XG59XG5cbi8qKiBJbml0aWFsaXplIHRoZSBFU00gbG9hZGVyLiAqL1xuZnVuY3Rpb24gbWF5YmVJbml0aWFsaXplRXNtTG9hZGVyKGVzbUhvb2tDb25maWcpIHtcbiAgY29uc3QgW25vZGVNYWpvciA9IDAsIG5vZGVNaW5vciA9IDBdID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJykubWFwKE51bWJlcik7XG5cbiAgLy8gUmVnaXN0ZXIgaG9vayB3YXMgYWRkZWQgaW4gdjIwLjYuMCBhbmQgdjE4LjE5LjBcbiAgaWYgKG5vZGVNYWpvciA+PSAyMiB8fCAobm9kZU1ham9yID09PSAyMCAmJiBub2RlTWlub3IgPj0gNikgfHwgKG5vZGVNYWpvciA9PT0gMTggJiYgbm9kZU1pbm9yID49IDE5KSkge1xuICAgIC8vIFdlIG5lZWQgdG8gd29yayBhcm91bmQgdXNpbmcgaW1wb3J0Lm1ldGEudXJsIGRpcmVjdGx5IGJlY2F1c2UgamVzdCBjb21wbGFpbnMgYWJvdXQgaXQuXG4gICAgY29uc3QgaW1wb3J0TWV0YVVybCA9XG4gICAgICB0eXBlb2YgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCd1JyArICdybCcpLnBhdGhUb0ZpbGVVUkwoX19maWxlbmFtZSkuaHJlZiA6IChfZG9jdW1lbnRDdXJyZW50U2NyaXB0ICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJiBfZG9jdW1lbnRDdXJyZW50U2NyaXB0LnNyYyB8fCBuZXcgVVJMKCdzZGsvaW5pdE90ZWwuanMnLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSkgIT09ICd1bmRlZmluZWQnID8gKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCd1JyArICdybCcpLnBhdGhUb0ZpbGVVUkwoX19maWxlbmFtZSkuaHJlZiA6IChfZG9jdW1lbnRDdXJyZW50U2NyaXB0ICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJiBfZG9jdW1lbnRDdXJyZW50U2NyaXB0LnNyYyB8fCBuZXcgVVJMKCdzZGsvaW5pdE90ZWwuanMnLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWNvcmUuR0xPQkFMX09CSi5fc2VudHJ5RXNtTG9hZGVySG9va1JlZ2lzdGVyZWQgJiYgaW1wb3J0TWV0YVVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciByZWdpc3RlciBpcyBhdmFpbGFibGUgaW4gdGhlc2UgdmVyc2lvbnNcbiAgICAgICAgbW9kdWxlTW9kdWxlLmRlZmF1bHQucmVnaXN0ZXIoJ2ltcG9ydC1pbi10aGUtbWlkZGxlL2hvb2subWpzJywgaW1wb3J0TWV0YVVybCwgZ2V0UmVnaXN0ZXJPcHRpb25zKGVzbUhvb2tDb25maWcpKTtcbiAgICAgICAgY29yZS5HTE9CQUxfT0JKLl9zZW50cnlFc21Mb2FkZXJIb29rUmVnaXN0ZXJlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb3JlLmxvZ2dlci53YXJuKCdGYWlsZWQgdG8gcmVnaXN0ZXIgRVNNIGhvb2snLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1tTZW50cnldIFlvdSBhcmUgdXNpbmcgTm9kZS5qcyBpbiBFU00gbW9kZSAoXCJpbXBvcnQgc3ludGF4XCIpLiBUaGUgU2VudHJ5IE5vZGUuanMgU0RLIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggRVNNIGluIE5vZGUuanMgdmVyc2lvbnMgYmVmb3JlIDE4LjE5LjAgb3IgYmVmb3JlIDIwLjYuMC4gUGxlYXNlIGVpdGhlciBidWlsZCB5b3VyIGFwcGxpY2F0aW9uIHdpdGggQ29tbW9uSlMgKFwicmVxdWlyZSgpIHN5bnRheFwiKSwgb3IgdXNlIHZlcnNpb24gNy54IG9mIHRoZSBTZW50cnkgTm9kZS5qcyBTREsuJyxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcmVsb2FkIE9wZW5UZWxlbWV0cnkgZm9yIE5vZGUuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uIGVhcmx5LCBidXQgc2V0IHVwIFNlbnRyeSBsYXRlci5cbiAqIEJ5IHByZWxvYWRpbmcgdGhlIE9URUwgaW5zdHJ1bWVudGF0aW9uIHdyYXBwaW5nIHN0aWxsIGhhcHBlbnMgZWFybHkgZW5vdWdoIHRoYXQgZXZlcnl0aGluZyB3b3Jrcy5cbiAqL1xuZnVuY3Rpb24gcHJlbG9hZE9wZW5UZWxlbWV0cnkob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgZGVidWcgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGRlYnVnKSB7XG4gICAgY29yZS5sb2dnZXIuZW5hYmxlKCk7XG4gICAgc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCk7XG4gIH1cblxuICBpZiAoIWNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICBtYXliZUluaXRpYWxpemVFc21Mb2FkZXIob3B0aW9ucy5yZWdpc3RlckVzbUxvYWRlckhvb2tzKTtcbiAgfVxuXG4gIC8vIFRoZXNlIGFyZSBhbGwgaW50ZWdyYXRpb25zIHRoYXQgd2UgbmVlZCB0byBwcmUtbG9hZCB0byBlbnN1cmUgdGhleSBhcmUgc2V0IHVwIGJlZm9yZSBhbnkgb3RoZXIgY29kZSBydW5zXG4gIGdldFByZWxvYWRNZXRob2RzKG9wdGlvbnMuaW50ZWdyYXRpb25zKS5mb3JFYWNoKGZuID0+IHtcbiAgICBmbigpO1xuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb3JlLmxvZ2dlci5sb2coYFtTZW50cnldIFByZWxvYWRlZCAke2ZuLmlkfSBpbnN0cnVtZW50YXRpb25gKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRQcmVsb2FkTWV0aG9kcyhpbnRlZ3JhdGlvbk5hbWVzKSB7XG4gIGNvbnN0IGluc3RydW1lbnRzID0gaW5kZXguZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpO1xuXG4gIGlmICghaW50ZWdyYXRpb25OYW1lcykge1xuICAgIHJldHVybiBpbnN0cnVtZW50cztcbiAgfVxuXG4gIHJldHVybiBpbnN0cnVtZW50cy5maWx0ZXIoaW5zdHJ1bWVudGF0aW9uID0+IGludGVncmF0aW9uTmFtZXMuaW5jbHVkZXMoaW5zdHJ1bWVudGF0aW9uLmlkKSk7XG59XG5cbi8qKiBKdXN0IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIHNldHVwT3RlbChjbGllbnQpIHtcbiAgLy8gQ3JlYXRlIGFuZCBjb25maWd1cmUgTm9kZVRyYWNlclByb3ZpZGVyXG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IHNka1RyYWNlQmFzZS5CYXNpY1RyYWNlclByb3ZpZGVyKHtcbiAgICBzYW1wbGVyOiBuZXcgb3BlbnRlbGVtZXRyeS5TZW50cnlTYW1wbGVyKGNsaWVudCksXG4gICAgcmVzb3VyY2U6IG5ldyByZXNvdXJjZXMuUmVzb3VyY2Uoe1xuICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiAnbm9kZScsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLlNFTVJFU0FUVFJTX1NFUlZJQ0VfTkFNRVNQQUNFXTogJ3NlbnRyeScsXG4gICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfVkVSU0lPTl06IGNvcmUuU0RLX1ZFUlNJT04sXG4gICAgfSksXG4gICAgZm9yY2VGbHVzaFRpbWVvdXRNaWxsaXM6IDUwMCxcbiAgfSk7XG4gIHByb3ZpZGVyLmFkZFNwYW5Qcm9jZXNzb3IoXG4gICAgbmV3IG9wZW50ZWxlbWV0cnkuU2VudHJ5U3BhblByb2Nlc3Nvcih7XG4gICAgICB0aW1lb3V0OiBjbGllbnQuZ2V0T3B0aW9ucygpLm1heFNwYW5XYWl0RHVyYXRpb24sXG4gICAgfSksXG4gICk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcHJvdmlkZXJcbiAgcHJvdmlkZXIucmVnaXN0ZXIoe1xuICAgIHByb3BhZ2F0b3I6IG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVByb3BhZ2F0b3IoKSxcbiAgICBjb250ZXh0TWFuYWdlcjogbmV3IGNvbnRleHRNYW5hZ2VyLlNlbnRyeUNvbnRleHRNYW5hZ2VyKCksXG4gIH0pO1xuXG4gIHJldHVybiBwcm92aWRlcjtcbn1cblxuLyoqXG4gKiBTZXR1cCB0aGUgT1RFTCBsb2dnZXIgdG8gdXNlIG91ciBvd24gbG9nZ2VyLlxuICovXG5mdW5jdGlvbiBzZXR1cE9wZW5UZWxlbWV0cnlMb2dnZXIoKSB7XG4gIGNvbnN0IG90ZWxMb2dnZXIgPSBuZXcgUHJveHkoY29yZS5sb2dnZXIgLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIGNvbnN0IGFjdHVhbFByb3AgPSBwcm9wID09PSAndmVyYm9zZScgPyAnZGVidWcnIDogcHJvcDtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIGFjdHVhbFByb3AsIHJlY2VpdmVyKTtcbiAgICB9LFxuICB9KTtcblxuICAvLyBEaXNhYmxlIGRpYWcsIHRvIGVuc3VyZSB0aGlzIHdvcmtzIGV2ZW4gaWYgY2FsbGVkIG11bHRpcGxlIHRpbWVzXG4gIGFwaS5kaWFnLmRpc2FibGUoKTtcbiAgYXBpLmRpYWcuc2V0TG9nZ2VyKG90ZWxMb2dnZXIsIGFwaS5EaWFnTG9nTGV2ZWwuREVCVUcpO1xufVxuXG5leHBvcnRzLmluaXRPcGVuVGVsZW1ldHJ5ID0gaW5pdE9wZW5UZWxlbWV0cnk7XG5leHBvcnRzLm1heWJlSW5pdGlhbGl6ZUVzbUxvYWRlciA9IG1heWJlSW5pdGlhbGl6ZUVzbUxvYWRlcjtcbmV4cG9ydHMucHJlbG9hZE9wZW5UZWxlbWV0cnkgPSBwcmVsb2FkT3BlblRlbGVtZXRyeTtcbmV4cG9ydHMuc2V0dXBPdGVsID0gc2V0dXBPdGVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdE90ZWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => ( nativeHttpModule)), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => ( null));\n            const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => ( null));\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcz9lNWM2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqIEFkZHMgYW4gb3JpZ2luIHRvIGFuIE9URUwgU3Bhbi4gKi9cbmZ1bmN0aW9uIGFkZE9yaWdpblRvU3BhbihzcGFuLCBvcmlnaW4pIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgb3JpZ2luKTtcbn1cblxuZXhwb3J0cy5hZGRPcmlnaW5Ub1NwYW4gPSBhZGRPcmlnaW5Ub1NwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRPcmlnaW5Ub1NwYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2NvbW1vbmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBLFNBQVMsVUFBYztBQUN2Qjs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanM/MjRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiogRGV0ZWN0IENvbW1vbkpTLiAqL1xuZnVuY3Rpb24gaXNDanMoKSB7XG4gIHJldHVybiB0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydHMuaXNDanMgPSBpc0Nqcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbmpzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsaUJBQWlCLG1CQUFPLENBQUMsc0lBQWU7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsMkNBQTJDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzPzZiMDEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL2NvbW1vbmpzLmpzJyk7XG5cbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gKHBrZykgPT4gKHtcbiAgcGFja2FnZTogcGtnLFxuICAnamF2YXNjcmlwdC5pc19janMnOiBjb21tb25qcy5pc0NqcygpLFxufSk7XG5cbmV4cG9ydHMuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const client = core.getClient();\n  if (\n    !_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasTracingEnabled()\n  ) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNEhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsZUFBZSxtQkFBTyxDQUFDLDBLQUFxQjtBQUM1QyxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsc0lBQWU7QUFDeEMsNENBQTRDLG1CQUFPLENBQUMsNExBQTBDOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxvRUFBb0UsTUFBTTtBQUN0RztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esc0JBQXNCLE1BQU0saUxBQWlMLEtBQUs7QUFDbE47QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanM/NWQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlJDEgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcycpO1xuXG4vKipcbiAqIENoZWNrcyBhbmQgd2FybnMgaWYgYSBmcmFtZXdvcmsgaXNuJ3Qgd3JhcHBlZCBieSBvcGVudGVsZW1ldHJ5LlxuICovXG5mdW5jdGlvbiBlbnN1cmVJc1dyYXBwZWQoXG4gIG1heWJlV3JhcHBlZEZ1bmN0aW9uLFxuICBuYW1lLFxuKSB7XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChcbiAgICAhX29wdGlvbmFsQ2hhaW4oW2NsaWVudCwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmdldE9wdGlvbnMsICdjYWxsJywgXzIgPT4gXzIoKSwgJ2FjY2VzcycsIF8zID0+IF8zLmRpc2FibGVJbnN0cnVtZW50YXRpb25XYXJuaW5nc10pICYmXG4gICAgIWNvcmUkMS5pc1dyYXBwZWQobWF5YmVXcmFwcGVkRnVuY3Rpb24pICYmXG4gICAgY29yZS5pc0VuYWJsZWQoKSAmJlxuICAgIGNvcmUuaGFzVHJhY2luZ0VuYWJsZWQoKVxuICApIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGlmIChjb21tb25qcy5pc0NqcygpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBUaGlzIGlzIGxpa2VseSBiZWNhdXNlIHlvdSByZXF1aXJlZC9pbXBvcnRlZCAke25hbWV9IGJlZm9yZSBjYWxsaW5nIFxcYFNlbnRyeS5pbml0KClcXGAuYCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluaXRpYWxpemUgU2VudHJ5IGluIGEgc2VwYXJhdGUgZmlsZSB0aGF0IHlvdSBcXGAtLWltcG9ydFxcYCB3aGVuIHJ1bm5pbmcgbm9kZSwgc2VlOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy8ke25hbWV9L2luc3RhbGwvZXNtLy5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29yZS5nZXRHbG9iYWxTY29wZSgpLnNldENvbnRleHQoJ21pc3NpbmdfaW5zdHJ1bWVudGF0aW9uJywgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQobmFtZSkpO1xuICB9XG59XG5cbmV4cG9ydHMuZW5zdXJlSXNXcmFwcGVkID0gZW5zdXJlSXNXcmFwcGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5zdXJlSXNXcmFwcGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options && options.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2VudlRvQm9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzPzU1ZjEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgRkFMU1lfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWydmYWxzZScsICdmJywgJ24nLCAnbm8nLCAnb2ZmJywgJzAnXSk7XG5jb25zdCBUUlVUSFlfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWyd0cnVlJywgJ3QnLCAneScsICd5ZXMnLCAnb24nLCAnMSddKTtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB3aGljaCBjYXN0cyBhbiBFTlYgdmFyaWFibGUgdmFsdWUgdG8gYHRydWVgIG9yIGBmYWxzZWAgdXNpbmcgdGhlIGNvbnN0YW50cyBkZWZpbmVkIGFib3ZlLlxuICogSW4gc3RyaWN0IG1vZGUsIGl0IG1heSByZXR1cm4gYG51bGxgIGlmIHRoZSB2YWx1ZSBkb2Vzbid0IG1hdGNoIGFueSBvZiB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZW52IHZhcmlhYmxlXG4gKiBAcGFyYW0gb3B0aW9ucyAtLSBPbmx5IGhhcyBgc3RyaWN0YCBrZXkgZm9yIG5vdywgd2hpY2ggcmVxdWlyZXMgYSBzdHJpY3QgbWF0Y2ggZm9yIGB0cnVlYCBpbiBUUlVUSFlfRU5WX1ZBTFVFU1xuICogQHJldHVybnMgdHJ1ZS9mYWxzZSBpZiB0aGUgbG93ZXJjYXNlIHZhbHVlIG1hdGNoZXMgdGhlIHByZWRlZmluZWQgdmFsdWVzIGFib3ZlLiBJZiBub3QsIG51bGwgaW4gc3RyaWN0IG1vZGUsXG4gKiAgICAgICAgICBhbmQgQm9vbGVhbih2YWx1ZSkgaW4gbG9vc2UgbW9kZS5cbiAqL1xuZnVuY3Rpb24gZW52VG9Cb29sKHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKEZBTFNZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFRSVVRIWV9FTlZfVkFMVUVTLmhhcyhub3JtYWxpemVkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QgPyBudWxsIDogQm9vbGVhbih2YWx1ZSk7XG59XG5cbmV4cG9ydHMuRkFMU1lfRU5WX1ZBTFVFUyA9IEZBTFNZX0VOVl9WQUxVRVM7XG5leHBvcnRzLlRSVVRIWV9FTlZfVkFMVUVTID0gVFJVVEhZX0VOVl9WQUxVRVM7XG5leHBvcnRzLmVudlRvQm9vbCA9IGVudlRvQm9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudlRvQm9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vycm9yaGFuZGxpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsdUlBQW1COztBQUU5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vycm9yaGFuZGxpbmcuanM/ODUyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUID0gMjAwMDtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGxvZ0FuZEV4aXRQcm9jZXNzKGVycm9yKSB7XG4gIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH0pO1xuXG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKGNsaWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci53YXJuKCdObyBOb2RlQ2xpZW50IHdhcyBkZWZpbmVkLCB3ZSBhcmUgZXhpdGluZyB0aGUgcHJvY2VzcyBub3cuJyk7XG4gICAgZ2xvYmFsLnByb2Nlc3MuZXhpdCgxKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0gY2xpZW50LmdldE9wdGlvbnMoKTtcbiAgY29uc3QgdGltZW91dCA9XG4gICAgKG9wdGlvbnMgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQgPiAwICYmIG9wdGlvbnMuc2h1dGRvd25UaW1lb3V0KSB8fFxuICAgIERFRkFVTFRfU0hVVERPV05fVElNRU9VVDtcbiAgY2xpZW50LmNsb3NlKHRpbWVvdXQpLnRoZW4oXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci53YXJuKCdXZSByZWFjaGVkIHRoZSB0aW1lb3V0IGZvciBlbXB0eWluZyB0aGUgcmVxdWVzdCBidWZmZXIsIHN0aWxsIGV4aXRpbmcgbm93IScpO1xuICAgICAgfVxuICAgICAgZ2xvYmFsLnByb2Nlc3MuZXhpdCgxKTtcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydHMubG9nQW5kRXhpdFByb2Nlc3MgPSBsb2dBbmRFeGl0UHJvY2Vzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yaGFuZGxpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2dldFJlcXVlc3RVcmwuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBLFlBQVksU0FBUyxJQUFJLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSztBQUNoRDs7QUFFQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcz9lMGFkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBCdWlsZCBhIGZ1bGwgVVJMIGZyb20gcmVxdWVzdCBvcHRpb25zLiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFVybChyZXF1ZXN0T3B0aW9ucykge1xuICBjb25zdCBwcm90b2NvbCA9IHJlcXVlc3RPcHRpb25zLnByb3RvY29sIHx8ICcnO1xuICBjb25zdCBob3N0bmFtZSA9IHJlcXVlc3RPcHRpb25zLmhvc3RuYW1lIHx8IHJlcXVlc3RPcHRpb25zLmhvc3QgfHwgJyc7XG4gIC8vIERvbid0IGxvZyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAvLyBBbHNvIGRvbid0IGFkZCBwb3J0IGlmIHRoZSBob3N0bmFtZSBhbHJlYWR5IGluY2x1ZGVzIGEgcG9ydFxuICBjb25zdCBwb3J0ID1cbiAgICAhcmVxdWVzdE9wdGlvbnMucG9ydCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA4MCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA0NDMgfHwgL14oLiopOihcXGQrKSQvLnRlc3QoaG9zdG5hbWUpXG4gICAgICA/ICcnXG4gICAgICA6IGA6JHtyZXF1ZXN0T3B0aW9ucy5wb3J0fWA7XG4gIGNvbnN0IHBhdGggPSByZXF1ZXN0T3B0aW9ucy5wYXRoID8gcmVxdWVzdE9wdGlvbnMucGF0aCA6ICcvJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BvcnR9JHtwYXRofWA7XG59XG5cbmV4cG9ydHMuZ2V0UmVxdWVzdFVybCA9IGdldFJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL21vZHVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGtCQUFrQixtQkFBTyxDQUFDLDRCQUFXO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyw0SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsVUFBVSx1QkFBdUI7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQyxHQUFHLEtBQUs7QUFDOUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL21vZHVsZS5qcz9hZjBkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogbm9ybWFsaXplcyBXaW5kb3dzIHBhdGhzICovXG5mdW5jdGlvbiBub3JtYWxpemVXaW5kb3dzUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLnJlcGxhY2UoL15bQS1aXTovLCAnJykgLy8gcmVtb3ZlIFdpbmRvd3Mtc3R5bGUgcHJlZml4XG4gICAgLnJlcGxhY2UoL1xcXFwvZywgJy8nKTsgLy8gcmVwbGFjZSBhbGwgYFxcYCBpbnN0YW5jZXMgd2l0aCBgL2Bcbn1cblxuLyoqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIG1vZHVsZSBuYW1lIGZyb20gYSBmaWxlbmFtZSAqL1xuZnVuY3Rpb24gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lKFxuICBiYXNlUGF0aCA9IHByb2Nlc3MuYXJndlsxXSA/IGNvcmUuZGlybmFtZShwcm9jZXNzLmFyZ3ZbMV0pIDogcHJvY2Vzcy5jd2QoKSxcbiAgaXNXaW5kb3dzID0gbm9kZV9wYXRoLnNlcCA9PT0gJ1xcXFwnLFxuKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRCYXNlID0gaXNXaW5kb3dzID8gbm9ybWFsaXplV2luZG93c1BhdGgoYmFzZVBhdGgpIDogYmFzZVBhdGg7XG5cbiAgcmV0dXJuIChmaWxlbmFtZSkgPT4ge1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxpemVkRmlsZW5hbWUgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBsZXQgeyBkaXIsIGJhc2U6IGZpbGUsIGV4dCB9ID0gbm9kZV9wYXRoLnBvc2l4LnBhcnNlKG5vcm1hbGl6ZWRGaWxlbmFtZSk7XG5cbiAgICBpZiAoZXh0ID09PSAnLmpzJyB8fCBleHQgPT09ICcubWpzJyB8fCBleHQgPT09ICcuY2pzJykge1xuICAgICAgZmlsZSA9IGZpbGUuc2xpY2UoMCwgZXh0Lmxlbmd0aCAqIC0xKTtcbiAgICB9XG5cbiAgICBpZiAoIWRpcikge1xuICAgICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgICBkaXIgPSAnLic7XG4gICAgfVxuXG4gICAgY29uc3QgbiA9IGRpci5sYXN0SW5kZXhPZignL25vZGVfbW9kdWxlcycpO1xuICAgIGlmIChuID4gLTEpIHtcbiAgICAgIHJldHVybiBgJHtkaXIuc2xpY2UobiArIDE0KS5yZXBsYWNlKC9cXC8vZywgJy4nKX06JHtmaWxlfWA7XG4gICAgfVxuXG4gICAgLy8gTGV0J3Mgc2VlIGlmIGl0J3MgYSBwYXJ0IG9mIHRoZSBtYWluIG1vZHVsZVxuICAgIC8vIFRvIGJlIGEgcGFydCBvZiBtYWluIG1vZHVsZSwgaXQgaGFzIHRvIHNoYXJlIHRoZSBzYW1lIGJhc2VcbiAgICBpZiAoZGlyLnN0YXJ0c1dpdGgobm9ybWFsaXplZEJhc2UpKSB7XG4gICAgICBsZXQgbW9kdWxlTmFtZSA9IGRpci5zbGljZShub3JtYWxpemVkQmFzZS5sZW5ndGggKyAxKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcblxuICAgICAgaWYgKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgbW9kdWxlTmFtZSArPSAnOic7XG4gICAgICB9XG4gICAgICBtb2R1bGVOYW1lICs9IGZpbGU7XG5cbiAgICAgIHJldHVybiBtb2R1bGVOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlO1xuICB9O1xufVxuXG5leHBvcnRzLmNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZSA9IGNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return core.flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return core.flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanM/YmY5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IFNJTkdMRV9BUkdfQ09NTUFORFMgPSBbJ2dldCcsICdzZXQnLCAnc2V0ZXgnXTtcblxuY29uc3QgR0VUX0NPTU1BTkRTID0gWydnZXQnLCAnbWdldCddO1xuY29uc3QgU0VUX0NPTU1BTkRTID0gWydzZXQnLCAnc2V0ZXgnXTtcbi8vIHRvZG86IGRlbCwgZXhwaXJlXG5cbi8qKiBDaGVja3MgaWYgYSBnaXZlbiBjb21tYW5kIGlzIGluIHRoZSBsaXN0IG9mIHJlZGlzIGNvbW1hbmRzLlxuICogIFVzZWZ1bCBiZWNhdXNlIGNvbW1hbmRzIGNhbiBjb21lIGluIGxvd2VyY2FzZSBvciB1cHBlcmNhc2UgKGRlcGVuZGluZyBvbiB0aGUgbGlicmFyeSkuICovXG5mdW5jdGlvbiBpc0luQ29tbWFuZHMocmVkaXNDb21tYW5kcywgY29tbWFuZCkge1xuICByZXR1cm4gcmVkaXNDb21tYW5kcy5pbmNsdWRlcyhjb21tYW5kLnRvTG93ZXJDYXNlKCkpO1xufVxuXG4vKiogRGV0ZXJtaW5lIGNhY2hlIG9wZXJhdGlvbiBiYXNlZCBvbiByZWRpcyBzdGF0ZW1lbnQgKi9cbmZ1bmN0aW9uIGdldENhY2hlT3BlcmF0aW9uKFxuICBjb21tYW5kLFxuKSB7XG4gIGlmIChpc0luQ29tbWFuZHMoR0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUuZ2V0JztcbiAgfSBlbHNlIGlmIChpc0luQ29tbWFuZHMoU0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUucHV0JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSB7XG4gIHJldHVybiBwcmVmaXhlcy5zb21lKHByZWZpeCA9PiBrZXkuc3RhcnRzV2l0aChwcmVmaXgpKTtcbn1cblxuLyoqIFNhZmVseSBjb252ZXJ0cyBhIHJlZGlzIGtleSB0byBhIHN0cmluZyAoY29tbWEtc2VwYXJhdGVkIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBrZXlzKSAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKSB7XG4gIHRyeSB7XG4gICAgaWYgKGNtZEFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcHJvY2Vzc0FyZyA9IChhcmcpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCBCdWZmZXIuaXNCdWZmZXIoYXJnKSkge1xuICAgICAgICByZXR1cm4gW2FyZy50b1N0cmluZygpXTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgIHJldHVybiBjb3JlLmZsYXR0ZW4oYXJnLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWyc8dW5rbm93bj4nXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZmlyc3RBcmcgPSBjbWRBcmdzWzBdO1xuICAgIGlmIChpc0luQ29tbWFuZHMoU0lOR0xFX0FSR19DT01NQU5EUywgcmVkaXNDb21tYW5kKSAmJiBmaXJzdEFyZyAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0FyZyhmaXJzdEFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcmUuZmxhdHRlbihjbWRBcmdzLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSByZWRpcyBvcGVyYXRpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgXCJjYWNoZSBvcGVyYXRpb25cIiBieSBjaGVja2luZyBpZiBhIGtleSBpcyBwcmVmaXhlZC5cbiAqICBXZSBvbmx5IHN1cHBvcnQgY2VydGFpbiBjb21tYW5kcyAoc3VjaCBhcyAnc2V0JywgJ2dldCcsICdtZ2V0JykuICovXG5mdW5jdGlvbiBzaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwga2V5cywgcHJlZml4ZXMpIHtcbiAgaWYgKCFnZXRDYWNoZU9wZXJhdGlvbihyZWRpc0NvbW1hbmQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGlmIChrZXlIYXNQcmVmaXgoa2V5LCBwcmVmaXhlcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKiBDYWxjdWxhdGVzIHNpemUgYmFzZWQgb24gdGhlIGNhY2hlIHJlc3BvbnNlIHZhbHVlICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKSB7XG4gIGNvbnN0IGdldFNpemUgPSAodmFsdWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHJldHVybiB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB2YWx1ZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5sZW5ndGg7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzcG9uc2UpXG4gICAgPyByZXNwb25zZS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gZ2V0U2l6ZShjdXJyKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IChhY2MgIT09IHVuZGVmaW5lZCA/IGFjYyArIHNpemUgOiBzaXplKSA6IGFjYztcbiAgICAgIH0sIDApXG4gICAgOiBnZXRTaXplKHJlc3BvbnNlKTtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=2.0.0'];\n\n/**\n * Custom instrumentation for nestjs event-emitter\n *\n * This hooks into the `OnEvent` decorator, which is applied on event handlers.\n */\nclass SentryNestEventInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/event-emitter';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestEventInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs-event', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(\n      SentryNestEventInstrumentation.COMPONENT,\n      supportedVersions,\n    );\n\n    moduleDef.files.push(this._getOnEventFileInstrumentation(supportedVersions));\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @OnEvent decorator.\n   */\n   _getOnEventFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/event-emitter/dist/decorators/on-event.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.OnEvent)) {\n          this._unwrap(moduleExports, 'OnEvent');\n        }\n        this._wrap(moduleExports, 'OnEvent', this._createWrapOnEvent());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'OnEvent');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @OnEvent decorator.\n   */\n   _createWrapOnEvent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapOnEvent(original) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return function wrappedOnEvent(event, options) {\n        const eventName = Array.isArray(event)\n          ? event.join(',')\n          : typeof event === 'string' || typeof event === 'symbol'\n            ? event.toString()\n            : '<unknown_event>';\n\n        // Get the original decorator result\n        const decoratorResult = original(event, options);\n\n        // Return a new decorator function that wraps the handler\n        return function (target, propertyKey, descriptor) {\n          if (!descriptor.value || typeof descriptor.value !== 'function' || target.__SENTRY_INTERNAL__) {\n            return decoratorResult(target, propertyKey, descriptor);\n          }\n\n          // Get the original handler\n          const originalHandler = descriptor.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const handlerName = originalHandler.name || propertyKey;\n\n          // Instrument the handler\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          descriptor.value = async function (...args) {\n            return core.startSpan(helpers.getEventSpanOptions(eventName), async () => {\n              try {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const result = await originalHandler.apply(this, args);\n                return result;\n              } catch (error) {\n                // exceptions from event handlers are not caught by global error filter\n                core.captureException(error);\n                throw error;\n              }\n            });\n          };\n\n          // Preserve the original function name\n          Object.defineProperty(descriptor.value, 'name', {\n            value: handlerName,\n            configurable: true,\n          });\n\n          // Apply the original decorator\n          return decoratorResult(target, propertyKey, descriptor);\n        };\n      };\n    };\n  }\n} SentryNestEventInstrumentation.__initStatic(); SentryNestEventInstrumentation.__initStatic2();\n\nexports.SentryNestEventInstrumentation = SentryNestEventInstrumentation;\n//# sourceMappingURL=sentry-nest-event-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9zZW50cnktbmVzdC1ldmVudC1pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyx3REFBd0QseUNBQXlDLDBDQUEwQyxvREFBb0QsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3UCxlQUFlLG1CQUFPLENBQUMsbUtBQXFCO0FBQzVDLHdCQUF3QixtQkFBTyxDQUFDLG9NQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsaUpBQWM7O0FBRXRDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0NBQStDOztBQUVqRCxzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9zZW50cnktbmVzdC1ldmVudC1pbnN0cnVtZW50YXRpb24uanM/NzljMyJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSBcIi9tb25pdG9yaW5nXCI7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlJDEgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuanMnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49Mi4wLjAnXTtcblxuLyoqXG4gKiBDdXN0b20gaW5zdHJ1bWVudGF0aW9uIGZvciBuZXN0anMgZXZlbnQtZW1pdHRlclxuICpcbiAqIFRoaXMgaG9va3MgaW50byB0aGUgYE9uRXZlbnRgIGRlY29yYXRvciwgd2hpY2ggaXMgYXBwbGllZCBvbiBldmVudCBoYW5kbGVycy5cbiAqL1xuY2xhc3MgU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgc3RhdGljICBfX2luaXRTdGF0aWMoKSB7dGhpcy5DT01QT05FTlQgPSAnQG5lc3Rqcy9ldmVudC1lbWl0dGVyJzt9XG4gICBzdGF0aWMgIF9faW5pdFN0YXRpYzIoKSB7dGhpcy5DT01NT05fQVRUUklCVVRFUyA9IHtcbiAgICBjb21wb25lbnQ6IFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbi5DT01QT05FTlQsXG4gIH07fVxuXG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdzZW50cnktbmVzdGpzLWV2ZW50JywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW5zdHJ1bWVudGF0aW9uIGJ5IGRlZmluaW5nIHRoZSBtb2R1bGVzIHRvIGJlIHBhdGNoZWQuXG4gICAqL1xuICAgaW5pdCgpIHtcbiAgICBjb25zdCBtb2R1bGVEZWYgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uLkNPTVBPTkVOVCxcbiAgICAgIHN1cHBvcnRlZFZlcnNpb25zLFxuICAgICk7XG5cbiAgICBtb2R1bGVEZWYuZmlsZXMucHVzaCh0aGlzLl9nZXRPbkV2ZW50RmlsZUluc3RydW1lbnRhdGlvbihzdXBwb3J0ZWRWZXJzaW9ucykpO1xuICAgIHJldHVybiBtb2R1bGVEZWY7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgdGhlIEBPbkV2ZW50IGRlY29yYXRvci5cbiAgICovXG4gICBfZ2V0T25FdmVudEZpbGVJbnN0cnVtZW50YXRpb24odmVyc2lvbnMpIHtcbiAgICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRmlsZShcbiAgICAgICdAbmVzdGpzL2V2ZW50LWVtaXR0ZXIvZGlzdC9kZWNvcmF0b3JzL29uLWV2ZW50LmRlY29yYXRvci5qcycsXG4gICAgICB2ZXJzaW9ucyxcbiAgICAgIChtb2R1bGVFeHBvcnRzKSA9PiB7XG4gICAgICAgIGlmIChjb3JlJDEuaXNXcmFwcGVkKG1vZHVsZUV4cG9ydHMuT25FdmVudCkpIHtcbiAgICAgICAgICB0aGlzLl91bndyYXAobW9kdWxlRXhwb3J0cywgJ09uRXZlbnQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93cmFwKG1vZHVsZUV4cG9ydHMsICdPbkV2ZW50JywgdGhpcy5fY3JlYXRlV3JhcE9uRXZlbnQoKSk7XG4gICAgICAgIHJldHVybiBtb2R1bGVFeHBvcnRzO1xuICAgICAgfSxcbiAgICAgIChtb2R1bGVFeHBvcnRzKSA9PiB7XG4gICAgICAgIHRoaXMuX3Vud3JhcChtb2R1bGVFeHBvcnRzLCAnT25FdmVudCcpO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciB0aGUgQE9uRXZlbnQgZGVjb3JhdG9yLlxuICAgKi9cbiAgIF9jcmVhdGVXcmFwT25FdmVudCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHJldHVybiBmdW5jdGlvbiB3cmFwT25FdmVudChvcmlnaW5hbCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIHJldHVybiBmdW5jdGlvbiB3cmFwcGVkT25FdmVudChldmVudCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBBcnJheS5pc0FycmF5KGV2ZW50KVxuICAgICAgICAgID8gZXZlbnQuam9pbignLCcpXG4gICAgICAgICAgOiB0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBldmVudCA9PT0gJ3N5bWJvbCdcbiAgICAgICAgICAgID8gZXZlbnQudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiAnPHVua25vd25fZXZlbnQ+JztcblxuICAgICAgICAvLyBHZXQgdGhlIG9yaWdpbmFsIGRlY29yYXRvciByZXN1bHRcbiAgICAgICAgY29uc3QgZGVjb3JhdG9yUmVzdWx0ID0gb3JpZ2luYWwoZXZlbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIFJldHVybiBhIG5ldyBkZWNvcmF0b3IgZnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgaGFuZGxlclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IudmFsdWUgfHwgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09ICdmdW5jdGlvbicgfHwgdGFyZ2V0Ll9fU0VOVFJZX0lOVEVSTkFMX18pIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JSZXN1bHQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gR2V0IHRoZSBvcmlnaW5hbCBoYW5kbGVyXG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxIYW5kbGVyID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgY29uc3QgaGFuZGxlck5hbWUgPSBvcmlnaW5hbEhhbmRsZXIubmFtZSB8fCBwcm9wZXJ0eUtleTtcblxuICAgICAgICAgIC8vIEluc3RydW1lbnQgdGhlIGhhbmRsZXJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUuc3RhcnRTcGFuKGhlbHBlcnMuZ2V0RXZlbnRTcGFuT3B0aW9ucyhldmVudE5hbWUpLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9yaWdpbmFsSGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbnMgZnJvbSBldmVudCBoYW5kbGVycyBhcmUgbm90IGNhdWdodCBieSBnbG9iYWwgZXJyb3IgZmlsdGVyXG4gICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFByZXNlcnZlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBuYW1lXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc2NyaXB0b3IudmFsdWUsICduYW1lJywge1xuICAgICAgICAgICAgdmFsdWU6IGhhbmRsZXJOYW1lLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gQXBwbHkgdGhlIG9yaWdpbmFsIGRlY29yYXRvclxuICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JSZXN1bHQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn0gU2VudHJ5TmVzdEV2ZW50SW5zdHJ1bWVudGF0aW9uLl9faW5pdFN0YXRpYygpOyBTZW50cnlOZXN0RXZlbnRJbnN0cnVtZW50YXRpb24uX19pbml0U3RhdGljMigpO1xuXG5leHBvcnRzLlNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbiA9IFNlbnRyeU5lc3RFdmVudEluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbnRyeS1uZXN0LWV2ZW50LWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\n\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n   static  __initStatic() {this.COMPONENT = '@nestjs/common';}\n   static  __initStatic2() {this.COMMON_ATTRIBUTES = {\n    component: SentryNestInstrumentation.COMPONENT,\n  };}\n\n   constructor(config = {}) {\n    super('sentry-nestjs', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n\n    moduleDef.files.push(\n      this._getInjectableFileInstrumentation(supportedVersions),\n      this._getCatchFileInstrumentation(supportedVersions),\n    );\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n   _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/injectable.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Injectable)) {\n          this._unwrap(moduleExports, 'Injectable');\n        }\n        this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Injectable');\n      },\n    );\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n   _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile(\n      '@nestjs/common/decorators/core/catch.decorator.js',\n      versions,\n      (moduleExports) => {\n        if (core$1.isWrapped(moduleExports.Catch)) {\n          this._unwrap(moduleExports, 'Catch');\n        }\n        this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n        return moduleExports;\n      },\n      (moduleExports) => {\n        this._unwrap(moduleExports, 'Catch');\n      },\n    );\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n   _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n\n                const prevSpan = core.getActiveSpan();\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (span) => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              },\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              },\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              },\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n\n                const parentSpan = core.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), (beforeSpan) => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n\n                      if (parentSpan) {\n                        return core.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                          if (!context._sentryInterceptorInstrumented) {\n                            core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core.startInactiveSpan(\n                              helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'),\n                            );\n                          }\n\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n\n                        if (!context._sentryInterceptorInstrumented) {\n                          core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n\n                        return handleReturnObservable;\n                      }\n                    },\n                  });\n\n                  let returnedObservableInterceptMaybePromise;\n\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (core.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(\n                      observable => {\n                        helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                        return observable;\n                      },\n                      e => {\n                        _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                        _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                        throw e;\n                      },\n                    );\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => ( parentSpan)));\n                  }\n\n                  return returnedObservableInterceptMaybePromise;\n                });\n              },\n            });\n          }\n\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n   _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              },\n            });\n          }\n\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}SentryNestInstrumentation.__initStatic();SentryNestInstrumentation.__initStatic2();\n\nexports.SentryNestInstrumentation = SentryNestInstrumentation;\n//# sourceMappingURL=sentry-nest-instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanM/MjExMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCByZXBsYWNlbWVudHMgPSBbXG4gIFsnamFudWFyeScsICcxJ10sXG4gIFsnZmVicnVhcnknLCAnMiddLFxuICBbJ21hcmNoJywgJzMnXSxcbiAgWydhcHJpbCcsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW5lJywgJzYnXSxcbiAgWydqdWx5JywgJzcnXSxcbiAgWydhdWd1c3QnLCAnOCddLFxuICBbJ3NlcHRlbWJlcicsICc5J10sXG4gIFsnb2N0b2JlcicsICcxMCddLFxuICBbJ25vdmVtYmVyJywgJzExJ10sXG4gIFsnZGVjZW1iZXInLCAnMTInXSxcbiAgWydqYW4nLCAnMSddLFxuICBbJ2ZlYicsICcyJ10sXG4gIFsnbWFyJywgJzMnXSxcbiAgWydhcHInLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuJywgJzYnXSxcbiAgWydqdWwnLCAnNyddLFxuICBbJ2F1ZycsICc4J10sXG4gIFsnc2VwJywgJzknXSxcbiAgWydvY3QnLCAnMTAnXSxcbiAgWydub3YnLCAnMTEnXSxcbiAgWydkZWMnLCAnMTInXSxcbiAgWydzdW5kYXknLCAnMCddLFxuICBbJ21vbmRheScsICcxJ10sXG4gIFsndHVlc2RheScsICcyJ10sXG4gIFsnd2VkbmVzZGF5JywgJzMnXSxcbiAgWyd0aHVyc2RheScsICc0J10sXG4gIFsnZnJpZGF5JywgJzUnXSxcbiAgWydzYXR1cmRheScsICc2J10sXG4gIFsnc3VuJywgJzAnXSxcbiAgWydtb24nLCAnMSddLFxuICBbJ3R1ZScsICcyJ10sXG4gIFsnd2VkJywgJzMnXSxcbiAgWyd0aHUnLCAnNCddLFxuICBbJ2ZyaScsICc1J10sXG4gIFsnc2F0JywgJzYnXSxcbl07XG5cbi8qKlxuICogUmVwbGFjZXMgbmFtZXMgaW4gY3JvbiBleHByZXNzaW9uc1xuICovXG5mdW5jdGlvbiByZXBsYWNlQ3Jvbk5hbWVzKGNyb25FeHByZXNzaW9uKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHMucmVkdWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3JcbiAgICAoYWNjLCBbbmFtZSwgcmVwbGFjZW1lbnRdKSA9PiBhY2MucmVwbGFjZShuZXcgUmVnRXhwKG5hbWUsICdnaScpLCByZXBsYWNlbWVudCksXG4gICAgY3JvbkV4cHJlc3Npb24sXG4gICk7XG59XG5cbmV4cG9ydHMucmVwbGFjZUNyb25OYW1lcyA9IHJlcGxhY2VDcm9uTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jcm9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywwSEFBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vY3Jvbi5qcz8xZDUzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbmNvbnN0IEVSUk9SX1RFWFQgPSAnQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiBDcm9uSm9iIG9ubHkgc3VwcG9ydHMgY3JvbnRhYiBzdHJpbmcnO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgY3JvbmAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0IHsgQ3JvbkpvYiB9IGZyb20gJ2Nyb24nO1xuICpcbiAqIGNvbnN0IENyb25Kb2JXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnRDcm9uKENyb25Kb2IsICdteS1jcm9uLWpvYicpO1xuICpcbiAqIC8vIHVzZSB0aGUgY29uc3RydWN0b3JcbiAqIGNvbnN0IGpvYiA9IG5ldyBDcm9uSm9iV2l0aENoZWNrSW4oJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICpcbiAqIC8vIG9yIGZyb21cbiAqIGNvbnN0IGpvYiA9IENyb25Kb2JXaXRoQ2hlY2tJbi5mcm9tKHsgY3JvblRpbWU6ICcqICogKiAqIConLCBvblRpY2s6ICgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Q3JvbihsaWIsIG1vbml0b3JTbHVnKSB7XG4gIGxldCBqb2JTY2hlZHVsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3MpIHtcbiAgICAgIGNvbnN0IFtjcm9uVGltZSwgb25UaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3RdID0gYXJncztcblxuICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgfVxuXG4gICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRUaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICB0aW1lem9uZTogdGltZVpvbmUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgdGFyZ2V0KGNyb25UaW1lLCBtb25pdG9yZWRUaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3QpO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdmcm9tJykge1xuICAgICAgICByZXR1cm4gKHBhcmFtKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjcm9uVGltZSwgb25UaWNrLCB0aW1lWm9uZSB9ID0gcGFyYW07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNyb25UaW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChqb2JTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGpvYlNjaGVkdWxlZCA9IHRydWU7XG5cbiAgICAgICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICAgICAgcGFyYW0ub25UaWNrID0gYXN5bmMgKGNvbnRleHQsIG9uQ29tcGxldGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBvblRpY2soY29udGV4dCwgb25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiB0YXJnZXQuZnJvbShwYXJhbSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnRDcm9uID0gaW5zdHJ1bWVudENyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGVBQWUsbUJBQU8sQ0FBQyxzSEFBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxnSUFBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsd0lBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vaW5kZXguanM/ZWJiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjcm9uJDEgPSByZXF1aXJlKCcuL2Nyb24uanMnKTtcbmNvbnN0IG5vZGVDcm9uID0gcmVxdWlyZSgnLi9ub2RlLWNyb24uanMnKTtcbmNvbnN0IG5vZGVTY2hlZHVsZSA9IHJlcXVpcmUoJy4vbm9kZS1zY2hlZHVsZS5qcycpO1xuXG4vKiogTWV0aG9kcyB0byBpbnN0cnVtZW50IGNyb24gbGlicmFyaWVzIGZvciBTZW50cnkgY2hlY2staW5zICovXG5jb25zdCBjcm9uID0ge1xuICBpbnN0cnVtZW50Q3JvbjogY3JvbiQxLmluc3RydW1lbnRDcm9uLFxuICBpbnN0cnVtZW50Tm9kZUNyb246IG5vZGVDcm9uLmluc3RydW1lbnROb2RlQ3JvbixcbiAgaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTogbm9kZVNjaGVkdWxlLmluc3RydW1lbnROb2RlU2NoZWR1bGUsXG59O1xuXG5leHBvcnRzLmNyb24gPSBjcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                options.name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone]),\n                },\n              );\n            }\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLWNyb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxlQUFlLG1CQUFPLENBQUMsMEhBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE9BQU8scUJBQXFCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzP2IwODgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLyoqXG4gKiBXcmFwcyB0aGUgYG5vZGUtY3JvbmAgbGlicmFyeSB3aXRoIGNoZWNrLWluIG1vbml0b3JpbmcuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS9ub2RlXCI7XG4gKiBpbXBvcnQgKiBhcyBjcm9uIGZyb20gXCJub2RlLWNyb25cIjtcbiAqXG4gKiBjb25zdCBjcm9uV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Tm9kZUNyb24oY3Jvbik7XG4gKlxuICogY3JvbldpdGhDaGVja0luLnNjaGVkdWxlKFxuICogICBcIiogKiAqICogKlwiLFxuICogICAoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coXCJydW5uaW5nIGEgdGFzayBldmVyeSBtaW51dGVcIik7XG4gKiAgIH0sXG4gKiAgIHsgbmFtZTogXCJteS1jcm9uLWpvYlwiIH0sXG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnROb2RlQ3JvbihsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlJyAmJiB0YXJnZXQuc2NoZWR1bGUpIHtcbiAgICAgICAgLy8gV2hlbiAnZ2V0JyBpcyBjYWxsZWQgZm9yIHNjaGVkdWxlLCByZXR1cm4gYSBwcm94aWVkIHZlcnNpb24gb2YgdGhlIHNjaGVkdWxlIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW2V4cHJlc3Npb24sIGNhbGxiYWNrLCBvcHRpb25zXSA9IGFyZ0FycmF5O1xuXG4gICAgICAgICAgICBpZiAoIV9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8ubmFtZV0pKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBcIm5hbWVcIiBmb3Igc2NoZWR1bGVkIGpvYi4gQSBuYW1lIGlzIHJlcXVpcmVkIGZvciBTZW50cnkgY2hlY2staW4gbW9uaXRvcmluZy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIG1hbnVhbGx5IGNhdGNoIGhlcmUgYW5kIGNhcHR1cmUgdGhlIGV4Y2VwdGlvbiBiZWNhdXNlIG5vZGUtY3JvbiBzd2FsbG93cyBlcnJvcnNcbiAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWNyb24vbm9kZS1jcm9uL2lzc3Vlcy8zOTlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgICAgdGltZXpvbmU6IF9vcHRpb25hbENoYWluKFtvcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi50aW1lem9uZV0pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW2V4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrLCBvcHRpb25zXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlQ3JvbiA9IGluc3RydW1lbnROb2RlQ3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtY3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await _optionalChain([callback, 'optionalCall', _ => _()]);\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLXNjaGVkdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDBIQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw4QkFBOEIsNkRBQTZEO0FBQzNGLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1zY2hlZHVsZS5qcz9jMTc4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBub2RlLXNjaGVkdWxlYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcbiAqXG4gKiBjb25zdCBzY2hlZHVsZVdpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShzY2hlZHVsZSk7XG4gKlxuICogY29uc3Qgam9iID0gc2NoZWR1bGVXaXRoQ2hlY2tJbi5zY2hlZHVsZUpvYignbXktY3Jvbi1qb2InLCAnKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlSm9iJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlSm9iLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW25hbWVPckV4cHJlc3Npb24sIGV4cHJlc3Npb25PckNhbGxiYWNrLCBjYWxsYmFja10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0eXBlb2YgbmFtZU9yRXhwcmVzc2lvbiAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGV4cHJlc3Npb25PckNhbGxiYWNrICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mICdub2RlLXNjaGVkdWxlJyByZXF1aXJlcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mICdzY2hlZHVsZUpvYicgdG8gYmUgYSBqb2IgbmFtZSBzdHJpbmcgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGEgY3JvbnRhYiBzdHJpbmdcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSBuYW1lT3JFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PckNhbGxiYWNrO1xuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgX29wdGlvbmFsQ2hhaW4oW2NhbGxiYWNrLCAnb3B0aW9uYWxDYWxsJywgXyA9PiBfKCldKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGV4cHJlc3Npb24pIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBbbW9uaXRvclNsdWcsIGV4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSA9IGluc3RydW1lbnROb2RlU2NoZWR1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXNjaGVkdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQXVDLElBQUksS0FBZ0I7O0FBRWhGLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcz9iMmY3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n\n\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = childProcess.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = core.DEFAULT_USER_INCLUDES;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.addRequestDataToEvent = core.addRequestDataToEvent;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.extractRequestData = core.extractRequestData;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.continueTrace = opentelemetry.continueTrace;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    setup(initClient) {\n      client = initClient;\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\nfunction onModuleLoad(callback) {\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.require.end').subscribe(() => callback());\n  // eslint-disable-next-line deprecation/deprecation\n  diagnosticsChannel.channel('module.import.asyncEnd').subscribe(() => callback());\n}\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n   _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n   _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  let debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n\n  onModuleLoad(() => {\n    debugImages = core.getFilenameToDebugIdMap(initOptions.stackParser);\n  });\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n// TODO(v9): Update this name and mention in migration docs.\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker );\n        }\n      });\n    },\n  };\n});\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n *\n * @deprecated Use `childProcessIntegration` integration instead. Functionally they are the same. `processThreadBreadcrumbIntegration` will be removed in the next major version.\n */\nconst processThreadBreadcrumbIntegration = childProcessIntegration;\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      core.addBreadcrumb({\n        category: 'worker_thread',\n        message: `Worker thread errored with '${error.message}'`,\n        level: 'error',\n        data: { threadId },\n      });\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELEtBQUs7QUFDN0Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtELGNBQWM7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUEsK0JBQStCO0FBQy9CLDBDQUEwQztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzP2QzOWIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGlhZ25vc3RpY3NDaGFubmVsID0gcmVxdWlyZSgnbm9kZTpkaWFnbm9zdGljc19jaGFubmVsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8vIFRPRE8odjkpOiBVcGRhdGUgdGhpcyBuYW1lIGFuZCBtZW50aW9uIGluIG1pZ3JhdGlvbiBkb2NzLlxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcm9jZXNzQW5kVGhyZWFkQnJlYWRjcnVtYnMnO1xuXG4vKipcbiAqIENhcHR1cmUgYnJlYWRjcnVtYnMgZm9yIGNoaWxkIHByb2Nlc3NlcyBhbmQgd29ya2VyIHRocmVhZHMuXG4gKi9cbmNvbnN0IGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChfY2xpZW50KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGRpYWdub3N0aWNzQ2hhbm5lbC5jaGFubmVsKCdjaGlsZF9wcm9jZXNzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAncHJvY2VzcycgaW4gZXZlbnQpIHtcbiAgICAgICAgICBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGV2ZW50LnByb2Nlc3MgLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ3dvcmtlcl90aHJlYWRzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnd29ya2VyJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMoZXZlbnQud29ya2VyICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuLyoqXG4gKiBDYXB0dXJlIGJyZWFkY3J1bWJzIGZvciBjaGlsZCBwcm9jZXNzZXMgYW5kIHdvcmtlciB0aHJlYWRzLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgY2hpbGRQcm9jZXNzSW50ZWdyYXRpb25gIGludGVncmF0aW9uIGluc3RlYWQuIEZ1bmN0aW9uYWxseSB0aGV5IGFyZSB0aGUgc2FtZS4gYHByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb25gIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5jb25zdCBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG5cbmZ1bmN0aW9uIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoY2hpbGQsIG9wdGlvbnMpIHtcbiAgbGV0IGhhc0V4aXRlZCA9IGZhbHNlO1xuICBsZXQgZGF0YTtcblxuICBjaGlsZFxuICAgIC5vbignc3Bhd24nLCAoKSA9PiB7XG4gICAgICAvLyBUaGlzIGlzIFNlbnRyeSBnZXR0aW5nIG1hY09TIE9TIGNvbnRleHRcbiAgICAgIGlmIChjaGlsZC5zcGF3bmZpbGUgPT09ICcvdXNyL2Jpbi9zd192ZXJzJykge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSB7IHNwYXduZmlsZTogY2hpbGQuc3Bhd25maWxlIH07XG4gICAgICBpZiAob3B0aW9ucy5pbmNsdWRlQ2hpbGRQcm9jZXNzQXJncykge1xuICAgICAgICBkYXRhLnNwYXduYXJncyA9IGNoaWxkLnNwYXduYXJncztcbiAgICAgIH1cbiAgICB9KVxuICAgIC5vbignZXhpdCcsIGNvZGUgPT4ge1xuICAgICAgaWYgKCFoYXNFeGl0ZWQpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBPbmx5IGxvZyBmb3Igbm9uLXplcm8gZXhpdCBjb2Rlc1xuICAgICAgICBpZiAoY29kZSAhPT0gbnVsbCAmJiBjb2RlICE9PSAwKSB7XG4gICAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2hpbGRfcHJvY2VzcycsXG4gICAgICAgICAgICBtZXNzYWdlOiBgQ2hpbGQgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2AsXG4gICAgICAgICAgICBsZXZlbDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKHdvcmtlcikge1xuICBsZXQgdGhyZWFkSWQ7XG5cbiAgd29ya2VyXG4gICAgLm9uKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICB0aHJlYWRJZCA9IHdvcmtlci50aHJlYWRJZDtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICBjYXRlZ29yeTogJ3dvcmtlcl90aHJlYWQnLFxuICAgICAgICBtZXNzYWdlOiBgV29ya2VyIHRocmVhZCBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgIGRhdGE6IHsgdGhyZWFkSWQgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnRzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG5leHBvcnRzLnByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24gPSBwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hpbGRQcm9jZXNzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      core.addConsoleInstrumentationHandler(({ args, level }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n\n        core.addBreadcrumb(\n          {\n            category: 'console',\n            level: core.severityLevelFromString(level),\n            message: core.truncate(util.format.apply(undefined, args), 2048), // 2KB\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n});\n\nexports.consoleIntegration = consoleIntegration;\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMsNEJBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxhQUFhO0FBQzVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcz9iZjJiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCdub2RlOnV0aWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25zb2xlJztcblxuLyoqXG4gKiBDYXB0dXJlIGNvbnNvbGUgbG9ncyBhcyBicmVhZGNydW1icy5cbiAqL1xuY29uc3QgY29uc29sZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNvcmUuYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoKHsgYXJncywgbGV2ZWwgfSkgPT4ge1xuICAgICAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgICAgICAgICBsZXZlbDogY29yZS5zZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCksXG4gICAgICAgICAgICBtZXNzYWdlOiBjb3JlLnRydW5jYXRlKHV0aWwuZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgYXJncyksIDIwNDgpLCAvLyAyS0JcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlucHV0OiBbLi4uYXJnc10sXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLmNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvbnNvbGVJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app]) },\n      os: { ...updatedContext.os, ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os]) },\n      device: { ...updatedContext.device, ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device]) },\n      culture: { ...updatedContext.culture, ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture]) },\n      cloud_resource: { ...updatedContext.cloud_resource, ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource]) },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions ).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = _optionalChain([(process ), 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      resolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      resolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', resolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.16.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsMEJBQTBCLG1CQUFPLENBQUMsNk1BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyx3SUFBdUI7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1CQUFtQjtBQUN6RCxzQ0FBc0MsYUFBYTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mcy5qcz9mNGEyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkZzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWZzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRmlsZVN5c3RlbSc7XG5cbi8qKlxuICogVGhpcyBpbnRlZ3JhdGlvbiB3aWxsIGNyZWF0ZSBzcGFucyBmb3IgYGZzYCBBUEkgb3BlcmF0aW9ucywgbGlrZSByZWFkaW5nIGFuZCB3cml0aW5nIGZpbGVzLlxuICpcbiAqICoqV0FSTklORzoqKiBUaGlzIGludGVncmF0aW9uIG1heSBhZGQgc2lnbmlmaWNhbnQgb3ZlcmhlYWQgdG8geW91ciBhcHBsaWNhdGlvbi4gRXNwZWNpYWxseSBpbiBzY2VuYXJpb3Mgd2l0aCBhIGxvdCBvZlxuICogZmlsZSBJL08sIGxpa2UgZm9yIGV4YW1wbGUgd2hlbiBydW5uaW5nIGEgZnJhbWV3b3JrIGRldiBzZXJ2ZXIsIGluY2x1ZGluZyB0aGlzIGludGVncmF0aW9uIGNhbiBtYXNzaXZlbHkgc2xvdyBkb3duXG4gKiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gZm9yIHRoaXMgaW50ZWdyYXRpb24uXG4gKi9cbmNvbnN0IGZzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKFxuICAoXG4gICAgb3B0aW9uc1xuXG4gPSB7fSxcbiAgKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAgIGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgICAgICAgICBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgICAgICgpID0+XG4gICAgICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRnMuRnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgICAgICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZW5kSG9vayhmdW5jdGlvbk5hbWUsIHsgYXJncywgc3BhbiwgZXJyb3IgfSkge1xuICAgICAgICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShgZnMuJHtmdW5jdGlvbk5hbWV9YCk7XG5cbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdmaWxlJyxcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZmlsZS5mcycsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcuaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfVEFSR0VUX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCd0YXJnZXRfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgncHJlZml4X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9FWElTVElOR19QQVRIX05FV19QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZXhpc3RpbmdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNULmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnc3JjX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkZXN0X2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ29sZF9wYXRoX2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCduZXdfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiBvcHRpb25zLnJlY29yZEVycm9yTWVzc2FnZXNBc1NwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZnNfZXJyb3InLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKSgpO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxuKTtcblxuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX09MRF9QQVRIX05FV19QQVRIID0gWydyZW5hbWUnLCAncmVuYW1lU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1NSQ19ERVNUID0gWydjb3B5RmlsZScsICdjcCcsICdjb3B5RmlsZVN5bmMnLCAnY3BTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSCA9IFsnbGluaycsICdsaW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BSRUZJWCA9IFsnbWtkdGVtcCcsICdta2R0ZW1wU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRIID0gWydzeW1saW5rJywgJ3N5bWxpbmtTeW5jJ107XG5jb25zdCBGU19PUEVSQVRJT05TX1dJVEhfUEFUSF9BUkcgPSBbXG4gICdhY2Nlc3MnLFxuICAnYXBwZW5kRmlsZScsXG4gICdjaG1vZCcsXG4gICdjaG93bicsXG4gICdleGlzdHMnLFxuICAnbWtkaXInLFxuICAnbGNob3duJyxcbiAgJ2xzdGF0JyxcbiAgJ2x1dGltZXMnLFxuICAnb3BlbicsXG4gICdvcGVuZGlyJyxcbiAgJ3JlYWRkaXInLFxuICAncmVhZEZpbGUnLFxuICAncmVhZGxpbmsnLFxuICAncmVhbHBhdGgnLFxuICAncmVhbHBhdGgubmF0aXZlJyxcbiAgJ3JtJyxcbiAgJ3JtZGlyJyxcbiAgJ3N0YXQnLFxuICAndHJ1bmNhdGUnLFxuICAndW5saW5rJyxcbiAgJ3V0aW1lcycsXG4gICd3cml0ZUZpbGUnLFxuICAnYWNjZXNzU3luYycsXG4gICdhcHBlbmRGaWxlU3luYycsXG4gICdjaG1vZFN5bmMnLFxuICAnY2hvd25TeW5jJyxcbiAgJ2V4aXN0c1N5bmMnLFxuICAnbGNob3duU3luYycsXG4gICdsc3RhdFN5bmMnLFxuICAnbHV0aW1lc1N5bmMnLFxuICAnb3BlbmRpclN5bmMnLFxuICAnbWtkaXJTeW5jJyxcbiAgJ29wZW5TeW5jJyxcbiAgJ3JlYWRkaXJTeW5jJyxcbiAgJ3JlYWRGaWxlU3luYycsXG4gICdyZWFkbGlua1N5bmMnLFxuICAncmVhbHBhdGhTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYy5uYXRpdmUnLFxuICAncm1kaXJTeW5jJyxcbiAgJ3JtU3luYycsXG4gICdzdGF0U3luYycsXG4gICd0cnVuY2F0ZVN5bmMnLFxuICAndW5saW5rU3luYycsXG4gICd1dGltZXNTeW5jJyxcbiAgJ3dyaXRlRmlsZVN5bmMnLFxuXTtcblxuZXhwb3J0cy5mc0ludGVncmF0aW9uID0gZnNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.54.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n   init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n   _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'http',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /** Get the instrumentation for the https module. */\n   _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition(\n      'https',\n      ['*'],\n      (moduleExports) => {\n        // Patch incoming requests for request isolation\n        stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n        // Patch outgoing requests for breadcrumbs\n        const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n        stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n\n        return moduleExports;\n      },\n      () => {\n        // no unwrap here\n      },\n    );\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n   _getPatchIncomingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (\n      original,\n    ) => {\n      return function incomingRequest( event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n\n        instrumentation._diag.debug('http instrumentation for incoming request');\n\n        const isolationScope = core$1.getIsolationScope().clone();\n        const request = args[0] ;\n\n        const normalizedRequest = core$1.httpRequestToRequestData(request);\n\n        patchRequestToCaptureBody(request, isolationScope);\n\n        // Update the isolation scope, isolate this request\n        // TODO(v9): Stop setting `request`, we only rely on normalizedRequest anymore\n        isolationScope.setSDKProcessingMetadata({\n          request,\n          normalizedRequest,\n        });\n\n        const client = core$1.getClient();\n        if (client && client.getOptions().autoSessionTracking) {\n          isolationScope.setRequestSession({ status: 'ok' });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core$1.stripUrlQueryAndFragment(request.url || '/');\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n   _getPatchOutgoingRequestFunction()\n\n {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return (original) => {\n      return function outgoingRequest( ...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n\n        const options = argsCopy.shift() ;\n\n        const extraOptions =\n          typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL)\n            ? (argsCopy.shift() )\n            : undefined;\n\n        const { optionsParsed } = instrumentationHttp.getRequestInfo(options, extraOptions);\n\n        const request = original.apply(this, args) ;\n\n        request.prependListener('response', (response) => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb =\n            typeof _ignoreOutgoingRequests === 'function'\n              ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed)\n              : true;\n\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(\n  nodule,\n  name,\n  wrapper,\n) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(\n  obj,\n  name,\n  value,\n) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value,\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core$1.parseUrl(url.toString());\n\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(req, isolationScope) {\n  const chunks = [];\n\n  function getChunksSize() {\n    return chunks.reduce((acc, chunk) => acc + chunk.byteLength, 0);\n  }\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              // If we have already read more than the max body length, we stop addiing chunks\n              // To avoid growing the memory indefinitely if a respons is e.g. streamed\n              if (getChunksSize() < MAX_BODY_BYTE_LENGTH) {\n                const chunk = args[0] ;\n                chunks.push(chunk);\n              } else if (debugBuild.DEBUG_BUILD) {\n                core$1.logger.log(\n                  `Dropping request body chunk because it maximum body length of ${MAX_BODY_BYTE_LENGTH}b is exceeded.`,\n                );\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        if (event === 'end') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const body = Buffer.concat(chunks).toString('utf-8');\n\n                if (body) {\n                  const normalizedRequest = { data: body } ;\n                  isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n                }\n              } catch (e2) {\n                // ignore errors here\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n  } catch (e3) {\n    // ignore errors if we can't patch stuff\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce\n\n(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests]),\n  });\n});\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\nconst _httpIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    },\n  };\n}) ;\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration(_httpIntegration);\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvY29tbW9uLmpzP2M5MTciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBUaGUga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGxvY2FsIHZhcmlhYmxlcyBvbiB0aGUgZXJyb3Igb2JqZWN0LlxuICovXG5jb25zdCBMT0NBTF9WQVJJQUJMRVNfS0VZID0gJ19fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmF0ZSBsaW1pdGVyIHRoYXQgd2lsbCBjYWxsIHRoZSBkaXNhYmxlIGNhbGxiYWNrIHdoZW4gdGhlIHJhdGUgbGltaXQgaXMgcmVhY2hlZCBhbmQgdGhlIGVuYWJsZSBjYWxsYmFja1xuICogd2hlbiBhIHRpbWVvdXQgaGFzIG9jY3VycmVkLlxuICogQHBhcmFtIG1heFBlclNlY29uZCBNYXhpbXVtIG51bWJlciBvZiBjYWxscyBwZXIgc2Vjb25kXG4gKiBAcGFyYW0gZW5hYmxlIENhbGxiYWNrIHRvIGVuYWJsZSBjYXB0dXJlXG4gKiBAcGFyYW0gZGlzYWJsZSBDYWxsYmFjayB0byBkaXNhYmxlIGNhcHR1cmVcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2FsbCB0byBpbmNyZW1lbnQgdGhlIHJhdGUgbGltaXRlciBjb3VudFxuICovXG5mdW5jdGlvbiBjcmVhdGVSYXRlTGltaXRlcihcbiAgbWF4UGVyU2Vjb25kLFxuICBlbmFibGUsXG4gIGRpc2FibGUsXG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHJldHJ5U2Vjb25kcyA9IDU7XG4gIGxldCBkaXNhYmxlZFRpbWVvdXQgPSAwO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICBpZiAoY291bnQgPiBtYXhQZXJTZWNvbmQpIHtcbiAgICAgICAgcmV0cnlTZWNvbmRzICo9IDI7XG4gICAgICAgIGRpc2FibGUocmV0cnlTZWNvbmRzKTtcblxuICAgICAgICAvLyBDYXAgYXQgb25lIGRheVxuICAgICAgICBpZiAocmV0cnlTZWNvbmRzID4gODY0MDApIHtcbiAgICAgICAgICByZXRyeVNlY29uZHMgPSA4NjQwMDtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlZFRpbWVvdXQgPSByZXRyeVNlY29uZHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZW91dCAtPSAxO1xuXG4gICAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgfSwgMTAwMCkudW5yZWYoKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvdW50ICs9IDE7XG4gIH07XG59XG5cbi8vIEFkZCB0eXBlcyBmb3IgdGhlIGV4Y2VwdGlvbiBldmVudCBkYXRhXG5cbi8qKiBDb3VsZCB0aGlzIGJlIGFuIGFub255bW91cyBmdW5jdGlvbj8gKi9cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCAmJiAobmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PT0gJz8nIHx8IG5hbWUgPT09ICc8YW5vbnltb3VzPicpO1xufVxuXG4vKiogRG8gdGhlIGZ1bmN0aW9uIG5hbWVzIGFwcGVhciB0byBtYXRjaD8gKi9cbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZXNNYXRjaChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiIHx8IChpc0Fub255bW91cyhhKSAmJiBpc0Fub255bW91cyhiKSk7XG59XG5cbmV4cG9ydHMuTE9DQUxfVkFSSUFCTEVTX0tFWSA9IExPQ0FMX1ZBUklBQkxFU19LRVk7XG5leHBvcnRzLmNyZWF0ZVJhdGVMaW1pdGVyID0gY3JlYXRlUmF0ZUxpbWl0ZXI7XG5leHBvcnRzLmZ1bmN0aW9uTmFtZXNNYXRjaCA9IGZ1bmN0aW9uTmFtZXNNYXRjaDtcbmV4cG9ydHMuaXNBbm9ueW1vdXMgPSBpc0Fub255bW91cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG9CQUFvQixtQkFBTyxDQUFDLG1JQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxnTEFBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsOEtBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcz8zMDBkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vbm9kZVZlcnNpb24uanMnKTtcbmNvbnN0IGxvY2FsVmFyaWFibGVzQXN5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1hc3luYy5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNTeW5jID0gcmVxdWlyZSgnLi9sb2NhbC12YXJpYWJsZXMtc3luYy5qcycpO1xuXG5jb25zdCBsb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4gbm9kZVZlcnNpb24uTk9ERV9WRVJTSU9OLm1ham9yIDwgMTkgPyBsb2NhbFZhcmlhYmxlc1N5bmMubG9jYWxWYXJpYWJsZXNTeW5jSW50ZWdyYXRpb24ob3B0aW9ucykgOiBsb2NhbFZhcmlhYmxlc0FzeW5jLmxvY2FsVmFyaWFibGVzQXN5bmNJbnRlZ3JhdGlvbihvcHRpb25zKTtcbn07XG5cbmV4cG9ydHMubG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbiA9IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjQwLjAgKDdmZjQ2N2MpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjQwLjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\n\nfunction log(...args) {\n  core.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9sb2NhbC12YXJpYWJsZXMtYXN5bmMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDRCQUE0QixtQkFBTyxDQUFDLGdEQUFxQjtBQUN6RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLGtKQUFhOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixrSUFBd0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1RkFBdUYsU0FBUyxtQkFBbUI7QUFDbkg7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELDBCQUEwQjtBQUMxQixzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9sb2NhbC12YXJpYWJsZXMtYXN5bmMuanM/MGI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlX3dvcmtlcl90aHJlYWRzID0gcmVxdWlyZSgnbm9kZTp3b3JrZXJfdGhyZWFkcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLy8gVGhpcyBzdHJpbmcgaXMgYSBwbGFjZWhvbGRlciB0aGF0IGdldHMgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgd29ya2VyIGNvZGUuXG5jb25zdCBiYXNlNjRXb3JrZXJTY3JpcHQgPSAnTHlvaElFQnpaVzUwY25rdmJtOWtaU0E0TGpRd0xqQWdLRGRtWmpRMk4yTXBJSHdnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkbGRITmxiblJ5ZVM5elpXNTBjbmt0YW1GMllYTmpjbWx3ZENBcUx3cHBiWEJ2Y25SN1UyVnpjMmx2YmlCaGN5QmxmV1p5YjIwaWJtOWtaVHBwYm5Od1pXTjBiM0l2Y0hKdmJXbHpaWE1pTzJsdGNHOXlkSHQzYjNKclpYSkVZWFJoSUdGeklIUjlabkp2YlNKdWIyUmxPbmR2Y210bGNsOTBhSEpsWVdSeklqdGpiMjV6ZENCdVBTSTRMalF3TGpBaUxHODlaMnh2WW1Gc1ZHaHBjenRqYjI1emRDQnBQU0oxYm1SbFptbHVaV1FpUFQxMGVYQmxiMllnWDE5VFJVNVVVbGxmUkVWQ1ZVZGZYM3g4WDE5VFJVNVVVbGxmUkVWQ1ZVZGZYeXhoUFZzaVpHVmlkV2NpTENKcGJtWnZJaXdpZDJGeWJpSXNJbVZ5Y205eUlpd2liRzluSWl3aVlYTnpaWEowSWl3aWRISmhZMlVpWFN4elBYdDlPMloxYm1OMGFXOXVJR01vWlNsN2FXWW9JU2dpWTI5dWMyOXNaU0pwYmlCdktTbHlaWFIxY200Z1pTZ3BPMk52Ym5OMElIUTlieTVqYjI1emIyeGxMRzQ5ZTMwc2FUMVBZbXBsWTNRdWEyVjVjeWh6S1R0cExtWnZja1ZoWTJnb0tHVTlQbnRqYjI1emRDQnZQWE5iWlYwN2JsdGxYVDEwVzJWZExIUmJaVjA5YjMwcEtUdDBjbmw3Y21WMGRYSnVJR1VvS1gxbWFXNWhiR3g1ZTJrdVptOXlSV0ZqYUNnb1pUMCtlM1JiWlYwOWJsdGxYWDBwS1gxOUlXWjFibU4wYVc5dUtHVXNkQ3hwS1h0amIyNXpkQ0JoUFc4c2N6MWhMbDlmVTBWT1ZGSlpYMTg5WVM1ZlgxTkZUbFJTV1Y5ZmZIeDdmU3hqUFhOYmJsMDljMXR1WFh4OGUzMDdZMXRsWFh4OEtHTmJaVjA5ZENncEtYMG9JbXh2WjJkbGNpSXNLR1oxYm1OMGFXOXVLQ2w3YkdWMElHVTlJVEU3WTI5dWMzUWdkRDE3Wlc1aFlteGxPaWdwUFQ1N1pUMGhNSDBzWkdsellXSnNaVG9vS1QwK2UyVTlJVEY5TEdselJXNWhZbXhsWkRvb0tUMCtaWDA3Y21WMGRYSnVJR2svWVM1bWIzSkZZV05vS0NodVBUNTdkRnR1WFQwb0xpNHVkQ2s5UG50bEppWmpLQ2dvS1QwK2UyOHVZMjl1YzI5c1pWdHVYU2hnVTJWdWRISjVJRXh2WjJkbGNpQmJKSHR1ZlYwNllDd3VMaTUwS1gwcEtYMTlLU2s2WVM1bWIzSkZZV05vS0NobFBUNTdkRnRsWFQwb0tUMCtlMzE5S1Nrc2RIMHBLVHRqYjI1emRDQnlQU0pmWDFORlRsUlNXVjlGVWxKUFVsOU1UME5CVEY5V1FWSkpRVUpNUlZOZlh5STdZMjl1YzNRZ2RUMTBPMloxYm1OMGFXOXVJR3dvTGk0dVpTbDdkUzVrWldKMVp5WW1ZeWdvS0NrOVBtTnZibk52YkdVdWJHOW5LQ0piVEc5allXeFdZWEpwWVdKc1pYTWdWMjl5YTJWeVhTSXNMaTR1WlNrcEtYMWhjM2x1WXlCbWRXNWpkR2x2YmlCbUtHVXNkQ3h1TEc4cGUyTnZibk4wSUdrOVlYZGhhWFFnWlM1d2IzTjBLQ0pTZFc1MGFXMWxMbWRsZEZCeWIzQmxjblJwWlhNaUxIdHZZbXBsWTNSSlpEcDBMRzkzYmxCeWIzQmxjblJwWlhNNklUQjlLVHR2VzI1ZFBXa3VjbVZ6ZFd4MExtWnBiSFJsY2lnb1pUMCtJbXhsYm1kMGFDSWhQVDFsTG01aGJXVW1KaUZwYzA1aFRpaHdZWEp6WlVsdWRDaGxMbTVoYldVc01UQXBLU2twTG5OdmNuUW9LQ2hsTEhRcFBUNXdZWEp6WlVsdWRDaGxMbTVoYldVc01UQXBMWEJoY25ObFNXNTBLSFF1Ym1GdFpTd3hNQ2twS1M1dFlYQW9LR1U5UG1VdWRtRnNkV1UvTG5aaGJIVmxLU2w5WVhONWJtTWdablZ1WTNScGIyNGdaeWhsTEhRc2JpeHZLWHRqYjI1emRDQnBQV0YzWVdsMElHVXVjRzl6ZENnaVVuVnVkR2x0WlM1blpYUlFjbTl3WlhKMGFXVnpJaXg3YjJKcVpXTjBTV1E2ZEN4dmQyNVFjbTl3WlhKMGFXVnpPaUV3ZlNrN2IxdHVYVDFwTG5KbGMzVnNkQzV0WVhBb0tHVTlQbHRsTG01aGJXVXNaUzUyWVd4MVpUOHVkbUZzZFdWZEtTa3VjbVZrZFdObEtDZ29aU3hiZEN4dVhTazlQaWhsVzNSZFBXNHNaU2twTEh0OUtYMW1kVzVqZEdsdmJpQmtLR1VzZENsN1pTNTJZV3gxWlNZbUtDSjJZV3gxWlNKcGJpQmxMblpoYkhWbFAzWnZhV1FnTUQwOVBXVXVkbUZzZFdVdWRtRnNkV1Y4Zkc1MWJHdzlQVDFsTG5aaGJIVmxMblpoYkhWbFAzUmJaUzV1WVcxbFhUMWdQQ1I3WlM1MllXeDFaUzUyWVd4MVpYMCtZRHAwVzJVdWJtRnRaVjA5WlM1MllXeDFaUzUyWVd4MVpUb2laR1Z6WTNKcGNIUnBiMjRpYVc0Z1pTNTJZV3gxWlNZbUltWjFibU4wYVc5dUlpRTlQV1V1ZG1Gc2RXVXVkSGx3WlQ5MFcyVXVibUZ0WlYwOVlEd2tlMlV1ZG1Gc2RXVXVaR1Z6WTNKcGNIUnBiMjU5UG1BNkluVnVaR1ZtYVc1bFpDSTlQVDFsTG5aaGJIVmxMblI1Y0dVbUppaDBXMlV1Ym1GdFpWMDlJangxYm1SbFptbHVaV1ErSWlrcGZXRnplVzVqSUdaMWJtTjBhVzl1SUdJb1pTeDBLWHRqYjI1emRDQnVQV0YzWVdsMElHVXVjRzl6ZENnaVVuVnVkR2x0WlM1blpYUlFjbTl3WlhKMGFXVnpJaXg3YjJKcVpXTjBTV1E2ZEN4dmQyNVFjbTl3WlhKMGFXVnpPaUV3ZlNrc2J6MTdmVHRtYjNJb1kyOXVjM1FnZENCdlppQnVMbkpsYzNWc2RDbHBaaWgwUHk1MllXeDFaVDh1YjJKcVpXTjBTV1FtSmlKQmNuSmhlU0k5UFQxMFB5NTJZV3gxWlM1amJHRnpjMDVoYldVcGUyTnZibk4wSUc0OWRDNTJZV3gxWlM1dlltcGxZM1JKWkR0aGQyRnBkQ0JtS0dVc2JpeDBMbTVoYldVc2J5bDlaV3h6WlNCcFppaDBQeTUyWVd4MVpUOHViMkpxWldOMFNXUW1KaUpQWW1wbFkzUWlQVDA5ZEQ4dWRtRnNkV1UvTG1Oc1lYTnpUbUZ0WlNsN1kyOXVjM1FnYmoxMExuWmhiSFZsTG05aWFtVmpkRWxrTzJGM1lXbDBJR2NvWlN4dUxIUXVibUZ0WlN4dktYMWxiSE5sSUhRL0xuWmhiSFZsSmlaa0tIUXNieWs3Y21WMGRYSnVJRzk5YkdWMElIQTdLR0Z6ZVc1aklHWjFibU4wYVc5dUtDbDdZMjl1YzNRZ2REMXVaWGNnWlR0MExtTnZibTVsWTNSVWIwMWhhVzVVYUhKbFlXUW9LU3hzS0NKRGIyNXVaV04wWldRZ2RHOGdiV0ZwYmlCMGFISmxZV1FpS1R0c1pYUWdiajBoTVR0MExtOXVLQ0pFWldKMVoyZGxjaTV5WlhOMWJXVmtJaXdvS0NrOVBudHVQU0V4ZlNrcExIUXViMjRvSWtSbFluVm5aMlZ5TG5CaGRYTmxaQ0lzS0dVOVBudHVQU0V3TEdGemVXNWpJR1oxYm1OMGFXOXVLR1VzZTNKbFlYTnZianAwTEdSaGRHRTZlMjlpYW1WamRFbGtPbTU5TEdOaGJHeEdjbUZ0WlhNNmIzMHBlMmxtS0NKbGVHTmxjSFJwYjI0aUlUMDlkQ1ltSW5CeWIyMXBjMlZTWldwbFkzUnBiMjRpSVQwOWRDbHlaWFIxY200N2FXWW9jRDh1S0Nrc2JuVnNiRDA5YmlseVpYUjFjbTQ3WTI5dWMzUWdhVDFiWFR0bWIzSW9iR1YwSUhROU1EdDBQRzh1YkdWdVozUm9PM1FyS3lsN1kyOXVjM1I3YzJOdmNHVkRhR0ZwYmpwdUxHWjFibU4wYVc5dVRtRnRaVHBoTEhSb2FYTTZjMzA5YjF0MFhTeGpQVzR1Wm1sdVpDZ29aVDArSW14dlkyRnNJajA5UFdVdWRIbHdaU2twTEhJOUltZHNiMkpoYkNJaFBUMXpMbU5zWVhOelRtRnRaU1ltY3k1amJHRnpjMDVoYldVL1lDUjdjeTVqYkdGemMwNWhiV1Y5TGlSN1lYMWdPbUU3YVdZb2RtOXBaQ0F3UFQwOVl6OHViMkpxWldOMExtOWlhbVZqZEVsa0tXbGJkRjA5ZTJaMWJtTjBhVzl1T25KOU8yVnNjMlY3WTI5dWMzUWdiajFoZDJGcGRDQmlLR1VzWXk1dlltcGxZM1F1YjJKcVpXTjBTV1FwTzJsYmRGMDllMloxYm1OMGFXOXVPbklzZG1GeWN6cHVmWDE5WVhkaGFYUWdaUzV3YjNOMEtDSlNkVzUwYVcxbExtTmhiR3hHZFc1amRHbHZiazl1SWl4N1puVnVZM1JwYjI1RVpXTnNZWEpoZEdsdmJqcGdablZ1WTNScGIyNG9LU0I3SUhSb2FYTXVKSHR5ZlNBOUlIUm9hWE11Skh0eWZTQjhmQ0FrZTBwVFQwNHVjM1J5YVc1bmFXWjVLR2twZlRzZ2ZXQXNjMmxzWlc1ME9pRXdMRzlpYW1WamRFbGtPbTU5S1N4aGQyRnBkQ0JsTG5CdmMzUW9JbEoxYm5ScGJXVXVjbVZzWldGelpVOWlhbVZqZENJc2UyOWlhbVZqZEVsa09tNTlLWDBvZEN4bExuQmhjbUZ0Y3lrdWRHaGxiaWdvWVhONWJtTW9LVDArZTI0bUptRjNZV2wwSUhRdWNHOXpkQ2dpUkdWaWRXZG5aWEl1Y21WemRXMWxJaWw5S1N3b1lYTjVibU1nWlQwK2UyNG1KbUYzWVdsMElIUXVjRzl6ZENnaVJHVmlkV2RuWlhJdWNtVnpkVzFsSWlsOUtTbDlLU2tzWVhkaGFYUWdkQzV3YjNOMEtDSkVaV0oxWjJkbGNpNWxibUZpYkdVaUtUdGpiMjV6ZENCdlBTRXhJVDA5ZFM1allYQjBkWEpsUVd4c1JYaGpaWEIwYVc5dWN6dHBaaWhoZDJGcGRDQjBMbkJ2YzNRb0lrUmxZblZuWjJWeUxuTmxkRkJoZFhObFQyNUZlR05sY0hScGIyNXpJaXg3YzNSaGRHVTZiejhpWVd4c0lqb2lkVzVqWVhWbmFIUWlmU2tzYnlsN1kyOXVjM1FnWlQxMUxtMWhlRVY0WTJWd2RHbHZibk5RWlhKVFpXTnZibVI4ZkRVd08zQTlablZ1WTNScGIyNG9aU3gwTEc0cGUyeGxkQ0J2UFRBc2FUMDFMR0U5TUR0eVpYUjFjbTRnYzJWMFNXNTBaWEoyWVd3b0tDZ3BQVDU3TUQwOVBXRS9iejVsSmlZb2FTbzlNaXh1S0drcExHaytPRFkwTURBbUppaHBQVGcyTkRBd0tTeGhQV2twT2loaExUMHhMREE5UFQxaEppWjBLQ2twTEc4OU1IMHBMREZsTXlrdWRXNXlaV1lvS1N3b0tUMCtlMjhyUFRGOWZTaGxMQ2hoYzNsdVl5Z3BQVDU3YkNnaVVtRjBaUzFzYVcxcGRDQnNhV1owWldRdUlpa3NZWGRoYVhRZ2RDNXdiM04wS0NKRVpXSjFaMmRsY2k1elpYUlFZWFZ6WlU5dVJYaGpaWEIwYVc5dWN5SXNlM04wWVhSbE9pSmhiR3dpZlNsOUtTd29ZWE41Ym1NZ1pUMCtlMndvWUZKaGRHVXRiR2x0YVhRZ1pYaGpaV1ZrWldRdUlFUnBjMkZpYkdsdVp5QmpZWEIwZFhKcGJtY2diMllnWTJGMVoyaDBJR1Y0WTJWd2RHbHZibk1nWm05eUlDUjdaWDBnYzJWamIyNWtjeTVnS1N4aGQyRnBkQ0IwTG5CdmMzUW9Ja1JsWW5WbloyVnlMbk5sZEZCaGRYTmxUMjVGZUdObGNIUnBiMjV6SWl4N2MzUmhkR1U2SW5WdVkyRjFaMmgwSW4wcGZTa3BmWDBwS0NrdVkyRjBZMmdvS0dVOVBudHNLQ0pHWVdsc1pXUWdkRzhnYzNSaGNuUWdaR1ZpZFdkblpYSWlMR1VwZlNrcExITmxkRWx1ZEdWeWRtRnNLQ2dvS1QwK2UzMHBMREZsTkNrNyc7XG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG4gIGNvcmUubG9nZ2VyLmxvZygnW0xvY2FsVmFyaWFibGVzXScsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEFkZHMgbG9jYWwgdmFyaWFibGVzIHRvIGV4Y2VwdGlvbiBmcmFtZXNcbiAqL1xuY29uc3QgbG9jYWxWYXJpYWJsZXNBc3luY0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoKFxuICBpbnRlZ3JhdGlvbk9wdGlvbnMgPSB7fSxcbikgPT4ge1xuICBmdW5jdGlvbiBhZGRMb2NhbFZhcmlhYmxlc1RvRXhjZXB0aW9uKGV4Y2VwdGlvbiwgbG9jYWxWYXJpYWJsZXMpIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGZyYW1lcyB3aGVyZSB0aGUgZnVuY3Rpb24gbmFtZSBpcyBgbmV3IFByb21pc2VgIHNpbmNlIHRoZXNlIGFyZSBpbiB0aGUgZXJyb3Iuc3RhY2sgZnJhbWVzXG4gICAgLy8gYnV0IGRvIG5vdCBhcHBlYXIgaW4gdGhlIGRlYnVnZ2VyIGNhbGwgZnJhbWVzXG4gICAgY29uc3QgZnJhbWVzID0gKF9vcHRpb25hbENoYWluKFtleGNlcHRpb24sICdhY2Nlc3MnLCBfID0+IF8uc3RhY2t0cmFjZSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuZnJhbWVzXSkgfHwgW10pLmZpbHRlcihmcmFtZSA9PiBmcmFtZS5mdW5jdGlvbiAhPT0gJ25ldyBQcm9taXNlJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gU2VudHJ5IGZyYW1lcyBhcmUgaW4gcmV2ZXJzZSBvcmRlclxuICAgICAgY29uc3QgZnJhbWVJbmRleCA9IGZyYW1lcy5sZW5ndGggLSBpIC0gMTtcblxuICAgICAgY29uc3QgZnJhbWVMb2NhbFZhcmlhYmxlcyA9IGxvY2FsVmFyaWFibGVzW2ldO1xuICAgICAgY29uc3QgZnJhbWUgPSBmcmFtZXNbZnJhbWVJbmRleF07XG5cbiAgICAgIGlmICghZnJhbWUgfHwgIWZyYW1lTG9jYWxWYXJpYWJsZXMpIHtcbiAgICAgICAgLy8gRHJvcCBvdXQgaWYgd2UgcnVuIG91dCBvZiBmcmFtZXMgdG8gbWF0Y2ggdXBcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgLy8gV2UgbmVlZCB0byBoYXZlIHZhcnMgdG8gYWRkXG4gICAgICAgIGZyYW1lTG9jYWxWYXJpYWJsZXMudmFycyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIC8vIFdlJ3JlIG5vdCBpbnRlcmVzdGVkIGluIGZyYW1lcyB0aGF0IGFyZSBub3QgaW5fYXBwIGJlY2F1c2UgdGhlIHZhcnMgYXJlIG5vdCByZWxldmFudFxuICAgICAgICBmcmFtZS5pbl9hcHAgPT09IGZhbHNlIHx8XG4gICAgICAgIC8vIFRoZSBmdW5jdGlvbiBuYW1lcyBuZWVkIHRvIG1hdGNoXG4gICAgICAgICFjb21tb24uZnVuY3Rpb25OYW1lc01hdGNoKGZyYW1lLmZ1bmN0aW9uLCBmcmFtZUxvY2FsVmFyaWFibGVzLmZ1bmN0aW9uKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBmcmFtZS52YXJzID0gZnJhbWVMb2NhbFZhcmlhYmxlcy52YXJzO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZExvY2FsVmFyaWFibGVzVG9FdmVudChldmVudCwgaGludCkge1xuICAgIGlmIChcbiAgICAgIGhpbnQub3JpZ2luYWxFeGNlcHRpb24gJiZcbiAgICAgIHR5cGVvZiBoaW50Lm9yaWdpbmFsRXhjZXB0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgY29tbW9uLkxPQ0FMX1ZBUklBQkxFU19LRVkgaW4gaGludC5vcmlnaW5hbEV4Y2VwdGlvbiAmJlxuICAgICAgQXJyYXkuaXNBcnJheShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uW2NvbW1vbi5MT0NBTF9WQVJJQUJMRVNfS0VZXSlcbiAgICApIHtcbiAgICAgIGZvciAoY29uc3QgZXhjZXB0aW9uIG9mIF9vcHRpb25hbENoYWluKFtldmVudCwgJ2FjY2VzcycsIF8zID0+IF8zLmV4Y2VwdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzQgPT4gXzQudmFsdWVzXSkgfHwgW10pIHtcbiAgICAgICAgYWRkTG9jYWxWYXJpYWJsZXNUb0V4Y2VwdGlvbihleGNlcHRpb24sIGhpbnQub3JpZ2luYWxFeGNlcHRpb25bY29tbW9uLkxPQ0FMX1ZBUklBQkxFU19LRVldKTtcbiAgICAgIH1cblxuICAgICAgaGludC5vcmlnaW5hbEV4Y2VwdGlvbltjb21tb24uTE9DQUxfVkFSSUFCTEVTX0tFWV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRJbnNwZWN0b3IoKSB7XG4gICAgLy8gV2UgbG9hZCBpbnNwZWN0b3IgZHluYW1pY2FsbHkgYmVjYXVzZSBvbiBzb21lIHBsYXRmb3JtcyBOb2RlIGlzIGJ1aWx0IHdpdGhvdXQgaW5zcGVjdG9yIHN1cHBvcnRcbiAgICBjb25zdCBpbnNwZWN0b3IgPSBhd2FpdCBpbXBvcnQoJ25vZGU6aW5zcGVjdG9yJyk7XG4gICAgaWYgKCFpbnNwZWN0b3IudXJsKCkpIHtcbiAgICAgIGluc3BlY3Rvci5vcGVuKDApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0V29ya2VyKG9wdGlvbnMpIHtcbiAgICBjb25zdCB3b3JrZXIgPSBuZXcgbm9kZV93b3JrZXJfdGhyZWFkcy5Xb3JrZXIobmV3IFVSTChgZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0O2Jhc2U2NCwke2Jhc2U2NFdvcmtlclNjcmlwdH1gKSwge1xuICAgICAgd29ya2VyRGF0YTogb3B0aW9ucyxcbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgYW55IE5vZGUgYXJncyB0byBiZSBwYXNzZWQgdG8gdGhlIHdvcmtlclxuICAgICAgZXhlY0FyZ3Y6IFtdLFxuICAgIH0pO1xuXG4gICAgcHJvY2Vzcy5vbignZXhpdCcsICgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICB9KTtcblxuICAgIHdvcmtlci5vbmNlKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGxvZygnV29ya2VyIGVycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHdvcmtlci5vbmNlKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgIGxvZygnV29ya2VyIGV4aXQnLCBjb2RlKTtcbiAgICB9KTtcblxuICAgIC8vIEVuc3VyZSB0aGlzIHRocmVhZCBjYW4ndCBibG9jayBhcHAgZXhpdFxuICAgIHdvcmtlci51bnJlZigpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTG9jYWxWYXJpYWJsZXNBc3luYycsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjb25zdCBjbGllbnRPcHRpb25zID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICAgICAgaWYgKCFjbGllbnRPcHRpb25zLmluY2x1ZGVMb2NhbFZhcmlhYmxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLmludGVncmF0aW9uT3B0aW9ucyxcbiAgICAgICAgZGVidWc6IGNvcmUubG9nZ2VyLmlzRW5hYmxlZCgpLFxuICAgICAgfTtcblxuICAgICAgc3RhcnRJbnNwZWN0b3IoKS50aGVuKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0YXJ0V29ya2VyKG9wdGlvbnMpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvcmUubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gc3RhcnQgd29ya2VyJywgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlID0+IHtcbiAgICAgICAgICBjb3JlLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHN0YXJ0IGluc3BlY3RvcicsIGUpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIHByb2Nlc3NFdmVudChldmVudCwgaGludCkge1xuICAgICAgcmV0dXJuIGFkZExvY2FsVmFyaWFibGVzVG9FdmVudChldmVudCwgaGludCk7XG4gICAgfSxcbiAgfTtcbn0pICk7XG5cbmV4cG9ydHMuYmFzZTY0V29ya2VyU2NyaXB0ID0gYmFzZTY0V29ya2VyU2NyaXB0O1xuZXhwb3J0cy5sb2NhbFZhcmlhYmxlc0FzeW5jSW50ZWdyYXRpb24gPSBsb2NhbFZhcmlhYmxlc0FzeW5jSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbC12YXJpYWJsZXMtYXN5bmMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  })]),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.logger.log('Local variables rate-limit lifted.');\n                _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n              },\n              seconds => {\n                core.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \****************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\nconst _modulesIntegration = (() => {\n  // This integration only works in CJS contexts\n  if (!commonjs.isCjs()) {\n    debugBuild.DEBUG_BUILD &&\n      core.logger.warn(\n        'modulesIntegration only works in CommonJS (CJS) environments. Remove this integration if you are using ESM.',\n      );\n    return {\n      name: INTEGRATION_NAME,\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n *\n * Only works in CommonJS (CJS) environments.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules()\n\n {\n  const mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n  const paths = getPaths();\n  const infos\n\n = {};\n  const seen\n\n = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0lBQW1CO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLHNJQUFzQjs7QUFFL0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQWEsZUFBZSxxQkFBYTtBQUNwRCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsNENBQVksSUFBSSw0Q0FBWTtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanM/OTExYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlX2ZzID0gcmVxdWlyZSgnbm9kZTpmcycpO1xuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uanMuanMnKTtcblxubGV0IG1vZHVsZUNhY2hlO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vZHVsZXMnO1xuXG5jb25zdCBfbW9kdWxlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgLy8gVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIGluIENKUyBjb250ZXh0c1xuICBpZiAoIWNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICBjb3JlLmxvZ2dlci53YXJuKFxuICAgICAgICAnbW9kdWxlc0ludGVncmF0aW9uIG9ubHkgd29ya3MgaW4gQ29tbW9uSlMgKENKUykgZW52aXJvbm1lbnRzLiBSZW1vdmUgdGhpcyBpbnRlZ3JhdGlvbiBpZiB5b3UgYXJlIHVzaW5nIEVTTS4nLFxuICAgICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgZXZlbnQubW9kdWxlcyA9IHtcbiAgICAgICAgLi4uZXZlbnQubW9kdWxlcyxcbiAgICAgICAgLi4uX2dldE1vZHVsZXMoKSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBub2RlIG1vZHVsZXMgLyBwYWNrYWdlcyB0byB0aGUgZXZlbnQuXG4gKlxuICogT25seSB3b3JrcyBpbiBDb21tb25KUyAoQ0pTKSBlbnZpcm9ubWVudHMuXG4gKi9cbmNvbnN0IG1vZHVsZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vZHVsZXNJbnRlZ3JhdGlvbik7XG5cbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhdGhzICovXG5mdW5jdGlvbiBnZXRQYXRocygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5jYWNoZSA/IE9iamVjdC5rZXlzKHJlcXVpcmUuY2FjaGUgKSA6IFtdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhY2thZ2UuanNvbiBtb2R1bGVzICovXG5mdW5jdGlvbiBjb2xsZWN0TW9kdWxlcygpXG5cbiB7XG4gIGNvbnN0IG1haW5QYXRocyA9IChyZXF1aXJlLm1haW4gJiYgcmVxdWlyZS5tYWluLnBhdGhzKSB8fCBbXTtcbiAgY29uc3QgcGF0aHMgPSBnZXRQYXRocygpO1xuICBjb25zdCBpbmZvc1xuXG4gPSB7fTtcbiAgY29uc3Qgc2VlblxuXG4gPSB7fTtcblxuICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICAgIGxldCBkaXIgPSBwYXRoO1xuXG4gICAgLyoqIFRyYXZlcnNlIGRpcmVjdG9yaWVzIHVwd2FyZCBpbiB0aGUgc2VhcmNoIG9mIHBhY2thZ2UuanNvbiBmaWxlICovXG4gICAgY29uc3QgdXBkaXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnID0gZGlyO1xuICAgICAgZGlyID0gbm9kZV9wYXRoLmRpcm5hbWUob3JpZyk7XG5cbiAgICAgIGlmICghZGlyIHx8IG9yaWcgPT09IGRpciB8fCBzZWVuW29yaWddKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAobWFpblBhdGhzLmluZGV4T2YoZGlyKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIHVwZGlyKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBrZ2ZpbGUgPSBub2RlX3BhdGguam9pbihvcmlnLCAncGFja2FnZS5qc29uJyk7XG4gICAgICBzZWVuW29yaWddID0gdHJ1ZTtcblxuICAgICAgaWYgKCFub2RlX2ZzLmV4aXN0c1N5bmMocGtnZmlsZSkpIHtcbiAgICAgICAgcmV0dXJuIHVwZGlyKCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBKU09OLnBhcnNlKG5vZGVfZnMucmVhZEZpbGVTeW5jKHBrZ2ZpbGUsICd1dGY4JykpXG5cbjtcbiAgICAgICAgaW5mb3NbaW5mby5uYW1lXSA9IGluZm8udmVyc2lvbjtcbiAgICAgIH0gY2F0Y2ggKF9vTykge1xuICAgICAgICAvLyBuby1lbXB0eVxuICAgICAgfVxuICAgIH07XG5cbiAgICB1cGRpcigpO1xuICB9KTtcblxuICByZXR1cm4gaW5mb3M7XG59XG5cbi8qKiBGZXRjaGVzIHRoZSBsaXN0IG9mIG1vZHVsZXMgYW5kIHRoZSB2ZXJzaW9ucyBsb2FkZWQgYnkgdGhlIGVudHJ5IGZpbGUgZm9yIHlvdXIgbm9kZS5qcyBhcHAuICovXG5mdW5jdGlvbiBfZ2V0TW9kdWxlcygpIHtcbiAgaWYgKCFtb2R1bGVDYWNoZSkge1xuICAgIG1vZHVsZUNhY2hlID0gY29sbGVjdE1vZHVsZXMoKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlQ2FjaGU7XG59XG5cbmV4cG9ydHMubW9kdWxlc0ludGVncmF0aW9uID0gbW9kdWxlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.6.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentation = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const ctx = api.context.active();\n            const addedHeaders = {};\n\n            // We generate a virtual span context from the active one,\n            // Where we attach the URL to the trace state, so the propagator can pick it up\n            const activeSpan = api.trace.getSpan(ctx);\n            const propagationContext = activeSpan\n              ? opentelemetry.getPropagationContextFromSpan(activeSpan)\n              : core.getCurrentScope().getPropagationContext();\n\n            const spanContext = opentelemetry.generateSpanContextForPropagationContext(propagationContext);\n            // We know that in practice we'll _always_ haven a traceState here\n            spanContext.traceState = _optionalChain([spanContext, 'access', _2 => _2.traceState, 'optionalAccess', _3 => _3.set, 'call', _4 => _4('sentry.url', url)]);\n            const ctxWithUrlTraceState = api.trace.setSpanContext(ctx, spanContext);\n\n            api.propagation.inject(ctxWithUrlTraceState, addedHeaders);\n\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders)\n                .map(([k, v]) => `${k}: ${v}\\r\\n`)\n                .join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n          };\n        },\n        responseHook: (_, { request, response }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        },\n      });\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = core.parseUrl(url.toString());\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason,\n  options,\n) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLGdKQUEyQjs7QUFFekQ7O0FBRUEsdURBQXVEO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixNQUFNO0FBQzFGLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQ0FBaUM7QUFDbEQsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanM/NzI4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBlcnJvcmhhbmRsaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JoYW5kbGluZy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcblxuY29uc3QgX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICd3YXJuJztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBnbG9iYWwucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKGNsaWVudCwgeyBtb2RlIH0pKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBhIGdsb2JhbCBwcm9taXNlIHJlamVjdGlvbiBoYW5kbGVyLlxuICovXG5jb25zdCBvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogU2VuZCBhbiBleGNlcHRpb24gd2l0aCByZWFzb25cbiAqIEBwYXJhbSByZWFzb24gc3RyaW5nXG4gKiBAcGFyYW0gcHJvbWlzZSBwcm9taXNlXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihcbiAgY2xpZW50LFxuICBvcHRpb25zLFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZW5kVW5oYW5kbGVkUHJvbWlzZShyZWFzb24sIHByb21pc2UpIHtcbiAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHByb21pc2UsXG4gICAgICBjYXB0dXJlQ29udGV4dDoge1xuICAgICAgICBleHRyYTogeyB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uOiB0cnVlIH0sXG4gICAgICB9LFxuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiAnb251bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMpO1xuICB9O1xufVxuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBtb2RlYCBvcHRpb25cblxuICovXG5mdW5jdGlvbiBoYW5kbGVSZWplY3Rpb24oXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlYXNvbixcbiAgb3B0aW9ucyxcbikge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICBjb25zdCByZWplY3Rpb25XYXJuaW5nID1cbiAgICAnVGhpcyBlcnJvciBvcmlnaW5hdGVkIGVpdGhlciBieSAnICtcbiAgICAndGhyb3dpbmcgaW5zaWRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGhvdXQgYSBjYXRjaCBibG9jaywgJyArXG4gICAgJ29yIGJ5IHJlamVjdGluZyBhIHByb21pc2Ugd2hpY2ggd2FzIG5vdCBoYW5kbGVkIHdpdGggLmNhdGNoKCkuJyArXG4gICAgJyBUaGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSByZWFzb246JztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmIChvcHRpb25zLm1vZGUgPT09ICd3YXJuJykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgcmVhc29uLnN0YWNrID8gcmVhc29uLnN0YWNrIDogcmVhc29uKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLm1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgfSk7XG4gICAgZXJyb3JoYW5kbGluZy5sb2dBbmRFeGl0UHJvY2VzcyhyZWFzb24pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnRzLm1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlciA9IG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcjtcbmV4cG9ydHMub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && \"development\" !== 'development') {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n          // Reset failed requests counter on success\n          failedRequests = 0;\n        }\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      core.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    core.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGFBQW9CLG9CQUFvQixFQUV6RjtBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0oseURBQXlELElBQUk7QUFDN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzP2Q1ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb3JlLmxvZ2dlci53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgICAgfVxuICAgICAgY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgX29wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogVXNlIHRoaXMgaW50ZWdyYXRpb24gdG8gc2VuZCBlcnJvcnMgYW5kIHRyYW5zYWN0aW9ucyB0byBTcG90bGlnaHQuXG4gKlxuICogTGVhcm4gbW9yZSBhYm91dCBzcG90bGlnaHQgYXQgaHR0cHM6Ly9zcG90bGlnaHRqcy5jb21cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoaXMgaW50ZWdyYXRpb24gb25seSB3b3JrcyB3aXRoIE5vZGUgMTggb3IgbmV3ZXIuXG4gKi9cbmNvbnN0IHNwb3RsaWdodEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfc3BvdGxpZ2h0SW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHNwb3RsaWdodFVybCA9IHBhcnNlU2lkZWNhclVybChvcHRpb25zLnNpZGVjYXJVcmwpO1xuICBpZiAoIXNwb3RsaWdodFVybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBmYWlsZWRSZXF1ZXN0cyA9IDA7XG5cbiAgY2xpZW50Lm9uKCdiZWZvcmVFbnZlbG9wZScsIChlbnZlbG9wZSkgPT4ge1xuICAgIGlmIChmYWlsZWRSZXF1ZXN0cyA+IDMpIHtcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIERpc2FibGVkIFNlbnRyeSAtPiBTcG90bGlnaHQgaW50ZWdyYXRpb24gZHVlIHRvIHRvbyBtYW55IGZhaWxlZCByZXF1ZXN0cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmlhbGl6ZWRFbnZlbG9wZSA9IGNvcmUuc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUpO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IGdldE5hdGl2ZUh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IHNwb3RsaWdodFVybC5wYXRobmFtZSxcbiAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogc3BvdGxpZ2h0VXJsLnBvcnQsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgICAgICAgLy8gUmVzZXQgZmFpbGVkIHJlcXVlc3RzIGNvdW50ZXIgb24gc3VjY2Vzc1xuICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIEZhaWxlZCB0byBzZW5kIGVudmVsb3BlIHRvIFNwb3RsaWdodCBTaWRlY2FyJyk7XG4gICAgfSk7XG4gICAgcmVxLndyaXRlKHNlcmlhbGl6ZWRFbnZlbG9wZSk7XG4gICAgcmVxLmVuZCgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTaWRlY2FyVXJsKHVybCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKGAke3VybH1gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvcmUubG9nZ2VyLndhcm4oYFtTcG90bGlnaHRdIEludmFsaWQgc2lkZWNhciBVUkw6ICR7dXJsfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXZSB3YW50IHRvIGdldCBhbiB1bnBhdGNoZWQgaHR0cCByZXF1ZXN0IGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGNhcHR1cmluZyBvdXIgb3duIGNhbGxzLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVIdHRwUmVxdWVzdCgpIHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBodHRwO1xuICBpZiAoaXNXcmFwcGVkKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuX19zZW50cnlfb3JpZ2luYWxfXztcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBpc1dyYXBwZWQoaW1wbCkge1xuICByZXR1cm4gJ19fc2VudHJ5X29yaWdpbmFsX18nIGluIGltcGw7XG59XG5cbmV4cG9ydHMuSU5URUdSQVRJT05fTkFNRSA9IElOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLmdldE5hdGl2ZUh0dHBSZXF1ZXN0ID0gZ2V0TmF0aXZlSHR0cFJlcXVlc3Q7XG5leHBvcnRzLnNwb3RsaWdodEludGVncmF0aW9uID0gc3BvdGxpZ2h0SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcG90bGlnaHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzPzE2YmUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5wdWJsaXNoZXInKTtcbiAgfSxcbn07XG5cbmNvbnN0IGluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FtcXBsaWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FtcXBsaWIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BhbXFwbGliSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvYW1xcGxpYi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmFtcXBsaWJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGFtcXBsaWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2FtcXBsaWJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW1xcGxpYkludGVncmF0aW9uID0gYW1xcGxpYkludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnRBbXFwbGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1xcGxpYi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzPzc0MjgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1jb25uZWN0Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25uZWN0JztcblxuY29uc3QgaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkNvbm5lY3QuQ29ubmVjdEluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2Nvbm5lY3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50Q29ubmVjdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtDb25uZWN0XShodHRwczovL2dpdGh1Yi5jb20vc2VuY2hhbGFicy9jb25uZWN0LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBpbml0aWFsaXplIHlvdXIgY29ubmVjdCBhcHAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Nvbm5lY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvY29ubmVjdC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5jb25uZWN0SW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2Nvbm5lY3RJbnRlZ3JhdGlvbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb25uZWN0RXJyb3JNaWRkbGV3YXJlKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycik7XG4gIG5leHQoZXJyKTtcbn1cblxuLyoqXG4gKiBBZGQgYSBDb25uZWN0IG1pZGRsZXdhcmUgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBhcHAgVGhlIENvbm5lY3QgYXBwIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKFwiY29ubmVjdFwiKTtcbiAqXG4gKiBjb25zdCBhcHAgPSBjb25uZWN0KCk7XG4gKlxuICogU2VudHJ5LnNldHVwQ29ubmVjdEVycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIC8vIEFkZCB5b3UgY29ubmVjdCByb3V0ZXMgaGVyZVxuICpcbiAqIGFwcC5saXN0ZW4oMzAwMCk7XG4gKiBgYGBcbiAqL1xuY29uc3Qgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGNvbm5lY3RFcnJvck1pZGRsZXdhcmUpO1xuXG4gIC8vIFNhZGx5LCBDb25uZWN0SW5zdHJ1bWVudGF0aW9uIGhhcyBubyByZXF1ZXN0SG9vaywgc28gd2UgbmVlZCB0byBhZGQgdGhlIGF0dHJpYnV0ZXMgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgY29ubmVjdFxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuc3VyZUlzV3JhcHBlZC5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2Nvbm5lY3QnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcmVxdWVzdF9oYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydjb25uZWN0LnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIGNvbm5lY3Qgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmNvbm5lY3QnLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5jb25uZWN0YCxcbiAgfSk7XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdG8gXCJtaWRkbGV3YXJlIC0gXCIgcHJlZml4XG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydjb25uZWN0Lm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgfVxufVxuXG5leHBvcnRzLmNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvbm5lY3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50Q29ubmVjdDtcbmV4cG9ydHMuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.12.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (\n          spanJSON.description === 'dataloader.load' ||\n          spanJSON.description === 'dataloader.loadMany' ||\n          spanJSON.description === 'dataloader.batch'\n        ) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0NBQWtDLG1CQUFPLENBQUMscU9BQTJDO0FBQ3JGLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcz8xMTUxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RhdGFsb2FkZXInO1xuXG5jb25zdCBpbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlci5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4oW3NwYW5KU09OLCAnYWNjZXNzJywgXyA9PiBfLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5zdGFydHNXaXRoLCAnY2FsbCcsIF8zID0+IF8zKCdkYXRhbG9hZGVyJyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZGF0YWxvYWRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgIC8vIFN0aWxsIGNoZWNraW5nIGZvciB0aGUgZnV0dXJlIHZlcnNpb25zXG4gICAgICAgIC8vIGluIGNhc2UgdGhleSBhZGQgc3VwcG9ydCBmb3IgYGNsZWFyYCBhbmQgYHByaW1lYFxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWQnIHx8XG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWRNYW55JyB8fFxuICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnY2FjaGUuZ2V0Jyk7XG4gICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgLy8gT3IgYWx0ZXJuYXRpdmVseSwgd2UgY2FuIGFkZCBgcmVxdWVzdEhvb2tgIHRvIHRoZSBkYXRhbG9hZGVyIGluc3RydW1lbnRhdGlvbi5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtkYXRhbG9hZGVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9kYXRhbG9hZGVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZGF0YWxvYWRlckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2RhdGFsb2FkZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5kYXRhbG9hZGVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBkYXRhbG9hZGVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9kYXRhbG9hZGVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50RGF0YWxvYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFsb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n        const attributes = core.spanToJSON(span).data || {};\n        // this is one of: middleware, request_handler, router\n        const type = attributes['express.type'];\n\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n        }\n\n        // Also update the name, we don't need to \"middleware - \" prefix\n        const name = attributes['express.name'];\n        if (typeof name === 'string') {\n          span.updateName(name);\n        }\n      },\n      spanNameHook(info, defaultName) {\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD &&\n            core.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n          return defaultName;\n        }\n        if (info.layerType === 'request_handler') {\n          // type cast b/c Otel unfortunately types info.request as any :(\n          const req = info.request ;\n          const method = req.method ? req.method.toUpperCase() : 'GET';\n          core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n        }\n        return defaultName;\n      },\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    _req,\n    res,\n    next,\n  ) {\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n      next(error);\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fastify@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastify = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationFastify.FastifyInstrumentation({\n      requestHook(span) {\n        addFastifySpanAttributes(span);\n      },\n    }),\n);\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (_request, _reply, error) => {\n        core.captureException(error);\n      });\n\n      // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n      // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n      // https://fastify.dev/docs/latest/Reference/Lifecycle/\n      fastify.addHook('onRequest', async (request, _reply) => {\n        const reqWithRouteInfo = request ;\n\n        // Taken from Otel Fastify instrumentation:\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n        const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n        const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n\n        core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\n\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=fastify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.39.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan =\n          spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQywyT0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUEsb0pBQW9KOztBQUVwSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanM/YzJmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHZW5lcmljUG9vbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wuR2VuZXJpY1Bvb2xJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX2dlbmVyaWNQb29sSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEdlbmVyaWNQb29sKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG5cbiAgICAgICAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc3BhbkpTT04uZGVzY3JpcHRpb247XG5cbiAgICAgICAgLy8gdHlwbyBpbiBlbWl0dGVkIHNwYW4gZm9yIHZlcnNpb24gPD0gMC4zOC4wIG9mIEBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2xcbiAgICAgICAgY29uc3QgaXNHZW5lcmljUG9vbFNwYW4gPVxuICAgICAgICAgIHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hcXVpcmUnIHx8IHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hY3F1aXJlJztcblxuICAgICAgICBpZiAoaXNHZW5lcmljUG9vbFNwYW4pIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLmdlbmVyaWNfcG9vbCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dlbmVyaWMtcG9vbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2VuZXJpYy1wb29sKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9nZW5lcmljcG9vbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBnZW5lcmljUG9vbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnRHZW5lcmljUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNQb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (_options = {}) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return new instrumentationGraphql.GraphQLInstrumentation({\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data || {};\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n\n          // We guard to only do this on http.server spans\n\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            existingOperations.push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (existingOperations) {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n        }\n      },\n    });\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsNE9BQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsa0RBQWtELGVBQWUsRUFBRSxjQUFjLE9BQU8sY0FBYzs7QUFFdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ncmFwaHFsLmpzPzU0OTciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR3JhcGhxbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1ncmFwaHFsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHcmFwaHFsJztcblxuY29uc3QgaW5zdHJ1bWVudEdyYXBocWwgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIChfb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGdldE9wdGlvbnNXaXRoRGVmYXVsdHMoX29wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25HcmFwaHFsLkdyYXBoUUxJbnN0cnVtZW50YXRpb24oe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZ3JhcGhxbC5vdGVsLmdyYXBocWwnKTtcblxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgICAgICAgLy8gSWYgb3BlcmF0aW9uLm5hbWUgaXMgbm90IHNldCwgd2UgZmFsbCBiYWNrIHRvIHVzZSBvcGVyYXRpb24udHlwZSBvbmx5XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvblR5cGUgPSBhdHRyaWJ1dGVzWydncmFwaHFsLm9wZXJhdGlvbi50eXBlJ107XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBhdHRyaWJ1dGVzWydncmFwaHFsLm9wZXJhdGlvbi5uYW1lJ107XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlT3BlcmF0aW9uTmFtZUZvclJvb3RTcGFuICYmIG9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjb25zdCByb290U3BhbiA9IGNvcmUuZ2V0Um9vdFNwYW4oc3Bhbik7XG5cbiAgICAgICAgICAvLyBXZSBndWFyZCB0byBvbmx5IGRvIHRoaXMgb24gaHR0cC5zZXJ2ZXIgc3BhbnNcblxuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihyb290U3BhbikuZGF0YSB8fCB7fTtcblxuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nT3BlcmF0aW9ucyA9IHJvb3RTcGFuQXR0cmlidXRlc1tvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT05dIHx8IFtdO1xuXG4gICAgICAgICAgY29uc3QgbmV3T3BlcmF0aW9uID0gb3BlcmF0aW9uTmFtZSA/IGAke29wZXJhdGlvblR5cGV9ICR7b3BlcmF0aW9uTmFtZX1gIDogYCR7b3BlcmF0aW9uVHlwZX1gO1xuXG4gICAgICAgICAgLy8gV2Uga2VlcCB0cmFjayBvZiBlYWNoIG9wZXJhdGlvbiBvbiB0aGUgcm9vdCBzcGFuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gZWl0aGVyIGJlIGEgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIChpZiB0aGVyZSBhcmUgbXVsdGlwbGUgb3BlcmF0aW9ucylcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleGlzdGluZ09wZXJhdGlvbnMpKSB7XG4gICAgICAgICAgICBleGlzdGluZ09wZXJhdGlvbnMucHVzaChuZXdPcGVyYXRpb24pO1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgZXhpc3RpbmdPcGVyYXRpb25zKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nT3BlcmF0aW9ucykge1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgW2V4aXN0aW5nT3BlcmF0aW9ucywgbmV3T3BlcmF0aW9uXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIG5ld09wZXJhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuKTtcblxuY29uc3QgX2dyYXBocWxJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAvLyBXZSBzZXQgZGVmYXVsdHMgaGVyZSwgdG9vLCBiZWNhdXNlIG90aGVyd2lzZSB3ZSdkIHVwZGF0ZSB0aGUgaW5zdHJ1bWVudGF0aW9uIGNvbmZpZ1xuICAgICAgLy8gdG8gdGhlIGNvbmZpZyB3aXRob3V0IGRlZmF1bHRzLCBhcyBgZ2VuZXJhdGVJbnN0cnVtZW50T25jZWAgYXV0b21hdGljYWxseSBjYWxscyBgc2V0Q29uZmlnKG9wdGlvbnMpYFxuICAgICAgLy8gd2hlbiBiZWluZyBjYWxsZWQgdGhlIHNlY29uZCB0aW1lXG4gICAgICBpbnN0cnVtZW50R3JhcGhxbChnZXRPcHRpb25zV2l0aERlZmF1bHRzKG9wdGlvbnMpKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dyYXBocWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dyYXBocWwpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BncmFwaHFsSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZ3JhcGhxbC8pLlxuICpcbiAqIEBwYXJhbSB7R3JhcGhxbE9wdGlvbnN9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgR3JhcGhRTCBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5ncmFwaHFsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgZ3JhcGhxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ3JhcGhxbEludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgaWdub3JlUmVzb2x2ZVNwYW5zOiB0cnVlLFxuICAgIGlnbm9yZVRyaXZpYWxSZXNvbHZlU3BhbnM6IHRydWUsXG4gICAgdXNlT3BlcmF0aW9uTmFtZUZvclJvb3RTcGFuOiB0cnVlLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG59XG5cbmV4cG9ydHMuZ3JhcGhxbEludGVncmF0aW9uID0gZ3JhcGhxbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R3JhcGhxbCA9IGluc3RydW1lbnRHcmFwaHFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhxbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return event && (event ).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsNEJBQTRCLG1CQUFPLENBQUMsbU5BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxzSUFBeUI7QUFDcEQsbUJBQW1CLG1CQUFPLENBQUMsOElBQTZCO0FBQ3hELHdCQUF3QixtQkFBTyxDQUFDLDBKQUFtQzs7QUFFbkU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsc0NBQXNDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx1SEFBdUgsRUFBRSxXQUFXO0FBQzdMO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzPzhlM2YiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uSGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hhcGknO1xuXG5jb25zdCBpbnN0cnVtZW50SGFwaSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hhcGldKGh0dHBzOi8vaGFwaS5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbaGFwaSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9oYXBpLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmhhcGlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudCAmJiAoZXZlbnQgKS5lcnJvciAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2hhcGknLFxuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGZ1bmN0aW9uOiAnaGFwaUVycm9yUGx1Z2luJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGhhcGlFcnJvclBsdWdpbiA9IHtcbiAgbmFtZTogJ1NlbnRyeUhhcGlFcnJvclBsdWdpbicsXG4gIHZlcnNpb246IGNvcmUuU0RLX1ZFUlNJT04sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbiAoc2VydmVyQXJnKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyQXJnIDtcblxuICAgIHNlcnZlci5ldmVudHMub24oeyBuYW1lOiAncmVxdWVzdCcsIGNoYW5uZWxzOiBbJ2Vycm9yJ10gfSwgKHJlcXVlc3QsIGV2ZW50KSA9PiB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpICE9PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcmVxdWVzdC5yb3V0ZTtcbiAgICAgICAgaWYgKHJvdXRlICYmIHJvdXRlLnBhdGgpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke19vcHRpb25hbENoYWluKFtyb3V0ZSwgJ2FjY2VzcycsIF8gPT4gXy5tZXRob2QsICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnRvVXBwZXJDYXNlLCAnY2FsbCcsIF8zID0+IF8zKCldKSB8fCAnR0VUJ30gJHtyb3V0ZS5wYXRofWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgY29yZS5sb2dnZXIud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycm9yRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHNlbmRFcnJvclRvU2VudHJ5KGV2ZW50LmVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWRkIGEgSGFwaSBwbHVnaW4gdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXIgVGhlIEhhcGkgc2VydmVyIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEhhcGkgPSByZXF1aXJlKCdAaGFwaS9oYXBpJyk7XG4gKlxuICogY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAqICAgY29uc3Qgc2VydmVyID0gSGFwaS5zZXJ2ZXIoKTtcbiAqXG4gKiAgIC8vIGFsbCB5b3VyIHJvdXRlcyBoZXJlXG4gKlxuICogICBhd2FpdCBTZW50cnkuc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcik7XG4gKlxuICogICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YSB8fCB7fTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst index$1 = __webpack_require__(/*! ../http/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    fastify.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    // For now, we do not include prisma by default because it has ESM issues\n    // See https://github.com/prisma/prisma/issues/23410\n    // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n    // prismaIntegration(),\n    // eslint-disable-next-line deprecation/deprecation\n    nest.nestIntegration(),\n    index.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index$1.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    fastify.instrumentFastify,\n    index.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    // eslint-disable-next-line deprecation/deprecation\n    nest.instrumentNest,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQkFBZ0IsbUJBQU8sQ0FBQywySUFBa0I7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsb0pBQWtCO0FBQzlDLGdCQUFnQixtQkFBTyxDQUFDLDRJQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxrSkFBaUI7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLHdJQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyxvSUFBVTtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyxvSkFBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLHdJQUFZO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLDhJQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyx3SUFBWTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsMElBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLGdKQUFnQjtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyw4SUFBZTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsd0lBQVk7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsNElBQWM7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanM/ZWNmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbmRleCQxID0gcmVxdWlyZSgnLi4vaHR0cC9pbmRleC5qcycpO1xuY29uc3QgYW1xcGxpYiA9IHJlcXVpcmUoJy4vYW1xcGxpYi5qcycpO1xuY29uc3QgY29ubmVjdCA9IHJlcXVpcmUoJy4vY29ubmVjdC5qcycpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJy4vZXhwcmVzcy5qcycpO1xuY29uc3QgZmFzdGlmeSA9IHJlcXVpcmUoJy4vZmFzdGlmeS5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBncmFwaHFsID0gcmVxdWlyZSgnLi9ncmFwaHFsLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vaGFwaS9pbmRleC5qcycpO1xuY29uc3Qga2Fma2EgPSByZXF1aXJlKCcuL2thZmthLmpzJyk7XG5jb25zdCBrb2EgPSByZXF1aXJlKCcuL2tvYS5qcycpO1xuY29uc3QgbHJ1bWVtb2l6ZXIgPSByZXF1aXJlKCcuL2xydW1lbW9pemVyLmpzJyk7XG5jb25zdCBtb25nbyA9IHJlcXVpcmUoJy4vbW9uZ28uanMnKTtcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi9tb25nb29zZS5qcycpO1xuY29uc3QgbXlzcWwgPSByZXF1aXJlKCcuL215c3FsLmpzJyk7XG5jb25zdCBteXNxbDIgPSByZXF1aXJlKCcuL215c3FsMi5qcycpO1xuY29uc3QgbmVzdCA9IHJlcXVpcmUoJy4vbmVzdC9uZXN0LmpzJyk7XG5jb25zdCBwb3N0Z3JlcyA9IHJlcXVpcmUoJy4vcG9zdGdyZXMuanMnKTtcbmNvbnN0IHJlZGlzID0gcmVxdWlyZSgnLi9yZWRpcy5qcycpO1xuY29uc3QgdGVkaW91cyA9IHJlcXVpcmUoJy4vdGVkaW91cy5qcycpO1xuXG4vKipcbiAqIFdpdGggT1RFTCwgYWxsIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyB3aWxsIGJlIGFkZGVkLCBhcyBPVEVMIG9ubHkgaW5pdGlhbGl6ZXMgdGhlbSB3aGVuIHRoZSBwYXRjaGVkIHBhY2thZ2UgaXMgYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbigpLFxuICAgIGZhc3RpZnkuZmFzdGlmeUludGVncmF0aW9uKCksXG4gICAgZ3JhcGhxbC5ncmFwaHFsSW50ZWdyYXRpb24oKSxcbiAgICBtb25nby5tb25nb0ludGVncmF0aW9uKCksXG4gICAgbW9uZ29vc2UubW9uZ29vc2VJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsLm15c3FsSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbDIubXlzcWwySW50ZWdyYXRpb24oKSxcbiAgICByZWRpcy5yZWRpc0ludGVncmF0aW9uKCksXG4gICAgcG9zdGdyZXMucG9zdGdyZXNJbnRlZ3JhdGlvbigpLFxuICAgIC8vIEZvciBub3csIHdlIGRvIG5vdCBpbmNsdWRlIHByaXNtYSBieSBkZWZhdWx0IGJlY2F1c2UgaXQgaGFzIEVTTSBpc3N1ZXNcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzLzIzNDEwXG4gICAgLy8gVE9ETyB2ODogRmlndXJlIG91dCBhIGJldHRlciBzb2x1dGlvbiBmb3IgdGhpcywgbWF5YmUgb25seSBkaXNhYmxlIGluIEVTTSBtb2RlP1xuICAgIC8vIHByaXNtYUludGVncmF0aW9uKCksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgbmVzdC5uZXN0SW50ZWdyYXRpb24oKSxcbiAgICBpbmRleC5oYXBpSW50ZWdyYXRpb24oKSxcbiAgICBrb2Eua29hSW50ZWdyYXRpb24oKSxcbiAgICBjb25uZWN0LmNvbm5lY3RJbnRlZ3JhdGlvbigpLFxuICAgIHRlZGlvdXMudGVkaW91c0ludGVncmF0aW9uKCksXG4gICAgZ2VuZXJpY1Bvb2wuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbigpLFxuICAgIGthZmthLmthZmthSW50ZWdyYXRpb24oKSxcbiAgICBhbXFwbGliLmFtcXBsaWJJbnRlZ3JhdGlvbigpLFxuICAgIGxydW1lbW9pemVyLmxydU1lbW9pemVySW50ZWdyYXRpb24oKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIG1ldGhvZHMgdG8gaW5zdHJ1bWVudCBPVEVMLCB3aGVuIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpIHtcbiAgcmV0dXJuIFtcbiAgICBpbmRleCQxLmluc3RydW1lbnRPdGVsSHR0cCxcbiAgICBleHByZXNzLmluc3RydW1lbnRFeHByZXNzLFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgZmFzdGlmeS5pbnN0cnVtZW50RmFzdGlmeSxcbiAgICBpbmRleC5pbnN0cnVtZW50SGFwaSxcbiAgICBrYWZrYS5pbnN0cnVtZW50S2Fma2EsXG4gICAga29hLmluc3RydW1lbnRLb2EsXG4gICAgbHJ1bWVtb2l6ZXIuaW5zdHJ1bWVudExydU1lbW9pemVyLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIG5lc3QuaW5zdHJ1bWVudE5lc3QsXG4gICAgbW9uZ28uaW5zdHJ1bWVudE1vbmdvLFxuICAgIG1vbmdvb3NlLmluc3RydW1lbnRNb25nb29zZSxcbiAgICBteXNxbC5pbnN0cnVtZW50TXlzcWwsXG4gICAgbXlzcWwyLmluc3RydW1lbnRNeXNxbDIsXG4gICAgcG9zdGdyZXMuaW5zdHJ1bWVudFBvc3RncmVzLFxuICAgIGluZGV4Lmluc3RydW1lbnRIYXBpLFxuICAgIGdyYXBocWwuaW5zdHJ1bWVudEdyYXBocWwsXG4gICAgcmVkaXMuaW5zdHJ1bWVudFJlZGlzLFxuICAgIHRlZGlvdXMuaW5zdHJ1bWVudFRlZGlvdXMsXG4gICAgZ2VuZXJpY1Bvb2wuaW5zdHJ1bWVudEdlbmVyaWNQb29sLFxuICAgIGFtcXBsaWIuaW5zdHJ1bWVudEFtcXBsaWIsXG4gIF07XG59XG5cbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkID0gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.4.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQywyTkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcz8zMWE3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkthZmthanMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2FqcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS2Fma2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S2Fma2EgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkthZmthanMuS2Fma2FKc0luc3RydW1lbnRhdGlvbih7XG4gICAgICBjb25zdW1lckhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5jb25zdW1lcicpO1xuICAgICAgfSxcbiAgICAgIHByb2R1Y2VySG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLnByb2R1Y2VyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2thZmthSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEthZmthKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtrYWZrYWpzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9rYWZrYWpzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtga2Fma2FJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9rYWZrYS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmthZmthSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3Qga2Fma2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2thZmthSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnRLYWZrYTtcbmV4cG9ydHMua2Fma2FJbnRlZ3JhdGlvbiA9IGthZmthSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rYWZrYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKnex();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { data } = core.spanToJSON(span);\n        // knex.version is always set in the span data\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n        if (data && 'knex.version' in data) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDRCQUE0QixtQkFBTyxDQUFDLG1OQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcz9lNGEzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktuZXggPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tuZXgnO1xuXG5jb25zdCBpbnN0cnVtZW50S25leCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbktuZXguS25leEluc3RydW1lbnRhdGlvbih7IHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlIH0pLFxuKTtcblxuY29uc3QgX2tuZXhJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S25leCgpO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAvLyBrbmV4LnZlcnNpb24gaXMgYWx3YXlzIHNldCBpbiB0aGUgc3BhbiBkYXRhXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi8wMzA5Y2FlYWZjNDRhYzljYjEzYTMzNDViNzkwYjAxYjc2ZDA0OTdkL3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1rbmV4L3NyYy9pbnN0cnVtZW50YXRpb24udHMjTDEzOFxuICAgICAgICBpZiAoZGF0YSAmJiAna25leC52ZXJzaW9uJyBpbiBkYXRhKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5rbmV4Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS25leCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBbS25leF0oaHR0cHM6Ly9rbmV4anMub3JnLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua25leEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3Qga25leEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa25leEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S25leCA9IGluc3RydW1lbnRLbmV4O1xuZXhwb3J0cy5rbmV4SW50ZWdyYXRpb24gPSBrbmV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbmV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKoa.KoaInstrumentation({\n      requestHook(span, info) {\n        addKoaSpanAttributes(span);\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const attributes = core.spanToJSON(span).data;\n        const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    }),\n);\n\nconst _koaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwyQkFBMkIsbUJBQU8sQ0FBQyxnTkFBb0M7QUFDdkUsNEJBQTRCLG1CQUFPLENBQUMsMExBQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxtSUFBc0I7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsMklBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHVKQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsTUFBTTtBQUN6RTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNERBQTRELEtBQUs7QUFDakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanM/OWI5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfb3B0aW9uYWxDaGFpblxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Lb2EgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgZW5zdXJlSXNXcmFwcGVkID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS29hJztcblxuY29uc3QgaW5zdHJ1bWVudEtvYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS29hLktvYUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1ZXN0SG9vayhzcGFuLCBpbmZvKSB7XG4gICAgICAgIGFkZEtvYVNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuXG4gICAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcbiAgICAgICAgY29uc3Qgcm91dGUgPSBhdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IF9vcHRpb25hbENoYWluKFtpbmZvLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uY29udGV4dCwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIucmVxdWVzdCwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMubWV0aG9kLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC50b1VwcGVyQ2FzZSwgJ2NhbGwnLCBfNSA9PiBfNSgpXSkgfHwgJ0dFVCc7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2tvYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLb2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbS29hXShodHRwczovL2tvYWpzLmNvbS8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwS29hRXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBLb2Egc2VydmVyLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtrb2EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMva29hLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtvYUludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBrb2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tvYUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYW4gS29hIGVycm9yIGhhbmRsZXIgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIFRoZSBlcnJvciBoYW5kbGVyIG11c3QgYmUgYmVmb3JlIGFueSBvdGhlciBtaWRkbGV3YXJlIGFuZCBhZnRlciBhbGwgY29udHJvbGxlcnMuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgRXhwcmVzcyBpbnN0YW5jZXNcbiAqIEBwYXJhbSBvcHRpb25zIHtFeHByZXNzSGFuZGxlck9wdGlvbnN9IENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhhbmRsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBLb2EgPSByZXF1aXJlKFwia29hXCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IG5ldyBLb2EoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBLb2FFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91ciByb3V0ZXMsIGV0Yy5cbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBzZXR1cEtvYUVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSk7XG5cbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5mdW5jdGlvbiBhZGRLb2FTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmh0dHAub3RlbC5rb2EnKTtcblxuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGEgfHwge307XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJvdXRlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1sna29hLnR5cGUnXTtcblxuICBpZiAodHlwZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0ua29hYCk7XG4gIH1cblxuICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZVxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1sna29hLm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIC8vIFNvbWVob3csIG5hbWUgaXMgc29tZXRpbWVzIGAnJ2AgZm9yIG1pZGRsZXdhcmUgc3BhbnNcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvaXNzdWVzLzIyMjBcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSB8fCAnPCB1bmtub3duID4nKTtcbiAgfVxufVxuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxtQ0FBbUMsbUJBQU8sQ0FBQywyT0FBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanM/ZmZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMcnVNZW1vaXplcic7XG5cbmNvbnN0IGluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIuTHJ1TWVtb2l6ZXJJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9scnVNZW1vaXplckludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRMcnVNZW1vaXplcigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbHJ1LW1lbW9pemVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9scnUtbWVtb2l6ZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BscnVNZW1vaXplckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2xydW1lbW9pemVyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBscnVNZW1vaXplckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudExydU1lbW9pemVyID0gaW5zdHJ1bWVudExydU1lbW9pemVyO1xuZXhwb3J0cy5scnVNZW1vaXplckludGVncmF0aW9uID0gbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydW1lbW9pemVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanM/MmNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb2RiID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb2RiLk1vbmdvREJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgZGJTdGF0ZW1lbnRTZXJpYWxpemVyOiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcixcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nbycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbi8qKlxuICogUmVwbGFjZXMgdmFsdWVzIGluIGRvY3VtZW50IHdpdGggJz8nLCBoaWRpbmcgUElJIGFuZCBoZWxwaW5nIGdyb3VwaW5nLlxuICovXG5mdW5jdGlvbiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcihjb21tYW5kT2JqKSB7XG4gIGNvbnN0IHJlc3VsdE9iaiA9IF9zY3J1YlN0YXRlbWVudChjb21tYW5kT2JqKTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdE9iaik7XG59XG5cbmZ1bmN0aW9uIF9zY3J1YlN0YXRlbWVudCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGVsZW1lbnQgPT4gX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpKTtcbiAgfVxuXG4gIGlmIChpc0NvbW1hbmRPYmoodmFsdWUpKSB7XG4gICAgY29uc3QgaW5pdGlhbCA9IHt9O1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh2YWx1ZSlcbiAgICAgIC5tYXAoKFtrZXksIGVsZW1lbnRdKSA9PiBba2V5LCBfc2NydWJTdGF0ZW1lbnQoZWxlbWVudCldKVxuICAgICAgLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICBpZiAoaXNDb21tYW5kRW50cnkoY3VycmVudCkpIHtcbiAgICAgICAgICBwcmV2W2N1cnJlbnRbMF1dID0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0sIGluaXRpYWwpO1xuICB9XG5cbiAgLy8gQSB2YWx1ZSBsaWtlIHN0cmluZyBvciBudW1iZXIsIHBvc3NpYmxlIGNvbnRhaW5zIFBJSSwgc2NydWIgaXRcbiAgcmV0dXJuICc/Jztcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kT2JqKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFpc0J1ZmZlcih2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbHVlKSB7XG4gIGxldCBpc0J1ZmZlciA9IGZhbHNlO1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGlzQnVmZmVyO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1hbmRFbnRyeSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmNvbnN0IF9tb25nb0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nbygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29kYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29kYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG1vbmdvSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbW9uZ28vKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5tb25nb0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbW9uZ29JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vbmdvSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLl9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyID0gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXI7XG5leHBvcnRzLmluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnRNb25nbztcbmV4cG9ydHMubW9uZ29JbnRlZ3JhdGlvbiA9IG1vbmdvSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nby5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxnQ0FBZ0MsbUJBQU8sQ0FBQywrTkFBeUM7QUFDakYsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcz85ZmVhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvb3NlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nb29zZSc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nb29zZSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UuTW9uZ29vc2VJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvb3NlJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX21vbmdvb3NlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvb3NlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFttb25nb29zZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2UpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb29zZUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvb3NlLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29vc2VJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvb3NlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb29zZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50TW9uZ29vc2U7XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29vc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw2QkFBNkIsbUJBQU8sQ0FBQyxzTkFBc0M7QUFDM0UsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUEsa0lBQWtJOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsLmpzP2U3YmEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTXlzcWwuTXlTUUxJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX215c3FsSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE15c3FsKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BteXNxbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9teXNxbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50TXlzcWw7XG5leHBvcnRzLm15c3FsSW50ZWdyYXRpb24gPSBteXNxbEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsOEJBQThCLG1CQUFPLENBQUMseU5BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsdUpBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzPzUwMTQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsMicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwyJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsMiA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTXlzcWwyLk15U1FMMkluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubXlzcWwyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX215c3FsMkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbDIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsMl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWwySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsMkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWwySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50TXlzcWwyO1xuZXhwb3J0cy5teXNxbDJJbnRlZ3JhdGlvbiA9IG15c3FsMkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n\n  core.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => ( target.name)); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs',\n    },\n  };\n}\n\n/**\n * Returns span options for nest event spans.\n */\nfunction getEventSpanOptions(event)\n\n {\n  return {\n    name: `event ${event}`,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'event.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.event.nestjs',\n    },\n    forceTransaction: true,\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    },\n  });\n}\n\nexports.getEventSpanOptions = getEventSpanOptions;\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDJCQUEyQjtBQUMzQixnQ0FBZ0M7QUFDaEMsb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzPzg0NTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX251bGxpc2hDb2FsZXNjZVxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IHNlbnRyeVBhdGNoZWQgPSAnc2VudHJ5UGF0Y2hlZCc7XG5cbi8qKlxuICogSGVscGVyIGNoZWNraW5nIGlmIGEgY29uY3JldGUgdGFyZ2V0IGNsYXNzIGlzIGFscmVhZHkgcGF0Y2hlZC5cbiAqXG4gKiBXZSBhbHJlYWR5IGd1YXJkIGR1cGxpY2F0ZSBwYXRjaGluZyB3aXRoIGlzV3JhcHBlZC4gSG93ZXZlciwgaXNXcmFwcGVkIGNoZWNrcyB3aGV0aGVyIGEgZmlsZSBoYXMgYmVlbiBwYXRjaGVkLCB3aGVyZWFzIHdlIHVzZSB0aGlzIGNoZWNrIGZvciBjb25jcmV0ZSB0YXJnZXQgY2xhc3Nlcy5cbiAqIFRoaXMgY2hlY2sgbWlnaHQgbm90IGJlIG5lY2Vzc2FyeSwgYnV0IGJldHRlciB0byBwbGF5IGl0IHNhZmUuXG4gKi9cbmZ1bmN0aW9uIGlzUGF0Y2hlZCh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5zZW50cnlQYXRjaGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjb3JlLmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXQsIHNlbnRyeVBhdGNoZWQsIHRydWUpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBzcGFuIG9wdGlvbnMgZm9yIG5lc3QgbWlkZGxld2FyZSBzcGFucy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZVxuZnVuY3Rpb24gZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zKHRhcmdldCwgbmFtZSA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBzcGFuX25hbWUgPSBfbnVsbGlzaENvYWxlc2NlKG5hbWUsICgpID0+ICggdGFyZ2V0Lm5hbWUpKTsgLy8gZmFsbGJhY2sgdG8gY2xhc3MgbmFtZSBpZiBubyBuYW1lIGlzIHByb3ZpZGVkXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBzcGFuX25hbWUsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdtaWRkbGV3YXJlLm5lc3RqcycsXG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLm1pZGRsZXdhcmUubmVzdGpzJyxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgc3BhbiBvcHRpb25zIGZvciBuZXN0IGV2ZW50IHNwYW5zLlxuICovXG5mdW5jdGlvbiBnZXRFdmVudFNwYW5PcHRpb25zKGV2ZW50KVxuXG4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGBldmVudCAke2V2ZW50fWAsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06ICdldmVudC5uZXN0anMnLFxuICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5ldmVudC5uZXN0anMnLFxuICAgIH0sXG4gICAgZm9yY2VUcmFuc2FjdGlvbjogdHJ1ZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBBZGRzIGluc3RydW1lbnRhdGlvbiB0byBhIGpzIG9ic2VydmFibGUgYW5kIGF0dGFjaGVzIHRoZSBzcGFuIHRvIGFuIGFjdGl2ZSBwYXJlbnQgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE9ic2VydmFibGUob2JzZXJ2YWJsZSwgYWN0aXZlU3Bhbikge1xuICBpZiAoYWN0aXZlU3Bhbikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSA9IG5ldyBQcm94eShvYnNlcnZhYmxlLnN1YnNjcmliZSwge1xuICAgICAgYXBwbHk6IChvcmlnaW5hbFN1YnNjcmliZSwgdGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSkgPT4ge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihhY3RpdmVTcGFuLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb3JpZ2luYWxTdWJzY3JpYmUuYXBwbHkodGhpc0FyZ1N1YnNjcmliZSwgYXJnc1N1YnNjcmliZSk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLmFkZCgoKSA9PiBhY3RpdmVTcGFuLmVuZCgpKTtcbiAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm94aWVzIHRoZSBuZXh0KCkgY2FsbCBpbiBhIG5lc3RqcyBtaWRkbGV3YXJlIHRvIGVuZCB0aGUgc3BhbiB3aGVuIGl0IGlzIGNhbGxlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dFByb3h5KG5leHQsIHNwYW4sIHByZXZTcGFuKSB7XG4gIHJldHVybiBuZXcgUHJveHkobmV4dCwge1xuICAgIGFwcGx5OiAob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpID0+IHtcbiAgICAgIHNwYW4uZW5kKCk7XG5cbiAgICAgIGlmIChwcmV2U3Bhbikge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoQWN0aXZlU3BhbihwcmV2U3BhbiwgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseShvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuZ2V0RXZlbnRTcGFuT3B0aW9ucyA9IGdldEV2ZW50U3Bhbk9wdGlvbnM7XG5leHBvcnRzLmdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucyA9IGdldE1pZGRsZXdhcmVTcGFuT3B0aW9ucztcbmV4cG9ydHMuZ2V0TmV4dFByb3h5ID0gZ2V0TmV4dFByb3h5O1xuZXhwb3J0cy5pbnN0cnVtZW50T2JzZXJ2YWJsZSA9IGluc3RydW1lbnRPYnNlcnZhYmxlO1xuZXhwb3J0cy5pc1BhdGNoZWQgPSBpc1BhdGNoZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-nestjs-core@0.40.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestEventInstrumentation = __webpack_require__(/*! ./sentry-nest-event-instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Nest';\n\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\n\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\n\nconst instrumentNestEvent = instrument.generateInstrumentOnce('Nest-Event', () => {\n  return new sentryNestEventInstrumentation.SentryNestEventInstrumentation();\n});\n\nconst instrumentNest = Object.assign(\n  () => {\n    instrumentNestCore();\n    instrumentNestCommon();\n    instrumentNestEvent();\n  },\n  { id: INTEGRATION_NAME },\n);\n\n/**\n * Integration capturing tracing data for NestJS.\n *\n * @deprecated The `nestIntegration` is deprecated. Instead, use the NestJS SDK directly (`@sentry/nestjs`), or use the `nestIntegration` export from `@sentry/nestjs`.\n */\nconst nestIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    },\n  };\n});\n\n/**\n * Setup an error handler for Nest.\n *\n * @deprecated `setupNestErrorHandler` is deprecated.\n * Instead use the `@sentry/nestjs` package, which has more functional APIs for capturing errors.\n * See the [`@sentry/nestjs` Setup Guide](https://docs.sentry.io/platforms/javascript/guides/nestjs/) for how to set up the Sentry NestJS SDK.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[Sentry] Warning: You used the `setupNestErrorHandler()` method to set up Sentry error monitoring. This function is deprecated and will be removed in the next major version. Instead, it is recommended to use the `@sentry/nestjs` package. To set up the NestJS SDK see: https://docs.sentry.io/platforms/javascript/guides/nestjs/',\n    );\n  });\n\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        core.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n\n      if (context.getType() === 'http') {\n        const req = context.switchToHttp().getRequest();\n        if (req.route) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n\n      return next.handle();\n    },\n  });\n\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  });\n\n  app.useGlobalFilters(wrappedFilter);\n}\n\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;\n//# sourceMappingURL=nest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.44.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwwQkFBMEIsbUJBQU8sQ0FBQyw2TUFBbUM7QUFDckUsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyx1SkFBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzPzRmMmMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uUGcgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Bvc3RncmVzJztcblxuY29uc3QgaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25QZy5QZ0luc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLnBvc3RncmVzJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX3Bvc3RncmVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFBvc3RncmVzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtwZ10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGcpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Bwb3N0Z3Jlc0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3Bvc3RncmVzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkucG9zdGdyZXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHBvc3RncmVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50UG9zdGdyZXM7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@prisma+instrumentation@5.19.1/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n    // @ts-expect-error We need to do the following for interop reasons\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n\n  return new EsmInteropPrismaInstrumentation({});\n});\n\nconst _prismaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        if (spanJSON.description === 'prisma:engine:db_query') {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n *\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * @example\n *\n * Make sure `previewFeatures = [\"tracing\"]` is set in the prisma client generator block. See the\n * [prisma docs](https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing) for more details.\n *\n * ```prisma\n * generator client {\n *  provider = \"prisma-client-js\"\n *  previewFeatures = [\"tracing\"]\n * }\n * ```\n *\n * Then you can use the integration like this:\n *\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.prismaIntegration()],\n * });\n * ```\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcHJpc21hLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCw4QkFBOEIsbUJBQU8sQ0FBQyxpSkFBeUI7QUFDL0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjs7QUFFckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ByaXNtYS5qcz84NmZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHByaXNtYUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BwcmlzbWEvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUHJpc21hJztcblxuY29uc3QgaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiB7XG4gIGNvbnN0IEVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24gPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgbmVlZCB0byBkbyB0aGUgZm9sbG93aW5nIGZvciBpbnRlcm9wIHJlYXNvbnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgX29wdGlvbmFsQ2hhaW4oW3ByaXNtYUluc3RydW1lbnRhdGlvbiwgJ2FjY2VzcycsIF8gPT4gXy5kZWZhdWx0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5QcmlzbWFJbnN0cnVtZW50YXRpb25dKSB8fCBwcmlzbWFJbnN0cnVtZW50YXRpb24uUHJpc21hSW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiBuZXcgRXNtSW50ZXJvcFByaXNtYUluc3RydW1lbnRhdGlvbih7fSk7XG59KTtcblxuY29uc3QgX3ByaXNtYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQcmlzbWEoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtzcGFuSlNPTiwgJ2FjY2VzcycsIF8zID0+IF8zLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC5zdGFydHNXaXRoLCAnY2FsbCcsIF81ID0+IF81KCdwcmlzbWE6JyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucHJpc21hJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdwcmlzbWE6ZW5naW5lOmRiX3F1ZXJ5Jykge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYi5zeXN0ZW0nLCAncHJpc21hJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcHJpc21hXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9wcmlzbWEpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BwcmlzbWFJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wcmlzbWEvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIE1ha2Ugc3VyZSBgcHJldmlld0ZlYXR1cmVzID0gW1widHJhY2luZ1wiXWAgaXMgc2V0IGluIHRoZSBwcmlzbWEgY2xpZW50IGdlbmVyYXRvciBibG9jay4gU2VlIHRoZVxuICogW3ByaXNtYSBkb2NzXShodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvb3BlbnRlbGVtZXRyeS10cmFjaW5nKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIGBgYHByaXNtYVxuICogZ2VuZXJhdG9yIGNsaWVudCB7XG4gKiAgcHJvdmlkZXIgPSBcInByaXNtYS1jbGllbnQtanNcIlxuICogIHByZXZpZXdGZWF0dXJlcyA9IFtcInRyYWNpbmdcIl1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZW4geW91IGNhbiB1c2UgdGhlIGludGVncmF0aW9uIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnByaXNtYUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcHJpc21hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wcmlzbWFJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnRQcmlzbWE7XG5leHBvcnRzLnByaXNtYUludGVncmF0aW9uID0gcHJpc21hSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmlzbWEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.43.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis-4@0.42.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHFIQUFjOztBQUUxQiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELCtCQUErQixtQkFBTyxDQUFDLDROQUF3QztBQUMvRSw4QkFBOEIsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDOUUsYUFBYSxtQkFBTyxDQUFDLHFIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDJJQUEwQjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyw2SUFBMkI7O0FBRXREOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrRkFBa0Y7QUFDM0c7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4QyxHQUFHO0FBQ0gsSUFBSSxzQkFBc0I7QUFDMUI7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcz84YjAxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbklvcmVkaXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taW9yZWRpcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uUmVkaXM0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHJlZGlzQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZWRpc0NhY2hlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUmVkaXMnO1xuXG5sZXQgX3JlZGlzT3B0aW9ucyA9IHt9O1xuXG5jb25zdCBjYWNoZVJlc3BvbnNlSG9vayA9IChzcGFuLCByZWRpc0NvbW1hbmQsIGNtZEFyZ3MsIHJlc3BvbnNlKSA9PiB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucmVkaXMnKTtcblxuICBjb25zdCBzYWZlS2V5ID0gcmVkaXNDYWNoZS5nZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpO1xuICBjb25zdCBjYWNoZU9wZXJhdGlvbiA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKTtcblxuICBpZiAoXG4gICAgIXNhZmVLZXkgfHxcbiAgICAhY2FjaGVPcGVyYXRpb24gfHxcbiAgICAhX29wdGlvbmFsQ2hhaW4oW19yZWRpc09wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5jYWNoZVByZWZpeGVzXSkgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzIgPT4gXzIoc3BhbiksICdhY2Nlc3MnLCBfMyA9PiBfMy5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNFsnbmV0LnBlZXIubmFtZSddXSk7XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzUgPT4gXzUoc3BhbiksICdhY2Nlc3MnLCBfNiA9PiBfNi5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfN1snbmV0LnBlZXIucG9ydCddXSk7XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZShjb3JlLnRydW5jYXRlKHNwYW5EZXNjcmlwdGlvbiwgMTAyNCkpO1xufTtcblxuY29uc3QgaW5zdHJ1bWVudElPUmVkaXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoJ0lPUmVkaXMnLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcy5JT1JlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50UmVkaXM0ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdSZWRpcy00JywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvblJlZGlzNC5SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuLyoqIFRvIGJlIGFibGUgdG8gcHJlbG9hZCBhbGwgUmVkaXMgT1RlbCBpbnN0cnVtZW50YXRpb25zIHdpdGgganVzdCBvbmUgSUQgKFwiUmVkaXNcIiksIGFsbCB0aGUgaW5zdHJ1bWVudGF0aW9ucyBhcmUgZ2VuZXJhdGVkIGluIHRoaXMgb25lIGZ1bmN0aW9uICAqL1xuY29uc3QgaW5zdHJ1bWVudFJlZGlzID0gT2JqZWN0LmFzc2lnbihcbiAgKCkgPT4ge1xuICAgIGluc3RydW1lbnRJT1JlZGlzKCk7XG4gICAgaW5zdHJ1bWVudFJlZGlzNCgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentTedious();\n    },\n\n    setup(client) {\n      client.on('spanStart', span => {\n        const { description, data } = core.spanToJSON(span);\n        // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n        if (!description || _optionalChain([data, 'optionalAccess', _ => _['db.system']]) !== 'mssql') {\n          return;\n        }\n\n        const operation = _optionalChain([description, 'optionalAccess', _2 => _2.split, 'call', _3 => _3(' '), 'access', _4 => _4[0]]) || '';\n        if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n        }\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQywySUFBMEI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsd0lBQXdJOztBQUV4STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcz8xY2U1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblRlZGlvdXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdGVkaW91cycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMgPSBuZXcgU2V0KFtcbiAgJ2NhbGxQcm9jZWR1cmUnLFxuICAnZXhlY1NxbCcsXG4gICdleGVjU3FsQmF0Y2gnLFxuICAnZXhlY0J1bGtMb2FkJyxcbiAgJ3ByZXBhcmUnLFxuICAnZXhlY3V0ZScsXG5dKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdUZWRpb3VzJztcblxuY29uc3QgaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvblRlZGlvdXMuVGVkaW91c0luc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfdGVkaW91c0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRUZWRpb3VzKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAvLyBUZWRpdXMgaW50ZWdyYXRpb24gYWx3YXlzIHNldCBhIHNwYW4gbmFtZSBhbmQgYGRiLnN5c3RlbWAgYXR0cmlidXRlIHRvIGBtc3NxbGAuXG4gICAgICAgIGlmICghZGVzY3JpcHRpb24gfHwgX29wdGlvbmFsQ2hhaW4oW2RhdGEsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gX1snZGIuc3lzdGVtJ11dKSAhPT0gJ21zc3FsJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IF9vcHRpb25hbENoYWluKFtkZXNjcmlwdGlvbiwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuc3BsaXQsICdjYWxsJywgXzMgPT4gXzMoJyAnKSwgJ2FjY2VzcycsIF80ID0+IF80WzBdXSkgfHwgJyc7XG4gICAgICAgIGlmIChURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMuaGFzKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnRlZGlvdXMnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFt0ZWRpb3VzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90ZWRpb3VzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgdGVkaW91c0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3RlZGlvdXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS50ZWRpb3VzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCB0ZWRpb3VzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF90ZWRpb3VzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRUZWRpb3VzID0gaW5zdHJ1bWVudFRlZGlvdXM7XG5leHBvcnRzLnRlZGlvdXNJbnRlZ3JhdGlvbiA9IHRlZGlvdXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlZGlvdXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcz81NzBiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gY29yZS5wYXJzZVNlbXZlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUpIDtcbmNvbnN0IE5PREVfTUFKT1IgPSBOT0RFX1ZFUlNJT04ubWFqb3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfVkVSU0lPTiA9IE5PREVfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVWZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9jb250ZXh0TWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELDBCQUEwQixtQkFBTyxDQUFDLGdOQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQyw0T0FBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL290ZWwvY29udGV4dE1hbmFnZXIuanM/MzA5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb250ZXh0QXN5bmNIb29rcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgY3VzdG9tIENvbnRleHRNYW5hZ2VyIGZvciBPcGVuVGVsZW1ldHJ5LCB3aGljaCBleHRlbmRzIHRoZSBkZWZhdWx0IEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIuXG4gKiBJdCBlbnN1cmVzIHRoYXQgd2UgY3JlYXRlIGEgbmV3IGh1YiBwZXIgY29udGV4dCwgc28gdGhhdCB0aGUgT1RFTCBDb250ZXh0ICYgdGhlIFNlbnRyeSBIdWIgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBjdXJyZW50bHkgb25seSBzdXBwb3J0IEFzeW5jSG9va3Mgd2l0aCB0aGlzLFxuICogYnV0IHNpbmNlIHRoaXMgc2hvdWxkIHdvcmsgZm9yIE5vZGUgMTQrIGFueWhvdyB0aGF0IHNob3VsZCBiZSBnb29kIGVub3VnaC5cbiAqL1xuY29uc3QgU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBvcGVudGVsZW1ldHJ5LndyYXBDb250ZXh0TWFuYWdlckNsYXNzKGNvbnRleHRBc3luY0hvb2tzLkFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIpO1xuXG5leHBvcnRzLlNlbnRyeUNvbnRleHRNYW5hZ2VyID0gU2VudHJ5Q29udGV4dE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0TWFuYWdlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name];\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return;\n      }\n\n      const instrumentation = creator(options);\n      INSTRUMENTED[name] = instrumentation;\n\n      opentelemetry.addOpenTelemetryInstrumentation(instrumentation);\n    },\n    { id: name },\n  );\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsc0JBQXNCLG1CQUFPLENBQUMsNE9BQXVCOztBQUVyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLE1BQU0sVUFBVTtBQUNoQjtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzPzU2N2EiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIGNyZWF0b3IsXG4pIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRlZCA9IElOU1RSVU1FTlRFRFtuYW1lXTtcbiAgICAgIGlmIChpbnN0cnVtZW50ZWQpIHtcbiAgICAgICAgLy8gSWYgb3B0aW9ucyBhcmUgcHJvdmlkZWQsIGVuc3VyZSB3ZSB1cGRhdGUgdGhlbVxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGluc3RydW1lbnRlZC5zZXRDb25maWcob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBjcmVhdG9yKG9wdGlvbnMpO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uO1xuXG4gICAgICBvcGVudGVsZW1ldHJ5LmFkZE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb24oaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5JTlNUUlVNRU5URUQgPSBJTlNUUlVNRU5URUQ7XG5leHBvcnRzLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UgPSBnZW5lcmF0ZUluc3RydW1lbnRPbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => ( (this.protocol === 'https:' ? 443 : 80)));\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => ( (this.isSecureEndpoint() ? 'https:' : 'http:')));\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMscUhBQWM7O0FBRTFCLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLG1CQUFPLENBQUMsOEJBQVk7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcz84NmVjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xucmVxdWlyZSgnbm9kZTpodHRwcycpO1xuXG4vKipcbiogVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Ub29UYWxsTmF0ZS9wcm94eS1hZ2VudHMvdHJlZS9iMTMzMjk1ZmQxNmY2NDc1NTc4YjZiMTViZDliNGUzM2VjYjBkMGI3XG4qIFdpdGggdGhlIGZvbGxvd2luZyBMSUNFTlNFOlxuKlxuKiAoVGhlIE1JVCBMaWNlbnNlKVxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgTmF0aGFuIFJhamxpY2ggPG5hdGhhbkB0b290YWxsbmF0ZS5uZXQ+KlxuKlxuKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4qICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4qIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoqXG4qXG4qIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4qIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLipcbipcbiogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4qIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4qIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4qIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4qIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4qIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuKi9cblxuY29uc3QgSU5URVJOQUwgPSBTeW1ib2woJ0FnZW50QmFzZUludGVybmFsU3RhdGUnKTtcblxuY2xhc3MgQWdlbnQgZXh0ZW5kcyBodHRwLkFnZW50IHtcblxuICAvLyBTZXQgYnkgYGh0dHAuQWdlbnRgIC0gbWlzc2luZyBmcm9tIGBAdHlwZXMvbm9kZWBcblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpc1tJTlRFUk5BTF0gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGFuIGBodHRwYCBvciBgaHR0cHNgIHJlcXVlc3QuXG4gICAqL1xuICBpc1NlY3VyZUVuZHBvaW50KG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgLy8gRmlyc3QgY2hlY2sgdGhlIGBzZWN1cmVFbmRwb2ludGAgcHJvcGVydHkgZXhwbGljaXRseSwgc2luY2UgdGhpc1xuICAgICAgLy8gbWVhbnMgdGhhdCBhIHBhcmVudCBgQWdlbnRgIGlzIFwicGFzc2luZyB0aHJvdWdoXCIgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgKS5zZWN1cmVFbmRwb2ludCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnNlY3VyZUVuZHBvaW50O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBleHBsaWNpdCBgc2VjdXJlYCBlbmRwb2ludCwgY2hlY2sgaWYgYHByb3RvY29sYCBwcm9wZXJ0eSBpc1xuICAgICAgLy8gc2V0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSB0aGUgY2FzZSBzaW5jZSB1c2luZyBhIGZ1bGwgc3RyaW5nIFVSTFxuICAgICAgLy8gb3IgYFVSTGAgaW5zdGFuY2Ugc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiB1c2FnZS5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm90b2NvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGlmIG5vIGBwcm90b2NvbGAgcHJvcGVydHkgd2FzIHNldCwgdGhlbiBmYWxsIGJhY2sgdG9cbiAgICAvLyBjaGVja2luZyB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGN1cnJlbnQgY2FsbCBzdGFjaywgYW5kIHRyeSB0b1xuICAgIC8vIGRldGVjdCB0aGUgXCJodHRwc1wiIG1vZHVsZS5cbiAgICBjb25zdCB7IHN0YWNrIH0gPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAodHlwZW9mIHN0YWNrICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdGFjay5zcGxpdCgnXFxuJykuc29tZShsID0+IGwuaW5kZXhPZignKGh0dHBzLmpzOicpICE9PSAtMSB8fCBsLmluZGV4T2YoJ25vZGU6aHR0cHM6JykgIT09IC0xKTtcbiAgfVxuXG4gIGNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKSB7XG4gICAgY29uc3QgY29ubmVjdE9wdHMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc2VjdXJlRW5kcG9pbnQ6IHRoaXMuaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSxcbiAgICB9O1xuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLmNvbm5lY3QocmVxLCBjb25uZWN0T3B0cykpXG4gICAgICAudGhlbihzb2NrZXQgPT4ge1xuICAgICAgICBpZiAoc29ja2V0IGluc3RhbmNlb2YgaHR0cC5BZ2VudCkge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGFkZFJlcXVlc3QoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgICAgcmV0dXJuIHNvY2tldC5hZGRSZXF1ZXN0KHJlcSwgY29ubmVjdE9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGNyZWF0ZVNvY2tldCgpYCBpc24ndCBkZWZpbmVkIGluIGBAdHlwZXMvbm9kZWBcbiAgICAgICAgc3VwZXIuY3JlYXRlU29ja2V0KHJlcSwgb3B0aW9ucywgY2IpO1xuICAgICAgfSwgY2IpO1xuICB9XG5cbiAgY3JlYXRlQ29ubmVjdGlvbigpIHtcbiAgICBjb25zdCBzb2NrZXQgPSB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0O1xuICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc29ja2V0IHdhcyByZXR1cm5lZCBpbiB0aGUgYGNvbm5lY3QoKWAgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvY2tldDtcbiAgfVxuXG4gIGdldCBkZWZhdWx0UG9ydCgpIHtcbiAgICByZXR1cm4gX251bGxpc2hDb2FsZXNjZSh0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCwgKCkgPT4gKCAodGhpcy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyA0NDMgOiA4MCkpKTtcbiAgfVxuXG4gIHNldCBkZWZhdWx0UG9ydCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCA9IHY7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHByb3RvY29sKCkge1xuICAgIHJldHVybiBfbnVsbGlzaENvYWxlc2NlKHRoaXNbSU5URVJOQUxdLnByb3RvY29sLCAoKSA9PiAoICh0aGlzLmlzU2VjdXJlRW5kcG9pbnQoKSA/ICdodHRwczonIDogJ2h0dHA6JykpKTtcbiAgfVxuXG4gIHNldCBwcm90b2NvbCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCA9IHY7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuQWdlbnQgPSBBZ2VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ( {}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxhQUFhLG1CQUFPLENBQUMscUhBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcz8yYzkyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICBjb3JlLmxvZ2dlci5sb2coJ1todHRwcy1wcm94eS1hZ2VudDpwYXJzZS1wcm94eS1yZXNwb25zZV0nLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQcm94eVJlc3BvbnNlKHNvY2tldCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIHdlIG5lZWQgdG8gYnVmZmVyIGFueSBIVFRQIHRyYWZmaWMgdGhhdCBoYXBwZW5zIHdpdGggdGhlIHByb3h5IGJlZm9yZSB3ZSBnZXRcbiAgICAvLyB0aGUgQ09OTkVDVCByZXNwb25zZSwgc28gdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBcIjIwMFwiXG4gICAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgICAvLyBIVFRQIHBhcnNlciBpcyBob29rZWQgdXAuLi5cbiAgICBsZXQgYnVmZmVyc0xlbmd0aCA9IDA7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgIGNvbnN0IGIgPSBzb2NrZXQucmVhZCgpO1xuICAgICAgaWYgKGIpIG9uZGF0YShiKTtcbiAgICAgIGVsc2Ugc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZW5kJyk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZXJyb3IgJW8nLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25kYXRhKGIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcbiAgICAgIGNvbnN0IGVuZE9mSGVhZGVycyA9IGJ1ZmZlcmVkLmluZGV4T2YoJ1xcclxcblxcclxcbicpO1xuXG4gICAgICBpZiAoZW5kT2ZIZWFkZXJzID09PSAtMSkge1xuICAgICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xuICAgICAgICBkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcbiAgICAgICAgcmVhZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlclBhcnRzID0gYnVmZmVyZWQuc2xpY2UoMCwgZW5kT2ZIZWFkZXJzKS50b1N0cmluZygnYXNjaWknKS5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICBjb25zdCBmaXJzdExpbmUgPSBoZWFkZXJQYXJ0cy5zaGlmdCgpO1xuICAgICAgaWYgKCFmaXJzdExpbmUpIHtcbiAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ05vIGhlYWRlciByZWNlaXZlZCBmcm9tIHByb3h5IENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9ICsoZmlyc3RMaW5lUGFydHNbMV0gfHwgMCk7XG4gICAgICBjb25zdCBzdGF0dXNUZXh0ID0gZmlyc3RMaW5lUGFydHMuc2xpY2UoMikuam9pbignICcpO1xuICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgaGVhZGVyUGFydHMpIHtcbiAgICAgICAgaWYgKCFoZWFkZXIpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGZpcnN0Q29sb24gPT09IC0xKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBoZWFkZXIgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlOiBcIiR7aGVhZGVyfVwiYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IGhlYWRlci5zbGljZSgwLCBmaXJzdENvbG9uKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zbGljZShmaXJzdENvbG9uICsgMSkudHJpbVN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSBbY3VycmVudCwgdmFsdWVdO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgICAgICBjdXJyZW50LnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1ZygnZ290IHByb3h5IHNlcnZlciByZXNwb25zZTogJW8gJW8nLCBmaXJzdExpbmUsIGhlYWRlcnMpO1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGNvbm5lY3Q6IHtcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgYnVmZmVyZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XG5cbiAgICByZWFkKCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLnBhcnNlUHJveHlSZXNwb25zZSA9IHBhcnNlUHJveHlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n// PUBLIC APIS\n\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE && core.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(\n        () => {\n          debugBuild.DEBUG_BUILD && core.logger.log('Flushing client reports based on interval.');\n          this._flushOutcomes();\n        },\n        _nullishCoalesce(clientOptions.clientReportFlushInterval, () => ( DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)),\n      )\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxXQUFXLG1CQUFPLENBQUMsd0JBQVM7QUFDNUIsWUFBWSxtQkFBTyxDQUFDLHNJQUFvQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMscUhBQWM7QUFDbkMsdUJBQXVCLG1CQUFPLENBQUMsc0NBQWdCO0FBQy9DLG1CQUFtQixtQkFBTyxDQUFDLGdJQUFtQjs7QUFFOUMsdURBQXVEOztBQUV2RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtDQUErQztBQUNoRTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUNBQXVDLFlBQVksWUFBWSxpREFBaUQsd0JBQXdCLEVBQUU7QUFDMUk7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2NsaWVudC5qcz9mZTJhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2UsXG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnbm9kZTpvcycpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCB3b3JrZXJfdGhyZWFkcyA9IHJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgREVGQVVMVF9DTElFTlRfUkVQT1JUX0ZMVVNIX0lOVEVSVkFMX01TID0gNjAwMDA7IC8vIDYwcyB3YXMgY2hvc2VuIGFyYml0cmFyaWx5XG5cbi8qKiBBIGNsaWVudCBmb3IgdXNpbmcgU2VudHJ5IHdpdGggTm9kZSAmIE9wZW5UZWxlbWV0cnkuICovXG5jbGFzcyBOb2RlQ2xpZW50IGV4dGVuZHMgY29yZS5TZXJ2ZXJSdW50aW1lQ2xpZW50IHtcblxuICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcGxhdGZvcm06ICdub2RlJyxcbiAgICAgIHJ1bnRpbWU6IHsgbmFtZTogJ25vZGUnLCB2ZXJzaW9uOiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uIH0sXG4gICAgICBzZXJ2ZXJOYW1lOiBvcHRpb25zLnNlcnZlck5hbWUgfHwgZ2xvYmFsLnByb2Nlc3MuZW52LlNFTlRSWV9OQU1FIHx8IG9zLmhvc3RuYW1lKCksXG4gICAgfTtcblxuICAgIGNvcmUuYXBwbHlTZGtNZXRhZGF0YShjbGllbnRPcHRpb25zLCAnbm9kZScpO1xuXG4gICAgY29yZS5sb2dnZXIubG9nKFxuICAgICAgYEluaXRpYWxpemluZyBTZW50cnk6IHByb2Nlc3M6ICR7cHJvY2Vzcy5waWR9LCB0aHJlYWQ6ICR7d29ya2VyX3RocmVhZHMuaXNNYWluVGhyZWFkID8gJ21haW4nIDogYHdvcmtlci0ke3dvcmtlcl90aHJlYWRzLnRocmVhZElkfWB9LmAsXG4gICAgKTtcblxuICAgIHN1cGVyKGNsaWVudE9wdGlvbnMpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgT1RFTCB0cmFjZXIuICovXG4gICBnZXQgdHJhY2VyKCkge1xuICAgIGlmICh0aGlzLl90cmFjZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFjZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9ICdAc2VudHJ5L25vZGUnO1xuICAgIGNvbnN0IHZlcnNpb24gPSBjb3JlLlNES19WRVJTSU9OO1xuICAgIGNvbnN0IHRyYWNlciA9IGFwaS50cmFjZS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbik7XG4gICAgdGhpcy5fdHJhY2VyID0gdHJhY2VyO1xuXG4gICAgcmV0dXJuIHRyYWNlcjtcbiAgfVxuXG4gIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy50cmFjZVByb3ZpZGVyO1xuICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3IgPSBfb3B0aW9uYWxDaGFpbihbcHJvdmlkZXIsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5hY3RpdmVTcGFuUHJvY2Vzc29yXSk7XG5cbiAgICBpZiAoc3BhblByb2Nlc3Nvcikge1xuICAgICAgYXdhaXQgc3BhblByb2Nlc3Nvci5mb3JjZUZsdXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0T3B0aW9ucygpLnNlbmRDbGllbnRSZXBvcnRzKSB7XG4gICAgICB0aGlzLl9mbHVzaE91dGNvbWVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmZsdXNoKHRpbWVvdXQpO1xuICB9XG5cbiAgLy8gRXNsaW50IGlnbm9yZSBleHBsYW5hdGlvbjogVGhpcyBpcyBhbHJlYWR5IGRvY3VtZW50ZWQgaW4gc3VwZXIuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gICBjbG9zZSh0aW1lb3V0KSB7XG4gICAgaWYgKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcikge1xuICAgICAgcHJvY2Vzcy5vZmYoJ2JlZm9yZUV4aXQnLCB0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY2xvc2UodGltZW91dCk7XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBzdGFydCB0cmFja2luZyBjbGllbnQgcmVwb3J0cyBmb3IgdGhpcyBjbGllbnQuXG4gICAqXG4gICAqIE5PVElDRTogVGhpcyBtZXRob2Qgd2lsbCBjcmVhdGUgYW4gaW50ZXJ2YWwgdGhhdCBpcyBwZXJpb2RpY2FsbHkgY2FsbGVkIGFuZCBhdHRhY2ggYSBgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcpYFxuICAgKiBob29rLiBUbyBjbGVhbiB1cCB0aGVzZSByZXNvdXJjZXMsIGNhbGwgYC5jbG9zZSgpYCB3aGVuIHlvdSBubyBsb25nZXIgaW50ZW5kIHRvIHVzZSB0aGUgY2xpZW50LiBOb3QgZG9pbmcgc28gd2lsbFxuICAgKiByZXN1bHQgaW4gYSBtZW1vcnkgbGVhay5cbiAgICovXG4gIC8vIFRoZSByZWFzb24gY2xpZW50IHJlcG9ydHMgbmVlZCB0byBiZSBtYW51YWxseSBhY3RpdmF0ZWQgd2l0aCB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mIGp1c3QgZW5hYmxpbmcgdGhlbSBpbiBhXG4gIC8vIGNvbnN0cnVjdG9yLCBpcyB0aGF0IGlmIHVzZXJzIHBlcmlvZGljYWxseSBhbmQgdW5ib3VuZGVkbHkgY3JlYXRlIG5ldyBjbGllbnRzLCB3ZSB3aWxsIGNyZWF0ZSBtb3JlIGFuZCBtb3JlXG4gIC8vIGludGVydmFscyBhbmQgYmVmb3JlRXhpdCBsaXN0ZW5lcnMsIHRodXMgbGVha2luZyBtZW1vcnkuIEluIHRoZXNlIHNpdHVhdGlvbnMsIHVzZXJzIGFyZSByZXF1aXJlZCB0byBjYWxsXG4gIC8vIGBjbGllbnQuY2xvc2UoKWAgaW4gb3JkZXIgdG8gZGlzcG9zZSBvZiB0aGUgYWNxdWlyZWQgcmVzb3VyY2VzLlxuICAvLyBXZSBhc3N1bWUgdGhhdCBjYWxsaW5nIHRoaXMgbWV0aG9kIGluIFNlbnRyeS5pbml0KCkgaXMgYSBzZW5zaWJsZSBkZWZhdWx0LCBiZWNhdXNlIGNhbGxpbmcgU2VudHJ5LmluaXQoKSBvdmVyIGFuZFxuICAvLyBvdmVyIGFnYWluIHdvdWxkIGFsc28gcmVzdWx0IGluIG1lbW9yeSBsZWFrcy5cbiAgLy8gTm90ZTogV2UgaGF2ZSBleHBlcmltZW50ZWQgd2l0aCB1c2luZyBgRmluYWxpemF0aW9uUmVnaXN0eWAgdG8gY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIGNsaWVudCBpcyBnYXJiYWdlXG4gIC8vIGNvbGxlY3RlZCwgYnV0IGl0IGRpZCBub3Qgd29yaywgYmVjYXVzZSB0aGUgY2xlYW51cCBmdW5jdGlvbiBuZXZlciBnb3QgY2FsbGVkLlxuICAgc3RhcnRDbGllbnRSZXBvcnRUcmFja2luZygpIHtcbiAgICBjb25zdCBjbGllbnRPcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKGNsaWVudE9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2NsaWVudFJlcG9ydEludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLmxvZygnRmx1c2hpbmcgY2xpZW50IHJlcG9ydHMgYmFzZWQgb24gaW50ZXJ2YWwuJyk7XG4gICAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgICB9LFxuICAgICAgICBfbnVsbGlzaENvYWxlc2NlKGNsaWVudE9wdGlvbnMuY2xpZW50UmVwb3J0Rmx1c2hJbnRlcnZhbCwgKCkgPT4gKCBERUZBVUxUX0NMSUVOVF9SRVBPUlRfRkxVU0hfSU5URVJWQUxfTVMpKSxcbiAgICAgIClcbiAgICAgICAgLy8gVW5yZWYgaXMgY3JpdGljYWwgZm9yIG5vdCBwcmV2ZW50aW5nIHRoZSBwcm9jZXNzIGZyb20gZXhpdGluZyBiZWNhdXNlIHRoZSBpbnRlcnZhbCBpcyBhY3RpdmUuXG4gICAgICAgIC51bnJlZigpO1xuXG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTm9kZUNsaWVudCA9IE5vZGVDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    console$1.consoleIntegration(),\n    index.httpIntegration(),\n    nodeFetch.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$1.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    ...getCjsOnlyIntegrations(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1);\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    core.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n\n  const autoSessionTracking =\n    typeof release !== 'string'\n      ? false\n      : options.autoSessionTracking === undefined\n        ? true\n        : options.autoSessionTracking;\n\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const baseOptions = core.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true,\n  });\n\n  const overwriteOptions = core.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate,\n  });\n\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations,\n    }),\n  };\n\n  return clientOptions;\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+resources@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@8.40.0_@opentelemetry+api@1.9.0_@opentelemetry+core@1.28.0_@opentelemet_yrkjznuspys562mz54gnahu4oq/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(rsc)/../../node_modules/.pnpm/import-in-the-middle@1.11.2/node_modules/import-in-the-middle/index.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client);\n  client.traceProvider = provider;\n}\n\nfunction getRegisterOptions(esmHookConfig) {\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    return { data: { addHookMessagePort, include: esmHookConfig.include || [] }, transferList: [addHookMessagePort] };\n  }\n\n  return { data: esmHookConfig };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl =\n      typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) !== 'undefined' ? (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href)) : undefined;\n\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        core.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or use version 7.x of the Sentry Node.js SDK.',\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n  });\n  provider.addSpanProcessor(\n    new opentelemetry.SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration,\n    }),\n  );\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager(),\n  });\n\n  return provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => ( nativeHttpModule)), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => ( null));\n            const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => ( null));\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzPzU1NTAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogQWRkcyBhbiBvcmlnaW4gdG8gYW4gT1RFTCBTcGFuLiAqL1xuZnVuY3Rpb24gYWRkT3JpZ2luVG9TcGFuKHNwYW4sIG9yaWdpbikge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBvcmlnaW4pO1xufVxuXG5leHBvcnRzLmFkZE9yaWdpblRvU3BhbiA9IGFkZE9yaWdpblRvU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZE9yaWdpblRvU3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RDtBQUNBO0FBQ0EsU0FBUyxVQUFjO0FBQ3ZCOztBQUVBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcz9kNzllIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBEZXRlY3QgQ29tbW9uSlMuICovXG5mdW5jdGlvbiBpc0NqcygpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0cy5pc0NqcyA9IGlzQ2pzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uanMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxpQkFBaUIsbUJBQU8sQ0FBQywrSEFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanM/MWQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb21tb25qcyA9IHJlcXVpcmUoJy4vY29tbW9uanMuanMnKTtcblxuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSAocGtnKSA9PiAoe1xuICBwYWNrYWdlOiBwa2csXG4gICdqYXZhc2NyaXB0LmlzX2Nqcyc6IGNvbW1vbmpzLmlzQ2pzKCksXG59KTtcblxuZXhwb3J0cy5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const client = core.getClient();\n  if (\n    !_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasTracingEnabled()\n  ) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFMUIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCxlQUFlLG1CQUFPLENBQUMsbUtBQXFCO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywrSEFBZTtBQUN4Qyw0Q0FBNEMsbUJBQU8sQ0FBQyxxTEFBMEM7O0FBRTlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixNQUFNLG9FQUFvRSxNQUFNO0FBQ3RHO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxpTEFBaUwsS0FBSztBQUNsTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAOC40MC4wL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcz8wYTVkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvcmUnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi9jb21tb25qcy5qcycpO1xuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzJyk7XG5cbi8qKlxuICogQ2hlY2tzIGFuZCB3YXJucyBpZiBhIGZyYW1ld29yayBpc24ndCB3cmFwcGVkIGJ5IG9wZW50ZWxlbWV0cnkuXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUlzV3JhcHBlZChcbiAgbWF5YmVXcmFwcGVkRnVuY3Rpb24sXG4gIG5hbWUsXG4pIHtcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKFxuICAgICFfb3B0aW9uYWxDaGFpbihbY2xpZW50LCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMiA9PiBfMigpLCAnYWNjZXNzJywgXzMgPT4gXzMuZGlzYWJsZUluc3RydW1lbnRhdGlvbldhcm5pbmdzXSkgJiZcbiAgICAhY29yZSQxLmlzV3JhcHBlZChtYXliZVdyYXBwZWRGdW5jdGlvbikgJiZcbiAgICBjb3JlLmlzRW5hYmxlZCgpICYmXG4gICAgY29yZS5oYXNUcmFjaW5nRW5hYmxlZCgpXG4gICkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFRoaXMgaXMgbGlrZWx5IGJlY2F1c2UgeW91IHJlcXVpcmVkL2ltcG9ydGVkICR7bmFtZX0gYmVmb3JlIGNhbGxpbmcgXFxgU2VudHJ5LmluaXQoKVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBTZW50cnkgaW4gYSBzZXBhcmF0ZSBmaWxlIHRoYXQgeW91IFxcYC0taW1wb3J0XFxgIHdoZW4gcnVubmluZyBub2RlLCBzZWU6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzLyR7bmFtZX0vaW5zdGFsbC9lc20vLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3JlLmdldEdsb2JhbFNjb3BlKCkuc2V0Q29udGV4dCgnbWlzc2luZ19pbnN0cnVtZW50YXRpb24nLCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dChuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmVJc1dyYXBwZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options && options.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanM/ODAzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBGQUxTWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ2ZhbHNlJywgJ2YnLCAnbicsICdubycsICdvZmYnLCAnMCddKTtcbmNvbnN0IFRSVVRIWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ3RydWUnLCAndCcsICd5JywgJ3llcycsICdvbicsICcxJ10pO1xuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHdoaWNoIGNhc3RzIGFuIEVOViB2YXJpYWJsZSB2YWx1ZSB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB1c2luZyB0aGUgY29uc3RhbnRzIGRlZmluZWQgYWJvdmUuXG4gKiBJbiBzdHJpY3QgbW9kZSwgaXQgbWF5IHJldHVybiBgbnVsbGAgaWYgdGhlIHZhbHVlIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBwcmVkZWZpbmVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBlbnYgdmFyaWFibGVcbiAqIEBwYXJhbSBvcHRpb25zIC0tIE9ubHkgaGFzIGBzdHJpY3RgIGtleSBmb3Igbm93LCB3aGljaCByZXF1aXJlcyBhIHN0cmljdCBtYXRjaCBmb3IgYHRydWVgIGluIFRSVVRIWV9FTlZfVkFMVUVTXG4gKiBAcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHRoZSBsb3dlcmNhc2UgdmFsdWUgbWF0Y2hlcyB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMgYWJvdmUuIElmIG5vdCwgbnVsbCBpbiBzdHJpY3QgbW9kZSxcbiAqICAgICAgICAgIGFuZCBCb29sZWFuKHZhbHVlKSBpbiBsb29zZSBtb2RlLlxuICovXG5mdW5jdGlvbiBlbnZUb0Jvb2wodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoRkFMU1lfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoVFJVVEhZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA/IG51bGwgOiBCb29sZWFuKHZhbHVlKTtcbn1cblxuZXhwb3J0cy5GQUxTWV9FTlZfVkFMVUVTID0gRkFMU1lfRU5WX1ZBTFVFUztcbmV4cG9ydHMuVFJVVEhZX0VOVl9WQUxVRVMgPSBUUlVUSFlfRU5WX1ZBTFVFUztcbmV4cG9ydHMuZW52VG9Cb29sID0gZW52VG9Cb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52VG9Cb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxnSUFBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcz83NjEwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ05vIE5vZGVDbGllbnQgd2FzIGRlZmluZWQsIHdlIGFyZSBleGl0aW5nIHRoZSBwcm9jZXNzIG5vdy4nKTtcbiAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB0aW1lb3V0ID1cbiAgICAob3B0aW9ucyAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQpIHx8XG4gICAgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUO1xuICBjbGllbnQuY2xvc2UodGltZW91dCkudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5sb2dBbmRFeGl0UHJvY2VzcyA9IGxvZ0FuZEV4aXRQcm9jZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JoYW5kbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQDguNDAuMC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzPzY0MWEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIEJ1aWxkIGEgZnVsbCBVUkwgZnJvbSByZXF1ZXN0IG9wdGlvbnMuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0VXJsKHJlcXVlc3RPcHRpb25zKSB7XG4gIGNvbnN0IHByb3RvY29sID0gcmVxdWVzdE9wdGlvbnMucHJvdG9jb2wgfHwgJyc7XG4gIGNvbnN0IGhvc3RuYW1lID0gcmVxdWVzdE9wdGlvbnMuaG9zdG5hbWUgfHwgcmVxdWVzdE9wdGlvbnMuaG9zdCB8fCAnJztcbiAgLy8gRG9uJ3QgbG9nIHN0YW5kYXJkIDo4MCAoaHR0cCkgYW5kIDo0NDMgKGh0dHBzKSBwb3J0cyB0byByZWR1Y2UgdGhlIG5vaXNlXG4gIC8vIEFsc28gZG9uJ3QgYWRkIHBvcnQgaWYgdGhlIGhvc3RuYW1lIGFscmVhZHkgaW5jbHVkZXMgYSBwb3J0XG4gIGNvbnN0IHBvcnQgPVxuICAgICFyZXF1ZXN0T3B0aW9ucy5wb3J0IHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDgwIHx8IHJlcXVlc3RPcHRpb25zLnBvcnQgPT09IDQ0MyB8fCAvXiguKik6KFxcZCspJC8udGVzdChob3N0bmFtZSlcbiAgICAgID8gJydcbiAgICAgIDogYDoke3JlcXVlc3RPcHRpb25zLnBvcnR9YDtcbiAgY29uc3QgcGF0aCA9IHJlcXVlc3RPcHRpb25zLnBhdGggPyByZXF1ZXN0T3B0aW9ucy5wYXRoIDogJy8nO1xuICByZXR1cm4gYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfSR7cG9ydH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5nZXRSZXF1ZXN0VXJsID0gZ2V0UmVxdWVzdFVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Qsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLHFIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDLEdBQUcsS0FBSztBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzPzM1NGQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBub3JtYWxpemVzIFdpbmRvd3MgcGF0aHMgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdpbmRvd3NQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpOyAvLyByZXBsYWNlIGFsbCBgXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxufVxuXG4vKiogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgbW9kdWxlIG5hbWUgZnJvbSBhIGZpbGVuYW1lICovXG5mdW5jdGlvbiBjcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWUoXG4gIGJhc2VQYXRoID0gcHJvY2Vzcy5hcmd2WzFdID8gY29yZS5kaXJuYW1lKHByb2Nlc3MuYXJndlsxXSkgOiBwcm9jZXNzLmN3ZCgpLFxuICBpc1dpbmRvd3MgPSBub2RlX3BhdGguc2VwID09PSAnXFxcXCcsXG4pIHtcbiAgY29uc3Qgbm9ybWFsaXplZEJhc2UgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChiYXNlUGF0aCkgOiBiYXNlUGF0aDtcblxuICByZXR1cm4gKGZpbGVuYW1lKSA9PiB7XG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlbmFtZSA9IGlzV2luZG93cyA/IG5vcm1hbGl6ZVdpbmRvd3NQYXRoKGZpbGVuYW1lKSA6IGZpbGVuYW1lO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGxldCB7IGRpciwgYmFzZTogZmlsZSwgZXh0IH0gPSBub2RlX3BhdGgucG9zaXgucGFyc2Uobm9ybWFsaXplZEZpbGVuYW1lKTtcblxuICAgIGlmIChleHQgPT09ICcuanMnIHx8IGV4dCA9PT0gJy5tanMnIHx8IGV4dCA9PT0gJy5janMnKSB7XG4gICAgICBmaWxlID0gZmlsZS5zbGljZSgwLCBleHQubGVuZ3RoICogLTEpO1xuICAgIH1cblxuICAgIGlmICghZGlyKSB7XG4gICAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICAgIGRpciA9ICcuJztcbiAgICB9XG5cbiAgICBjb25zdCBuID0gZGlyLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzJyk7XG4gICAgaWYgKG4gPiAtMSkge1xuICAgICAgcmV0dXJuIGAke2Rpci5zbGljZShuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpfToke2ZpbGV9YDtcbiAgICB9XG5cbiAgICAvLyBMZXQncyBzZWUgaWYgaXQncyBhIHBhcnQgb2YgdGhlIG1haW4gbW9kdWxlXG4gICAgLy8gVG8gYmUgYSBwYXJ0IG9mIG1haW4gbW9kdWxlLCBpdCBoYXMgdG8gc2hhcmUgdGhlIHNhbWUgYmFzZVxuICAgIGlmIChkaXIuc3RhcnRzV2l0aChub3JtYWxpemVkQmFzZSkpIHtcbiAgICAgIGxldCBtb2R1bGVOYW1lID0gZGlyLnNsaWNlKG5vcm1hbGl6ZWRCYXNlLmxlbmd0aCArIDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuXG4gICAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgICBtb2R1bGVOYW1lICs9ICc6JztcbiAgICAgIH1cbiAgICAgIG1vZHVsZU5hbWUgKz0gZmlsZTtcblxuICAgICAgcmV0dXJuIG1vZHVsZU5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGU7XG4gIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@8.40.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return core.flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return core.flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELGFBQWEsbUJBQU8sQ0FBQyxxSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUA4LjQwLjAvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcz9jY2JiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgU0lOR0xFX0FSR19DT01NQU5EUyA9IFsnZ2V0JywgJ3NldCcsICdzZXRleCddO1xuXG5jb25zdCBHRVRfQ09NTUFORFMgPSBbJ2dldCcsICdtZ2V0J107XG5jb25zdCBTRVRfQ09NTUFORFMgPSBbJ3NldCcsICdzZXRleCddO1xuLy8gdG9kbzogZGVsLCBleHBpcmVcblxuLyoqIENoZWNrcyBpZiBhIGdpdmVuIGNvbW1hbmQgaXMgaW4gdGhlIGxpc3Qgb2YgcmVkaXMgY29tbWFuZHMuXG4gKiAgVXNlZnVsIGJlY2F1c2UgY29tbWFuZHMgY2FuIGNvbWUgaW4gbG93ZXJjYXNlIG9yIHVwcGVyY2FzZSAoZGVwZW5kaW5nIG9uIHRoZSBsaWJyYXJ5KS4gKi9cbmZ1bmN0aW9uIGlzSW5Db21tYW5kcyhyZWRpc0NvbW1hbmRzLCBjb21tYW5kKSB7XG4gIHJldHVybiByZWRpc0NvbW1hbmRzLmluY2x1ZGVzKGNvbW1hbmQudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKiBEZXRlcm1pbmUgY2FjaGUgb3BlcmF0aW9uIGJhc2VkIG9uIHJlZGlzIHN0YXRlbWVudCAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVPcGVyYXRpb24oXG4gIGNvbW1hbmQsXG4pIHtcbiAgaWYgKGlzSW5Db21tYW5kcyhHRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5nZXQnO1xuICB9IGVsc2UgaWYgKGlzSW5Db21tYW5kcyhTRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5wdXQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpIHtcbiAgcmV0dXJuIHByZWZpeGVzLnNvbWUocHJlZml4ID0+IGtleS5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuXG4vKiogU2FmZWx5IGNvbnZlcnRzIGEgcmVkaXMga2V5IHRvIGEgc3RyaW5nIChjb21tYS1zZXBhcmF0ZWQgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGtleXMpICovXG5mdW5jdGlvbiBnZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpIHtcbiAgdHJ5IHtcbiAgICBpZiAoY21kQXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwcm9jZXNzQXJnID0gKGFyZykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IEJ1ZmZlci5pc0J1ZmZlcihhcmcpKSB7XG4gICAgICAgIHJldHVybiBbYXJnLnRvU3RyaW5nKCldO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUuZmxhdHRlbihhcmcubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJzx1bmtub3duPiddO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEFyZyA9IGNtZEFyZ3NbMF07XG4gICAgaWYgKGlzSW5Db21tYW5kcyhTSU5HTEVfQVJHX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGZpcnN0QXJnICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQXJnKGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29yZS5mbGF0dGVuKGNtZEFyZ3MubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqIERldGVybWluZXMgd2hldGhlciBhIHJlZGlzIG9wZXJhdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBcImNhY2hlIG9wZXJhdGlvblwiIGJ5IGNoZWNraW5nIGlmIGEga2V5IGlzIHByZWZpeGVkLlxuICogIFdlIG9ubHkgc3VwcG9ydCBjZXJ0YWluIGNvbW1hbmRzIChzdWNoIGFzICdzZXQnLCAnZ2V0JywgJ21nZXQnKS4gKi9cbmZ1bmN0aW9uIHNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBrZXlzLCBwcmVmaXhlcykge1xuICBpZiAoIWdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqIENhbGN1bGF0ZXMgc2l6ZSBiYXNlZCBvbiB0aGUgY2FjaGUgcmVzcG9uc2UgdmFsdWUgKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpIHtcbiAgY29uc3QgZ2V0U2l6ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpLmxlbmd0aDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXNwb25zZSlcbiAgICA/IHJlc3BvbnNlLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBnZXRTaXplKGN1cnIpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHNpemUgPT09ICdudW1iZXInID8gKGFjYyAhPT0gdW5kZWZpbmVkID8gYWNjICsgc2l6ZSA6IHNpemUpIDogYWNjO1xuICAgICAgfSwgMClcbiAgICA6IGdldFNpemUocmVzcG9uc2UpO1xufVxuXG5leHBvcnRzLkdFVF9DT01NQU5EUyA9IEdFVF9DT01NQU5EUztcbmV4cG9ydHMuU0VUX0NPTU1BTkRTID0gU0VUX0NPTU1BTkRTO1xuZXhwb3J0cy5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplID0gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZTtcbmV4cG9ydHMuZ2V0Q2FjaGVLZXlTYWZlbHkgPSBnZXRDYWNoZUtleVNhZmVseTtcbmV4cG9ydHMuZ2V0Q2FjaGVPcGVyYXRpb24gPSBnZXRDYWNoZU9wZXJhdGlvbjtcbmV4cG9ydHMuaXNJbkNvbW1hbmRzID0gaXNJbkNvbW1hbmRzO1xuZXhwb3J0cy5zaG91bGRDb25zaWRlckZvckNhY2hlID0gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzQ2FjaGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@8.40.0/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ })

};
;