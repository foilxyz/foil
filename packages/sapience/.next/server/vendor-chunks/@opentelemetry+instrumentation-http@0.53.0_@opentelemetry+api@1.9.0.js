"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_ERROR_NAME\"] = \"http.error_name\";\n    AttributeNames[\"HTTP_ERROR_MESSAGE\"] = \"http.error_message\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/NDE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vdHJhY2Uvc2VtYW50aWNfY29udmVudGlvbnMvaHR0cC5tZFxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJIVFRQX0VSUk9SX05BTUVcIl0gPSBcImh0dHAuZXJyb3JfbmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSFRUUF9FUlJPUl9NRVNTQUdFXCJdID0gXCJodHRwLmVycm9yX21lc3NhZ2VcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhUVFBfU1RBVFVTX1RFWFRcIl0gPSBcImh0dHAuc3RhdHVzX3RleHRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst semver = __webpack_require__(/*! semver */ \"(ssr)/../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core_2 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/**\n * Http instrumentation instrumentation for Opentelemetry\n */\nclass HttpInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-http', version_1.VERSION, config);\n        /** keep track on spans not ended */\n        this._spanNotEnded = new WeakSet();\n        this._headerCapture = this._createHeaderCapture();\n    }\n    _updateMetricInstruments() {\n        this._httpServerDurationHistogram = this.meter.createHistogram('http.server.duration', {\n            description: 'Measures the duration of inbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._httpClientDurationHistogram = this.meter.createHistogram('http.client.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n    }\n    setConfig(config = {}) {\n        super.setConfig(config);\n        this._headerCapture = this._createHeaderCapture();\n    }\n    init() {\n        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n    }\n    _getHttpInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction('http'));\n                this._wrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('http'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    _getHttpsInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchHttpsOutgoingRequestFunction('https'));\n                this._wrap(moduleExports, 'get', this._getPatchHttpsOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('https'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    /**\n     * Creates spans for incoming requests, restoring spans' context if applied.\n     */\n    _getPatchIncomingRequestFunction(component) {\n        return (original) => {\n            return this._incomingRequestFunction(component, original);\n        };\n    }\n    /**\n     * Creates spans for outgoing requests, sending spans' context for distributed\n     * tracing.\n     */\n    _getPatchOutgoingRequestFunction(component) {\n        return (original) => {\n            return this._outgoingRequestFunction(component, original);\n        };\n    }\n    _getPatchOutgoingGetFunction(clientRequest) {\n        return (_original) => {\n            // Re-implement http.get. This needs to be done (instead of using\n            // getPatchOutgoingRequestFunction to patch it) because we need to\n            // set the trace context header before the returned http.ClientRequest is\n            // ended. The Node.js docs state that the only differences between\n            // request and get are that (1) get defaults to the HTTP GET method and\n            // (2) the returned request object is ended immediately. The former is\n            // already true (at least in supported Node versions up to v10), so we\n            // simply follow the latter. Ref:\n            // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n            // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n            return function outgoingGetRequest(options, ...args) {\n                const req = clientRequest(options, ...args);\n                req.end();\n                return req;\n            };\n        };\n    }\n    /** Patches HTTPS outgoing requests */\n    _getPatchHttpsOutgoingRequestFunction(component) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                var _a;\n                // Makes sure options will have default HTTPS parameters\n                if (component === 'https' &&\n                    typeof options === 'object' &&\n                    ((_a = options === null || options === void 0 ? void 0 : options.constructor) === null || _a === void 0 ? void 0 : _a.name) !== 'URL') {\n                    options = Object.assign({}, options);\n                    instrumentation._setDefaultOptions(options);\n                }\n                return instrumentation._getPatchOutgoingRequestFunction(component)(original)(options, ...args);\n            };\n        };\n    }\n    _setDefaultOptions(options) {\n        options.protocol = options.protocol || 'https:';\n        options.port = options.port || 443;\n    }\n    /** Patches HTTPS outgoing get requests */\n    _getPatchHttpsOutgoingGetFunction(clientRequest) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                return instrumentation._getPatchOutgoingGetFunction(clientRequest)(original)(options, ...args);\n            };\n        };\n    }\n    /**\n     * Attach event listeners to a client request to end span and add span attributes.\n     *\n     * @param request The original request object.\n     * @param span representing the current operation\n     * @param startTime representing the start time of the request to calculate duration in Metric\n     * @param metricAttributes metric attributes\n     */\n    _traceClientRequest(request, span, startTime, metricAttributes) {\n        if (this.getConfig().requestHook) {\n            this._callRequestHook(span, request);\n        }\n        /**\n         * Determines if the request has errored or the response has ended/errored.\n         */\n        let responseFinished = false;\n        /*\n         * User 'response' event listeners can be added before our listener,\n         * force our listener to be the first, so response emitter is bound\n         * before any user listeners are added to it.\n         */\n        request.prependListener('response', (response) => {\n            this._diag.debug('outgoingRequest on response()');\n            if (request.listenerCount('response') <= 1) {\n                response.resume();\n            }\n            const responseAttributes = utils.getOutgoingRequestAttributesOnResponse(response);\n            span.setAttributes(responseAttributes);\n            metricAttributes = Object.assign(metricAttributes, utils.getOutgoingRequestMetricAttributesOnResponse(responseAttributes));\n            if (this.getConfig().responseHook) {\n                this._callResponseHook(span, response);\n            }\n            this._headerCapture.client.captureRequestHeaders(span, header => request.getHeader(header));\n            this._headerCapture.client.captureResponseHeaders(span, header => response.headers[header]);\n            api_1.context.bind(api_1.context.active(), response);\n            const endHandler = () => {\n                this._diag.debug('outgoingRequest on end()');\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                let status;\n                if (response.aborted && !response.complete) {\n                    status = { code: api_1.SpanStatusCode.ERROR };\n                }\n                else {\n                    status = {\n                        code: utils.parseResponseStatus(api_1.SpanKind.CLIENT, response.statusCode),\n                    };\n                }\n                span.setStatus(status);\n                if (this.getConfig().applyCustomAttributesOnSpan) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n                }\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            };\n            response.on('end', endHandler);\n            // See https://github.com/open-telemetry/opentelemetry-js/pull/3625#issuecomment-1475673533\n            if (semver.lt(process.version, '16.0.0')) {\n                response.on('close', endHandler);\n            }\n            response.on(events_1.errorMonitor, (error) => {\n                this._diag.debug('outgoingRequest on error()', error);\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                utils.setSpanWithError(span, error);\n                span.setStatus({\n                    code: api_1.SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            });\n        });\n        request.on('close', () => {\n            this._diag.debug('outgoingRequest on request close()');\n            if (request.aborted || responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        request.on(events_1.errorMonitor, (error) => {\n            this._diag.debug('outgoingRequest on request error()', error);\n            if (responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            utils.setSpanWithError(span, error);\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        this._diag.debug('http.ClientRequest return request');\n        return request;\n    }\n    _incomingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function incomingRequest(event, ...args) {\n            // Only traces request events\n            if (event !== 'request') {\n                return original.apply(this, [event, ...args]);\n            }\n            const request = args[0];\n            const response = args[1];\n            const pathname = request.url\n                ? url.parse(request.url).pathname || '/'\n                : '/';\n            const method = request.method || 'GET';\n            instrumentation._diag.debug(`${component} instrumentation incomingRequest`);\n            if (utils.isIgnored(pathname, instrumentation.getConfig().ignoreIncomingPaths, (e) => instrumentation._diag.error('caught ignoreIncomingPaths error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => { var _a, _b; return (_b = (_a = instrumentation.getConfig()).ignoreIncomingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, request); }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreIncomingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {\n                    api_1.context.bind(api_1.context.active(), request);\n                    api_1.context.bind(api_1.context.active(), response);\n                    return original.apply(this, [event, ...args]);\n                });\n            }\n            const headers = request.headers;\n            const spanAttributes = utils.getIncomingRequestAttributes(request, {\n                component: component,\n                serverName: instrumentation.getConfig().serverName,\n                hookAttributes: instrumentation._callStartSpanHook(request, instrumentation.getConfig().startIncomingSpanHook),\n            });\n            const spanOptions = {\n                kind: api_1.SpanKind.SERVER,\n                attributes: spanAttributes,\n            };\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getIncomingRequestMetricAttributes(spanAttributes);\n            const ctx = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n            const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n            const rpcMetadata = {\n                type: core_2.RPCType.HTTP,\n                span,\n            };\n            return api_1.context.with((0, core_2.setRPCMetadata)(api_1.trace.setSpan(ctx, span), rpcMetadata), () => {\n                api_1.context.bind(api_1.context.active(), request);\n                api_1.context.bind(api_1.context.active(), response);\n                if (instrumentation.getConfig().requestHook) {\n                    instrumentation._callRequestHook(span, request);\n                }\n                if (instrumentation.getConfig().responseHook) {\n                    instrumentation._callResponseHook(span, response);\n                }\n                instrumentation._headerCapture.server.captureRequestHeaders(span, header => request.headers[header]);\n                // After 'error', no further events other than 'close' should be emitted.\n                let hasError = false;\n                response.on('close', () => {\n                    if (hasError) {\n                        return;\n                    }\n                    instrumentation._onServerResponseFinish(request, response, span, metricAttributes, startTime);\n                });\n                response.on(events_1.errorMonitor, (err) => {\n                    hasError = true;\n                    instrumentation._onServerResponseError(span, metricAttributes, startTime, err);\n                });\n                return (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [event, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n            });\n        };\n    }\n    _outgoingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function outgoingRequest(options, ...args) {\n            if (!utils.isValidOptionsType(options)) {\n                return original.apply(this, [options, ...args]);\n            }\n            const extraOptions = typeof args[0] === 'object' &&\n                (typeof options === 'string' || options instanceof url.URL)\n                ? args.shift()\n                : undefined;\n            const { origin, pathname, method, optionsParsed } = utils.getRequestInfo(options, extraOptions);\n            /**\n             * Node 8's https module directly call the http one so to avoid creating\n             * 2 span for the same request we need to check that the protocol is correct\n             * See: https://github.com/nodejs/node/blob/v8.17.0/lib/https.js#L245\n             */\n            if (component === 'http' &&\n                semver.lt(process.version, '9.0.0') &&\n                optionsParsed.protocol === 'https:') {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            if (utils.isIgnored(origin + pathname, instrumentation.getConfig().ignoreOutgoingUrls, (e) => instrumentation._diag.error('caught ignoreOutgoingUrls error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                    var _a, _b;\n                    return (_b = (_a = instrumentation\n                        .getConfig()).ignoreOutgoingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, optionsParsed);\n                }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreOutgoingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            const { hostname, port } = utils.extractHostnameAndPort(optionsParsed);\n            const attributes = utils.getOutgoingRequestAttributes(optionsParsed, {\n                component,\n                port,\n                hostname,\n                hookAttributes: instrumentation._callStartSpanHook(optionsParsed, instrumentation.getConfig().startOutgoingSpanHook),\n            });\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getOutgoingRequestMetricAttributes(attributes);\n            const spanOptions = {\n                kind: api_1.SpanKind.CLIENT,\n                attributes,\n            };\n            const span = instrumentation._startHttpSpan(method, spanOptions);\n            const parentContext = api_1.context.active();\n            const requestContext = api_1.trace.setSpan(parentContext, span);\n            if (!optionsParsed.headers) {\n                optionsParsed.headers = {};\n            }\n            else {\n                // Make a copy of the headers object to avoid mutating an object the\n                // caller might have a reference to.\n                optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n            }\n            api_1.propagation.inject(requestContext, optionsParsed.headers);\n            return api_1.context.with(requestContext, () => {\n                /*\n                 * The response callback is registered before ClientRequest is bound,\n                 * thus it is needed to bind it before the function call.\n                 */\n                const cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    args[args.length - 1] = api_1.context.bind(parentContext, cb);\n                }\n                const request = (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [optionsParsed, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n                instrumentation._diag.debug(`${component} instrumentation outgoingRequest`);\n                api_1.context.bind(parentContext, request);\n                return instrumentation._traceClientRequest(request, span, startTime, metricAttributes);\n            });\n        };\n    }\n    _onServerResponseFinish(request, response, span, metricAttributes, startTime) {\n        const attributes = utils.getIncomingRequestAttributesOnResponse(request, response);\n        metricAttributes = Object.assign(metricAttributes, utils.getIncomingRequestMetricAttributesOnResponse(attributes));\n        this._headerCapture.server.captureResponseHeaders(span, header => response.getHeader(header));\n        span.setAttributes(attributes).setStatus({\n            code: utils.parseResponseStatus(api_1.SpanKind.SERVER, response.statusCode),\n        });\n        const route = attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n        if (route) {\n            span.updateName(`${request.method || 'GET'} ${route}`);\n        }\n        if (this.getConfig().applyCustomAttributesOnSpan) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n        }\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _onServerResponseError(span, metricAttributes, startTime, error) {\n        utils.setSpanWithError(span, error);\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _startHttpSpan(name, options, ctx = api_1.context.active()) {\n        /*\n         * If a parent is required but not present, we use a `NoopSpan` to still\n         * propagate context without recording it.\n         */\n        const requireParent = options.kind === api_1.SpanKind.CLIENT\n            ? this.getConfig().requireParentforOutgoingSpans\n            : this.getConfig().requireParentforIncomingSpans;\n        let span;\n        const currentSpan = api_1.trace.getSpan(ctx);\n        if (requireParent === true && currentSpan === undefined) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else if (requireParent === true && (currentSpan === null || currentSpan === void 0 ? void 0 : currentSpan.spanContext().isRemote)) {\n            span = currentSpan;\n        }\n        else {\n            span = this.tracer.startSpan(name, options, ctx);\n        }\n        this._spanNotEnded.add(span);\n        return span;\n    }\n    _closeHttpSpan(span, spanKind, startTime, metricAttributes) {\n        if (!this._spanNotEnded.has(span)) {\n            return;\n        }\n        span.end();\n        this._spanNotEnded.delete(span);\n        // Record metrics\n        const duration = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)()));\n        if (spanKind === api_1.SpanKind.SERVER) {\n            this._httpServerDurationHistogram.record(duration, metricAttributes);\n        }\n        else if (spanKind === api_1.SpanKind.CLIENT) {\n            this._httpClientDurationHistogram.record(duration, metricAttributes);\n        }\n    }\n    _callResponseHook(span, response) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().responseHook(span, response), () => { }, true);\n    }\n    _callRequestHook(span, request) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().requestHook(span, request), () => { }, true);\n    }\n    _callStartSpanHook(request, hookFunc) {\n        if (typeof hookFunc === 'function') {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => hookFunc(request), () => { }, true);\n        }\n    }\n    _createHeaderCapture() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const config = this.getConfig();\n        return {\n            client: {\n                captureRequestHeaders: utils.headerCapture('request', (_c = (_b = (_a = config.headersToSpanAttributes) === null || _a === void 0 ? void 0 : _a.client) === null || _b === void 0 ? void 0 : _b.requestHeaders) !== null && _c !== void 0 ? _c : []),\n                captureResponseHeaders: utils.headerCapture('response', (_f = (_e = (_d = config.headersToSpanAttributes) === null || _d === void 0 ? void 0 : _d.client) === null || _e === void 0 ? void 0 : _e.responseHeaders) !== null && _f !== void 0 ? _f : []),\n            },\n            server: {\n                captureRequestHeaders: utils.headerCapture('request', (_j = (_h = (_g = config.headersToSpanAttributes) === null || _g === void 0 ? void 0 : _g.server) === null || _h === void 0 ? void 0 : _h.requestHeaders) !== null && _j !== void 0 ? _j : []),\n                captureResponseHeaders: utils.headerCapture('response', (_m = (_l = (_k = config.headersToSpanAttributes) === null || _k === void 0 ? void 0 : _k.server) === null || _l === void 0 ? void 0 : _l.responseHeaders) !== null && _m !== void 0 ? _m : []),\n            },\n        };\n    }\n}\nexports.HttpInstrumentation = HttpInstrumentation;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setSpanWithError = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setAttributesFromHttpKind = exports.satisfiesPattern = exports.parseResponseStatus = exports.isValidOptionsType = exports.isIgnored = exports.isCompressed = exports.headerCapture = exports.getRequestInfo = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributesOnResponse = exports.getOutgoingRequestAttributes = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestAttributes = exports.getAbsoluteUrl = exports.extractHostnameAndPort = exports.HttpInstrumentation = void 0;\nvar http_1 = __webpack_require__(/*! ./http */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\");\nObject.defineProperty(exports, \"HttpInstrumentation\", ({ enumerable: true, get: function () { return http_1.HttpInstrumentation; } }));\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nObject.defineProperty(exports, \"extractHostnameAndPort\", ({ enumerable: true, get: function () { return utils_1.extractHostnameAndPort; } }));\nObject.defineProperty(exports, \"getAbsoluteUrl\", ({ enumerable: true, get: function () { return utils_1.getAbsoluteUrl; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getRequestInfo\", ({ enumerable: true, get: function () { return utils_1.getRequestInfo; } }));\nObject.defineProperty(exports, \"headerCapture\", ({ enumerable: true, get: function () { return utils_1.headerCapture; } }));\nObject.defineProperty(exports, \"isCompressed\", ({ enumerable: true, get: function () { return utils_1.isCompressed; } }));\nObject.defineProperty(exports, \"isIgnored\", ({ enumerable: true, get: function () { return utils_1.isIgnored; } }));\nObject.defineProperty(exports, \"isValidOptionsType\", ({ enumerable: true, get: function () { return utils_1.isValidOptionsType; } }));\nObject.defineProperty(exports, \"parseResponseStatus\", ({ enumerable: true, get: function () { return utils_1.parseResponseStatus; } }));\nObject.defineProperty(exports, \"satisfiesPattern\", ({ enumerable: true, get: function () { return utils_1.satisfiesPattern; } }));\nObject.defineProperty(exports, \"setAttributesFromHttpKind\", ({ enumerable: true, get: function () { return utils_1.setAttributesFromHttpKind; } }));\nObject.defineProperty(exports, \"setRequestContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setRequestContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setResponseContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setResponseContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setSpanWithError\", ({ enumerable: true, get: function () { return utils_1.setSpanWithError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.headerCapture = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributes = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestAttributesOnResponse = exports.setAttributesFromHttpKind = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributes = exports.extractHostnameAndPort = exports.isValidOptionsType = exports.getRequestInfo = exports.isCompressed = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setSpanWithError = exports.isIgnored = exports.satisfiesPattern = exports.parseResponseStatus = exports.getAbsoluteUrl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\");\n/**\n * Get an absolute url\n */\nconst getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:') => {\n    const reqUrlObject = requestUrl || {};\n    const protocol = reqUrlObject.protocol || fallbackProtocol;\n    const port = (reqUrlObject.port || '').toString();\n    const path = reqUrlObject.path || '/';\n    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n    // if there is no port in host and there is a port\n    // it should be displayed if it's not 80 and 443 (default ports)\n    if (host.indexOf(':') === -1 &&\n        port &&\n        port !== '80' &&\n        port !== '443') {\n        host += `:${port}`;\n    }\n    return `${protocol}//${host}${path}`;\n};\nexports.getAbsoluteUrl = getAbsoluteUrl;\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nconst parseResponseStatus = (kind, statusCode) => {\n    const upperBound = kind === api_1.SpanKind.CLIENT ? 400 : 500;\n    // 1xx, 2xx, 3xx are OK on client and server\n    // 4xx is OK on server\n    if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n        return api_1.SpanStatusCode.UNSET;\n    }\n    // All other codes are error\n    return api_1.SpanStatusCode.ERROR;\n};\nexports.parseResponseStatus = parseResponseStatus;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\nexports.satisfiesPattern = satisfiesPattern;\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isIgnored = (constant, list, onException) => {\n    if (!list) {\n        // No ignored urls - trace everything\n        return false;\n    }\n    // Try/catch outside the loop for failing fast\n    try {\n        for (const pattern of list) {\n            if ((0, exports.satisfiesPattern)(constant, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        if (onException) {\n            onException(e);\n        }\n    }\n    return false;\n};\nexports.isIgnored = isIgnored;\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n */\nconst setSpanWithError = (span, error) => {\n    const message = error.message;\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_NAME, error.name);\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE, message);\n    span.setStatus({ code: api_1.SpanStatusCode.ERROR, message });\n    span.recordException(error);\n};\nexports.setSpanWithError = setSpanWithError;\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setRequestContentLengthAttribute = (request, attributes) => {\n    const length = getContentLength(request.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(request.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setRequestContentLengthAttribute = setRequestContentLengthAttribute;\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setResponseContentLengthAttribute = (response, attributes) => {\n    const length = getContentLength(response.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(response.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setResponseContentLengthAttribute = setResponseContentLengthAttribute;\nfunction getContentLength(headers) {\n    const contentLengthHeader = headers['content-length'];\n    if (contentLengthHeader === undefined)\n        return null;\n    const contentLength = parseInt(contentLengthHeader, 10);\n    if (isNaN(contentLength))\n        return null;\n    return contentLength;\n}\nconst isCompressed = (headers) => {\n    const encoding = headers['content-encoding'];\n    return !!encoding && encoding !== 'identity';\n};\nexports.isCompressed = isCompressed;\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (options, extraOptions) => {\n    let pathname = '/';\n    let origin = '';\n    let optionsParsed;\n    if (typeof options === 'string') {\n        optionsParsed = url.parse(options);\n        pathname = optionsParsed.pathname || '/';\n        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else if (options instanceof url.URL) {\n        optionsParsed = {\n            protocol: options.protocol,\n            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')\n                ? options.hostname.slice(1, -1)\n                : options.hostname,\n            path: `${options.pathname || ''}${options.search || ''}`,\n        };\n        if (options.port !== '') {\n            optionsParsed.port = Number(options.port);\n        }\n        if (options.username || options.password) {\n            optionsParsed.auth = `${options.username}:${options.password}`;\n        }\n        pathname = options.pathname;\n        origin = options.origin;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else {\n        optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n        pathname = options.pathname;\n        if (!pathname && optionsParsed.path) {\n            pathname = url.parse(optionsParsed.path).pathname || '/';\n        }\n        const hostname = optionsParsed.host ||\n            (optionsParsed.port != null\n                ? `${optionsParsed.hostname}${optionsParsed.port}`\n                : optionsParsed.hostname);\n        origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n    }\n    // some packages return method in lowercase..\n    // ensure upperCase for consistency\n    const method = optionsParsed.method\n        ? optionsParsed.method.toUpperCase()\n        : 'GET';\n    return { origin, pathname, method, optionsParsed };\n};\nexports.getRequestInfo = getRequestInfo;\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nconst isValidOptionsType = (options) => {\n    if (!options) {\n        return false;\n    }\n    const type = typeof options;\n    return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\nexports.isValidOptionsType = isValidOptionsType;\nconst extractHostnameAndPort = (requestOptions) => {\n    var _a;\n    if (requestOptions.hostname && requestOptions.port) {\n        return { hostname: requestOptions.hostname, port: requestOptions.port };\n    }\n    const matches = ((_a = requestOptions.host) === null || _a === void 0 ? void 0 : _a.match(/^([^:/ ]+)(:\\d{1,5})?/)) || null;\n    const hostname = requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n    let port = requestOptions.port;\n    if (!port) {\n        if (matches && matches[2]) {\n            // remove the leading \":\". The extracted port would be something like \":8080\"\n            port = matches[2].substring(1);\n        }\n        else {\n            port = requestOptions.protocol === 'https:' ? '443' : '80';\n        }\n    }\n    return { hostname, port };\n};\nexports.extractHostnameAndPort = extractHostnameAndPort;\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributes = (requestOptions, options) => {\n    var _a;\n    const hostname = options.hostname;\n    const port = options.port;\n    const requestMethod = requestOptions.method;\n    const method = requestMethod ? requestMethod.toUpperCase() : 'GET';\n    const headers = requestOptions.headers || {};\n    const userAgent = headers['user-agent'];\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestOptions, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_TARGET]: requestOptions.path || '/',\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: (_a = headers.host) !== null && _a !== void 0 ? _a : `${hostname}:${port}`,\n    };\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getOutgoingRequestAttributes = getOutgoingRequestAttributes;\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME];\n    //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributes = getOutgoingRequestMetricAttributes;\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nconst setAttributesFromHttpKind = (kind, attributes) => {\n    if (kind) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = kind;\n        if (kind.toUpperCase() !== 'QUIC') {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_TCP;\n        }\n        else {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_UDP;\n        }\n    }\n};\nexports.setAttributesFromHttpKind = setAttributesFromHttpKind;\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {{ hostname: string }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributesOnResponse = (response) => {\n    const { statusCode, statusMessage, httpVersion, socket } = response;\n    const attributes = {};\n    if (socket) {\n        const { remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    (0, exports.setResponseContentLengthAttribute)(response, attributes);\n    if (statusCode) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n        attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    }\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return attributes;\n};\nexports.getOutgoingRequestAttributesOnResponse = getOutgoingRequestAttributesOnResponse;\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributesOnResponse = getOutgoingRequestMetricAttributesOnResponse;\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestAttributes = (request, options) => {\n    const headers = request.headers;\n    const userAgent = headers['user-agent'];\n    const ips = headers['x-forwarded-for'];\n    const method = request.method || 'GET';\n    const httpVersion = request.httpVersion;\n    const requestUrl = request.url ? url.parse(request.url) : null;\n    const host = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.host) || headers.host;\n    const hostname = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.hostname) ||\n        (host === null || host === void 0 ? void 0 : host.replace(/^(.*)(:[0-9]{1,5})/, '$1')) ||\n        'localhost';\n    const serverName = options.serverName;\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestUrl, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: host,\n        [semantic_conventions_1.SEMATTRS_NET_HOST_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_SCHEME]: options.component,\n    };\n    if (typeof ips === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_CLIENT_IP] = ips.split(',')[0];\n    }\n    if (typeof serverName === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_SERVER_NAME] = serverName;\n    }\n    if (requestUrl) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_TARGET] = requestUrl.path || '/';\n    }\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    (0, exports.setRequestContentLengthAttribute)(request, attributes);\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getIncomingRequestAttributes = getIncomingRequestAttributes;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributes = getIncomingRequestMetricAttributes;\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nconst getIncomingRequestAttributesOnResponse = (request, response) => {\n    // take socket from the request,\n    // since it may be detached from the response object in keep-alive mode\n    const { socket } = request;\n    const { statusCode, statusMessage } = response;\n    const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n    const attributes = {};\n    if (socket) {\n        const { localAddress, localPort, remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_IP] = localAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] = localPort;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n    attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = rpcMetadata.route;\n    }\n    return attributes;\n};\nexports.getIncomingRequestAttributesOnResponse = getIncomingRequestAttributesOnResponse;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT];\n    if (spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributesOnResponse = getIncomingRequestMetricAttributesOnResponse;\nfunction headerCapture(type, headers) {\n    const normalizedHeaders = new Map();\n    for (let i = 0, len = headers.length; i < len; i++) {\n        const capturedHeader = headers[i].toLowerCase();\n        normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n    }\n    return (span, getHeader) => {\n        for (const capturedHeader of normalizedHeaders.keys()) {\n            const value = getHeader(capturedHeader);\n            if (value === undefined) {\n                continue;\n            }\n            const normalizedHeader = normalizedHeaders.get(capturedHeader);\n            const key = `http.${type}.header.${normalizedHeader}`;\n            if (typeof value === 'string') {\n                span.setAttribute(key, [value]);\n            }\n            else if (Array.isArray(value)) {\n                span.setAttribute(key, value);\n            }\n            else {\n                span.setAttribute(key, [value]);\n            }\n        }\n    };\n}\nexports.headerCapture = headerCapture;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxvREFBb0QsR0FBRyw4Q0FBOEMsR0FBRywwQ0FBMEMsR0FBRyxvQ0FBb0MsR0FBRyxvREFBb0QsR0FBRyw4Q0FBOEMsR0FBRyxpQ0FBaUMsR0FBRywwQ0FBMEMsR0FBRyxvQ0FBb0MsR0FBRyw4QkFBOEIsR0FBRywwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyx5Q0FBeUMsR0FBRyx3Q0FBd0MsR0FBRyx3QkFBd0IsR0FBRyxpQkFBaUIsR0FBRyx3QkFBd0IsR0FBRywyQkFBMkIsR0FBRyxzQkFBc0I7QUFDdnZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxzSUFBb0I7QUFDMUMsK0JBQStCLG1CQUFPLENBQUMsMExBQXFDO0FBQzVFLGVBQWUsbUJBQU8sQ0FBQyxtS0FBcUI7QUFDNUMsWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLHlCQUF5QixtQkFBTyxDQUFDLHFOQUF3QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsS0FBSztBQUN6QjtBQUNBLGNBQWMsU0FBUyxJQUFJLEtBQUssRUFBRSxLQUFLO0FBQ3ZDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMkNBQTJDO0FBQ2hFO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUIsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtDQUFrQyxJQUFJLG1CQUFtQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1QkFBdUIsRUFBRSxxQkFBcUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw4Q0FBOEM7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QixFQUFFLG1CQUFtQjtBQUNqRTtBQUNBLG9CQUFvQixrQ0FBa0MsSUFBSSxTQUFTO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDhHQUE4RyxJQUFJO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLGFBQWEsd0VBQXdFO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHLGtCQUFrQjtBQUM5SDtBQUNBO0FBQ0E7QUFDQSw2R0FBNkcsU0FBUyxHQUFHLEtBQUs7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0E7QUFDQSxZQUFZLGlEQUFpRDtBQUM3RDtBQUNBO0FBQ0EsZ0JBQWdCLDRCQUE0QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsYUFBYSwyRUFBMkU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsSUFBSTtBQUNwRjtBQUNBO0FBQ0E7QUFDQSx3R0FBd0csa0JBQWtCO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYSxxQkFBcUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsV0FBVyxvQkFBb0IsaUJBQWlCLEdBQUc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckIsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFEQUFxRDtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsS0FBSyxVQUFVLGlCQUFpQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy91dGlscy5qcz9lNmMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oZWFkZXJDYXB0dXJlID0gZXhwb3J0cy5nZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzT25SZXNwb25zZSA9IGV4cG9ydHMuZ2V0SW5jb21pbmdSZXF1ZXN0QXR0cmlidXRlc09uUmVzcG9uc2UgPSBleHBvcnRzLmdldEluY29taW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXMgPSBleHBvcnRzLmdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXMgPSBleHBvcnRzLmdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXNPblJlc3BvbnNlID0gZXhwb3J0cy5nZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZSA9IGV4cG9ydHMuc2V0QXR0cmlidXRlc0Zyb21IdHRwS2luZCA9IGV4cG9ydHMuZ2V0T3V0Z29pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlcyA9IGV4cG9ydHMuZ2V0T3V0Z29pbmdSZXF1ZXN0QXR0cmlidXRlcyA9IGV4cG9ydHMuZXh0cmFjdEhvc3RuYW1lQW5kUG9ydCA9IGV4cG9ydHMuaXNWYWxpZE9wdGlvbnNUeXBlID0gZXhwb3J0cy5nZXRSZXF1ZXN0SW5mbyA9IGV4cG9ydHMuaXNDb21wcmVzc2VkID0gZXhwb3J0cy5zZXRSZXNwb25zZUNvbnRlbnRMZW5ndGhBdHRyaWJ1dGUgPSBleHBvcnRzLnNldFJlcXVlc3RDb250ZW50TGVuZ3RoQXR0cmlidXRlID0gZXhwb3J0cy5zZXRTcGFuV2l0aEVycm9yID0gZXhwb3J0cy5pc0lnbm9yZWQgPSBleHBvcnRzLnNhdGlzZmllc1BhdHRlcm4gPSBleHBvcnRzLnBhcnNlUmVzcG9uc2VTdGF0dXMgPSBleHBvcnRzLmdldEFic29sdXRlVXJsID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L2FwaVwiKTtcbmNvbnN0IHNlbWFudGljX2NvbnZlbnRpb25zXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnNcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvY29yZVwiKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBBdHRyaWJ1dGVOYW1lc18xID0gcmVxdWlyZShcIi4vZW51bXMvQXR0cmlidXRlTmFtZXNcIik7XG4vKipcbiAqIEdldCBhbiBhYnNvbHV0ZSB1cmxcbiAqL1xuY29uc3QgZ2V0QWJzb2x1dGVVcmwgPSAocmVxdWVzdFVybCwgaGVhZGVycywgZmFsbGJhY2tQcm90b2NvbCA9ICdodHRwOicpID0+IHtcbiAgICBjb25zdCByZXFVcmxPYmplY3QgPSByZXF1ZXN0VXJsIHx8IHt9O1xuICAgIGNvbnN0IHByb3RvY29sID0gcmVxVXJsT2JqZWN0LnByb3RvY29sIHx8IGZhbGxiYWNrUHJvdG9jb2w7XG4gICAgY29uc3QgcG9ydCA9IChyZXFVcmxPYmplY3QucG9ydCB8fCAnJykudG9TdHJpbmcoKTtcbiAgICBjb25zdCBwYXRoID0gcmVxVXJsT2JqZWN0LnBhdGggfHwgJy8nO1xuICAgIGxldCBob3N0ID0gcmVxVXJsT2JqZWN0Lmhvc3QgfHwgcmVxVXJsT2JqZWN0Lmhvc3RuYW1lIHx8IGhlYWRlcnMuaG9zdCB8fCAnbG9jYWxob3N0JztcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBwb3J0IGluIGhvc3QgYW5kIHRoZXJlIGlzIGEgcG9ydFxuICAgIC8vIGl0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaWYgaXQncyBub3QgODAgYW5kIDQ0MyAoZGVmYXVsdCBwb3J0cylcbiAgICBpZiAoaG9zdC5pbmRleE9mKCc6JykgPT09IC0xICYmXG4gICAgICAgIHBvcnQgJiZcbiAgICAgICAgcG9ydCAhPT0gJzgwJyAmJlxuICAgICAgICBwb3J0ICE9PSAnNDQzJykge1xuICAgICAgICBob3N0ICs9IGA6JHtwb3J0fWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke3BhdGh9YDtcbn07XG5leHBvcnRzLmdldEFic29sdXRlVXJsID0gZ2V0QWJzb2x1dGVVcmw7XG4vKipcbiAqIFBhcnNlIHN0YXR1cyBjb2RlIGZyb20gSFRUUCByZXNwb25zZS4gW01vcmUgZGV0YWlsc10oaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktc3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uL2RhdGEtaHR0cC5tZCNzdGF0dXMpXG4gKi9cbmNvbnN0IHBhcnNlUmVzcG9uc2VTdGF0dXMgPSAoa2luZCwgc3RhdHVzQ29kZSkgPT4ge1xuICAgIGNvbnN0IHVwcGVyQm91bmQgPSBraW5kID09PSBhcGlfMS5TcGFuS2luZC5DTElFTlQgPyA0MDAgOiA1MDA7XG4gICAgLy8gMXh4LCAyeHgsIDN4eCBhcmUgT0sgb24gY2xpZW50IGFuZCBzZXJ2ZXJcbiAgICAvLyA0eHggaXMgT0sgb24gc2VydmVyXG4gICAgaWYgKHN0YXR1c0NvZGUgJiYgc3RhdHVzQ29kZSA+PSAxMDAgJiYgc3RhdHVzQ29kZSA8IHVwcGVyQm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGFwaV8xLlNwYW5TdGF0dXNDb2RlLlVOU0VUO1xuICAgIH1cbiAgICAvLyBBbGwgb3RoZXIgY29kZXMgYXJlIGVycm9yXG4gICAgcmV0dXJuIGFwaV8xLlNwYW5TdGF0dXNDb2RlLkVSUk9SO1xufTtcbmV4cG9ydHMucGFyc2VSZXNwb25zZVN0YXR1cyA9IHBhcnNlUmVzcG9uc2VTdGF0dXM7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIG9iaiBtYXRjaCBwYXR0ZXJuXG4gKiBAcGFyYW0gY29uc3RhbnQgZS5nIFVSTCBvZiByZXF1ZXN0XG4gKiBAcGFyYW0gcGF0dGVybiBNYXRjaCBwYXR0ZXJuXG4gKi9cbmNvbnN0IHNhdGlzZmllc1BhdHRlcm4gPSAoY29uc3RhbnQsIHBhdHRlcm4pID0+IHtcbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuID09PSBjb25zdGFudDtcbiAgICB9XG4gICAgZWxzZSBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KGNvbnN0YW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4oY29uc3RhbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0dGVybiBpcyBpbiB1bnN1cHBvcnRlZCBkYXRhdHlwZScpO1xuICAgIH1cbn07XG5leHBvcnRzLnNhdGlzZmllc1BhdHRlcm4gPSBzYXRpc2ZpZXNQYXR0ZXJuO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiByZXF1ZXN0IGlzIGlnbm9yZWQgYnkgY29uZmlndXJhdGlvblxuICogSXQgd2lsbCBub3QgcmUtdGhyb3cgZXhjZXB0aW9ucyBmcm9tIGBsaXN0YCBwcm92aWRlZCBieSB0aGUgY2xpZW50XG4gKiBAcGFyYW0gY29uc3RhbnQgZS5nIFVSTCBvZiByZXF1ZXN0XG4gKiBAcGFyYW0gW2xpc3RdIExpc3Qgb2YgaWdub3JlIHBhdHRlcm5zXG4gKiBAcGFyYW0gW29uRXhjZXB0aW9uXSBjYWxsYmFjayBmb3IgZG9pbmcgc29tZXRoaW5nIHdoZW4gYW4gZXhjZXB0aW9uIGhhc1xuICogICAgIG9jY3VycmVkXG4gKi9cbmNvbnN0IGlzSWdub3JlZCA9IChjb25zdGFudCwgbGlzdCwgb25FeGNlcHRpb24pID0+IHtcbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgLy8gTm8gaWdub3JlZCB1cmxzIC0gdHJhY2UgZXZlcnl0aGluZ1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFRyeS9jYXRjaCBvdXRzaWRlIHRoZSBsb29wIGZvciBmYWlsaW5nIGZhc3RcbiAgICB0cnkge1xuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgbGlzdCkge1xuICAgICAgICAgICAgaWYgKCgwLCBleHBvcnRzLnNhdGlzZmllc1BhdHRlcm4pKGNvbnN0YW50LCBwYXR0ZXJuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChvbkV4Y2VwdGlvbikge1xuICAgICAgICAgICAgb25FeGNlcHRpb24oZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuaXNJZ25vcmVkID0gaXNJZ25vcmVkO1xuLyoqXG4gKiBTZXRzIHRoZSBzcGFuIHdpdGggdGhlIGVycm9yIHBhc3NlZCBpbiBwYXJhbXNcbiAqIEBwYXJhbSB7U3Bhbn0gc3BhbiB0aGUgc3BhbiB0aGF0IG5lZWQgdG8gYmUgc2V0XG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBlcnJvciB0aGF0IHdpbGwgYmUgc2V0IHRvIHNwYW5cbiAqL1xuY29uc3Qgc2V0U3BhbldpdGhFcnJvciA9IChzcGFuLCBlcnJvcikgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKEF0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSFRUUF9FUlJPUl9OQU1FLCBlcnJvci5uYW1lKTtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhUVFBfRVJST1JfTUVTU0FHRSwgbWVzc2FnZSk7XG4gICAgc3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBhcGlfMS5TcGFuU3RhdHVzQ29kZS5FUlJPUiwgbWVzc2FnZSB9KTtcbiAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnJvcik7XG59O1xuZXhwb3J0cy5zZXRTcGFuV2l0aEVycm9yID0gc2V0U3BhbldpdGhFcnJvcjtcbi8qKlxuICogQWRkcyBhdHRyaWJ1dGVzIGZvciByZXF1ZXN0IGNvbnRlbnQtbGVuZ3RoIGFuZCBjb250ZW50LWVuY29kaW5nIEhUVFAgaGVhZGVyc1xuICogQHBhcmFtIHsgSW5jb21pbmdNZXNzYWdlIH0gUmVxdWVzdCBvYmplY3Qgd2hvc2UgaGVhZGVycyB3aWxsIGJlIGFuYWx5emVkXG4gKiBAcGFyYW0geyBTcGFuQXR0cmlidXRlcyB9IFNwYW5BdHRyaWJ1dGVzIG9iamVjdCB0byBiZSBtb2RpZmllZFxuICovXG5jb25zdCBzZXRSZXF1ZXN0Q29udGVudExlbmd0aEF0dHJpYnV0ZSA9IChyZXF1ZXN0LCBhdHRyaWJ1dGVzKSA9PiB7XG4gICAgY29uc3QgbGVuZ3RoID0gZ2V0Q29udGVudExlbmd0aChyZXF1ZXN0LmhlYWRlcnMpO1xuICAgIGlmIChsZW5ndGggPT09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoKDAsIGV4cG9ydHMuaXNDb21wcmVzc2VkKShyZXF1ZXN0LmhlYWRlcnMpKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1JFUVVFU1RfQ09OVEVOVF9MRU5HVEhdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfUkVRVUVTVF9DT05URU5UX0xFTkdUSF9VTkNPTVBSRVNTRURdID0gbGVuZ3RoO1xuICAgIH1cbn07XG5leHBvcnRzLnNldFJlcXVlc3RDb250ZW50TGVuZ3RoQXR0cmlidXRlID0gc2V0UmVxdWVzdENvbnRlbnRMZW5ndGhBdHRyaWJ1dGU7XG4vKipcbiAqIEFkZHMgYXR0cmlidXRlcyBmb3IgcmVzcG9uc2UgY29udGVudC1sZW5ndGggYW5kIGNvbnRlbnQtZW5jb2RpbmcgSFRUUCBoZWFkZXJzXG4gKiBAcGFyYW0geyBJbmNvbWluZ01lc3NhZ2UgfSBSZXNwb25zZSBvYmplY3Qgd2hvc2UgaGVhZGVycyB3aWxsIGJlIGFuYWx5emVkXG4gKiBAcGFyYW0geyBTcGFuQXR0cmlidXRlcyB9IFNwYW5BdHRyaWJ1dGVzIG9iamVjdCB0byBiZSBtb2RpZmllZFxuICovXG5jb25zdCBzZXRSZXNwb25zZUNvbnRlbnRMZW5ndGhBdHRyaWJ1dGUgPSAocmVzcG9uc2UsIGF0dHJpYnV0ZXMpID0+IHtcbiAgICBjb25zdCBsZW5ndGggPSBnZXRDb250ZW50TGVuZ3RoKHJlc3BvbnNlLmhlYWRlcnMpO1xuICAgIGlmIChsZW5ndGggPT09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoKDAsIGV4cG9ydHMuaXNDb21wcmVzc2VkKShyZXNwb25zZS5oZWFkZXJzKSkge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9SRVNQT05TRV9DT05URU5UX0xFTkdUSF0gPSBsZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9SRVNQT05TRV9DT05URU5UX0xFTkdUSF9VTkNPTVBSRVNTRURdID0gbGVuZ3RoO1xuICAgIH1cbn07XG5leHBvcnRzLnNldFJlc3BvbnNlQ29udGVudExlbmd0aEF0dHJpYnV0ZSA9IHNldFJlc3BvbnNlQ29udGVudExlbmd0aEF0dHJpYnV0ZTtcbmZ1bmN0aW9uIGdldENvbnRlbnRMZW5ndGgoaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGhIZWFkZXIgPSBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddO1xuICAgIGlmIChjb250ZW50TGVuZ3RoSGVhZGVyID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBwYXJzZUludChjb250ZW50TGVuZ3RoSGVhZGVyLCAxMCk7XG4gICAgaWYgKGlzTmFOKGNvbnRlbnRMZW5ndGgpKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gY29udGVudExlbmd0aDtcbn1cbmNvbnN0IGlzQ29tcHJlc3NlZCA9IChoZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgZW5jb2RpbmcgPSBoZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ107XG4gICAgcmV0dXJuICEhZW5jb2RpbmcgJiYgZW5jb2RpbmcgIT09ICdpZGVudGl0eSc7XG59O1xuZXhwb3J0cy5pc0NvbXByZXNzZWQgPSBpc0NvbXByZXNzZWQ7XG4vKipcbiAqIE1ha2VzIHN1cmUgb3B0aW9ucyBpcyBhbiB1cmwgb2JqZWN0XG4gKiByZXR1cm4gYW4gb2JqZWN0IHdpdGggZGVmYXVsdCB2YWx1ZSBhbmQgcGFyc2VkIG9wdGlvbnNcbiAqIEBwYXJhbSBvcHRpb25zIG9yaWdpbmFsIG9wdGlvbnMgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0gW2V4dHJhT3B0aW9uc10gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcmVxdWVzdFxuICovXG5jb25zdCBnZXRSZXF1ZXN0SW5mbyA9IChvcHRpb25zLCBleHRyYU9wdGlvbnMpID0+IHtcbiAgICBsZXQgcGF0aG5hbWUgPSAnLyc7XG4gICAgbGV0IG9yaWdpbiA9ICcnO1xuICAgIGxldCBvcHRpb25zUGFyc2VkO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9uc1BhcnNlZCA9IHVybC5wYXJzZShvcHRpb25zKTtcbiAgICAgICAgcGF0aG5hbWUgPSBvcHRpb25zUGFyc2VkLnBhdGhuYW1lIHx8ICcvJztcbiAgICAgICAgb3JpZ2luID0gYCR7b3B0aW9uc1BhcnNlZC5wcm90b2NvbCB8fCAnaHR0cDonfS8vJHtvcHRpb25zUGFyc2VkLmhvc3R9YDtcbiAgICAgICAgaWYgKGV4dHJhT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnNQYXJzZWQsIGV4dHJhT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIHVybC5VUkwpIHtcbiAgICAgICAgb3B0aW9uc1BhcnNlZCA9IHtcbiAgICAgICAgICAgIHByb3RvY29sOiBvcHRpb25zLnByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHR5cGVvZiBvcHRpb25zLmhvc3RuYW1lID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5ob3N0bmFtZS5zbGljZSgxLCAtMSlcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnMuaG9zdG5hbWUsXG4gICAgICAgICAgICBwYXRoOiBgJHtvcHRpb25zLnBhdGhuYW1lIHx8ICcnfSR7b3B0aW9ucy5zZWFyY2ggfHwgJyd9YCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMucG9ydCAhPT0gJycpIHtcbiAgICAgICAgICAgIG9wdGlvbnNQYXJzZWQucG9ydCA9IE51bWJlcihvcHRpb25zLnBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnVzZXJuYW1lIHx8IG9wdGlvbnMucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIG9wdGlvbnNQYXJzZWQuYXV0aCA9IGAke29wdGlvbnMudXNlcm5hbWV9OiR7b3B0aW9ucy5wYXNzd29yZH1gO1xuICAgICAgICB9XG4gICAgICAgIHBhdGhuYW1lID0gb3B0aW9ucy5wYXRobmFtZTtcbiAgICAgICAgb3JpZ2luID0gb3B0aW9ucy5vcmlnaW47XG4gICAgICAgIGlmIChleHRyYU9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zUGFyc2VkLCBleHRyYU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zUGFyc2VkID0gT2JqZWN0LmFzc2lnbih7IHByb3RvY29sOiBvcHRpb25zLmhvc3QgPyAnaHR0cDonIDogdW5kZWZpbmVkIH0sIG9wdGlvbnMpO1xuICAgICAgICBwYXRobmFtZSA9IG9wdGlvbnMucGF0aG5hbWU7XG4gICAgICAgIGlmICghcGF0aG5hbWUgJiYgb3B0aW9uc1BhcnNlZC5wYXRoKSB7XG4gICAgICAgICAgICBwYXRobmFtZSA9IHVybC5wYXJzZShvcHRpb25zUGFyc2VkLnBhdGgpLnBhdGhuYW1lIHx8ICcvJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3N0bmFtZSA9IG9wdGlvbnNQYXJzZWQuaG9zdCB8fFxuICAgICAgICAgICAgKG9wdGlvbnNQYXJzZWQucG9ydCAhPSBudWxsXG4gICAgICAgICAgICAgICAgPyBgJHtvcHRpb25zUGFyc2VkLmhvc3RuYW1lfSR7b3B0aW9uc1BhcnNlZC5wb3J0fWBcbiAgICAgICAgICAgICAgICA6IG9wdGlvbnNQYXJzZWQuaG9zdG5hbWUpO1xuICAgICAgICBvcmlnaW4gPSBgJHtvcHRpb25zUGFyc2VkLnByb3RvY29sIHx8ICdodHRwOid9Ly8ke2hvc3RuYW1lfWA7XG4gICAgfVxuICAgIC8vIHNvbWUgcGFja2FnZXMgcmV0dXJuIG1ldGhvZCBpbiBsb3dlcmNhc2UuLlxuICAgIC8vIGVuc3VyZSB1cHBlckNhc2UgZm9yIGNvbnNpc3RlbmN5XG4gICAgY29uc3QgbWV0aG9kID0gb3B0aW9uc1BhcnNlZC5tZXRob2RcbiAgICAgICAgPyBvcHRpb25zUGFyc2VkLm1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIDogJ0dFVCc7XG4gICAgcmV0dXJuIHsgb3JpZ2luLCBwYXRobmFtZSwgbWV0aG9kLCBvcHRpb25zUGFyc2VkIH07XG59O1xuZXhwb3J0cy5nZXRSZXF1ZXN0SW5mbyA9IGdldFJlcXVlc3RJbmZvO1xuLyoqXG4gKiBNYWtlcyBzdXJlIG9wdGlvbnMgaXMgb2YgdHlwZSBzdHJpbmcgb3Igb2JqZWN0XG4gKiBAcGFyYW0gb3B0aW9ucyBmb3IgdGhlIHJlcXVlc3RcbiAqL1xuY29uc3QgaXNWYWxpZE9wdGlvbnNUeXBlID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIG9wdGlvbnM7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdzdHJpbmcnIHx8ICh0eXBlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvcHRpb25zKSk7XG59O1xuZXhwb3J0cy5pc1ZhbGlkT3B0aW9uc1R5cGUgPSBpc1ZhbGlkT3B0aW9uc1R5cGU7XG5jb25zdCBleHRyYWN0SG9zdG5hbWVBbmRQb3J0ID0gKHJlcXVlc3RPcHRpb25zKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChyZXF1ZXN0T3B0aW9ucy5ob3N0bmFtZSAmJiByZXF1ZXN0T3B0aW9ucy5wb3J0KSB7XG4gICAgICAgIHJldHVybiB7IGhvc3RuYW1lOiByZXF1ZXN0T3B0aW9ucy5ob3N0bmFtZSwgcG9ydDogcmVxdWVzdE9wdGlvbnMucG9ydCB9O1xuICAgIH1cbiAgICBjb25zdCBtYXRjaGVzID0gKChfYSA9IHJlcXVlc3RPcHRpb25zLmhvc3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXRjaCgvXihbXjovIF0rKSg6XFxkezEsNX0pPy8pKSB8fCBudWxsO1xuICAgIGNvbnN0IGhvc3RuYW1lID0gcmVxdWVzdE9wdGlvbnMuaG9zdG5hbWUgfHwgKG1hdGNoZXMgPT09IG51bGwgPyAnbG9jYWxob3N0JyA6IG1hdGNoZXNbMV0pO1xuICAgIGxldCBwb3J0ID0gcmVxdWVzdE9wdGlvbnMucG9ydDtcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlc1syXSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsZWFkaW5nIFwiOlwiLiBUaGUgZXh0cmFjdGVkIHBvcnQgd291bGQgYmUgc29tZXRoaW5nIGxpa2UgXCI6ODA4MFwiXG4gICAgICAgICAgICBwb3J0ID0gbWF0Y2hlc1syXS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwb3J0ID0gcmVxdWVzdE9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonID8gJzQ0MycgOiAnODAnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGhvc3RuYW1lLCBwb3J0IH07XG59O1xuZXhwb3J0cy5leHRyYWN0SG9zdG5hbWVBbmRQb3J0ID0gZXh0cmFjdEhvc3RuYW1lQW5kUG9ydDtcbi8qKlxuICogUmV0dXJucyBvdXRnb2luZyByZXF1ZXN0IGF0dHJpYnV0ZXMgc2NvcGVkIHRvIHRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGUgcmVxdWVzdFxuICogQHBhcmFtIHtQYXJzZWRSZXF1ZXN0T3B0aW9uc30gcmVxdWVzdE9wdGlvbnMgdGhlIHNhbWUgb3B0aW9ucyB1c2VkIHRvIG1ha2UgdGhlIHJlcXVlc3RcbiAqIEBwYXJhbSB7eyBjb21wb25lbnQ6IHN0cmluZywgaG9zdG5hbWU6IHN0cmluZywgaG9va0F0dHJpYnV0ZXM/OiBTcGFuQXR0cmlidXRlcyB9fSBvcHRpb25zIHVzZWQgdG8gcGFzcyBkYXRhIG5lZWRlZCB0byBjcmVhdGUgYXR0cmlidXRlc1xuICovXG5jb25zdCBnZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzID0gKHJlcXVlc3RPcHRpb25zLCBvcHRpb25zKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGhvc3RuYW1lID0gb3B0aW9ucy5ob3N0bmFtZTtcbiAgICBjb25zdCBwb3J0ID0gb3B0aW9ucy5wb3J0O1xuICAgIGNvbnN0IHJlcXVlc3RNZXRob2QgPSByZXF1ZXN0T3B0aW9ucy5tZXRob2Q7XG4gICAgY29uc3QgbWV0aG9kID0gcmVxdWVzdE1ldGhvZCA/IHJlcXVlc3RNZXRob2QudG9VcHBlckNhc2UoKSA6ICdHRVQnO1xuICAgIGNvbnN0IGhlYWRlcnMgPSByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgIGNvbnN0IHVzZXJBZ2VudCA9IGhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge1xuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1VSTF06ICgwLCBleHBvcnRzLmdldEFic29sdXRlVXJsKShyZXF1ZXN0T3B0aW9ucywgaGVhZGVycywgYCR7b3B0aW9ucy5jb21wb25lbnR9OmApLFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX01FVEhPRF06IG1ldGhvZCxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9UQVJHRVRdOiByZXF1ZXN0T3B0aW9ucy5wYXRoIHx8ICcvJyxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV06IGhvc3RuYW1lLFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX0hPU1RdOiAoX2EgPSBoZWFkZXJzLmhvc3QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGAke2hvc3RuYW1lfToke3BvcnR9YCxcbiAgICB9O1xuICAgIGlmICh1c2VyQWdlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9VU0VSX0FHRU5UXSA9IHVzZXJBZ2VudDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywgb3B0aW9ucy5ob29rQXR0cmlidXRlcyk7XG59O1xuZXhwb3J0cy5nZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzID0gZ2V0T3V0Z29pbmdSZXF1ZXN0QXR0cmlidXRlcztcbi8qKlxuICogUmV0dXJucyBvdXRnb2luZyByZXF1ZXN0IE1ldHJpYyBhdHRyaWJ1dGVzIHNjb3BlZCB0byB0aGUgcmVxdWVzdCBkYXRhXG4gKiBAcGFyYW0ge1NwYW5BdHRyaWJ1dGVzfSBzcGFuQXR0cmlidXRlcyB0aGUgc3BhbiBhdHRyaWJ1dGVzXG4gKi9cbmNvbnN0IGdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXMgPSAoc3BhbkF0dHJpYnV0ZXMpID0+IHtcbiAgICBjb25zdCBtZXRyaWNBdHRyaWJ1dGVzID0ge307XG4gICAgbWV0cmljQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfTUVUSE9EXSA9IHNwYW5BdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9NRVRIT0RdO1xuICAgIG1ldHJpY0F0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9OQU1FXSA9XG4gICAgICAgIHNwYW5BdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfTkFNRV07XG4gICAgLy9UT0RPOiBodHRwLnVybCBhdHRyaWJ1dGUsIGl0IHNob3VsZCBzdWJzdGl0dXRlIGFueSBwYXJhbWV0ZXJzIHRvIGF2b2lkIGhpZ2ggY2FyZGluYWxpdHkuXG4gICAgcmV0dXJuIG1ldHJpY0F0dHJpYnV0ZXM7XG59O1xuZXhwb3J0cy5nZXRPdXRnb2luZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzID0gZ2V0T3V0Z29pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlcztcbi8qKlxuICogUmV0dXJucyBhdHRyaWJ1dGVzIHJlbGF0ZWQgdG8gdGhlIGtpbmQgb2YgSFRUUCBwcm90b2NvbCB1c2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tpbmRdIEtpbmQgb2YgSFRUUCBwcm90b2NvbCB1c2VkOiBcIjEuMFwiLCBcIjEuMVwiLCBcIjJcIiwgXCJTUERZXCIgb3IgXCJRVUlDXCIuXG4gKi9cbmNvbnN0IHNldEF0dHJpYnV0ZXNGcm9tSHR0cEtpbmQgPSAoa2luZCwgYXR0cmlidXRlcykgPT4ge1xuICAgIGlmIChraW5kKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX0ZMQVZPUl0gPSBraW5kO1xuICAgICAgICBpZiAoa2luZC50b1VwcGVyQ2FzZSgpICE9PSAnUVVJQycpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfVFJBTlNQT1JUXSA9IHNlbWFudGljX2NvbnZlbnRpb25zXzEuTkVUVFJBTlNQT1JUVkFMVUVTX0lQX1RDUDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfVFJBTlNQT1JUXSA9IHNlbWFudGljX2NvbnZlbnRpb25zXzEuTkVUVFJBTlNQT1JUVkFMVUVTX0lQX1VEUDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnRzLnNldEF0dHJpYnV0ZXNGcm9tSHR0cEtpbmQgPSBzZXRBdHRyaWJ1dGVzRnJvbUh0dHBLaW5kO1xuLyoqXG4gKiBSZXR1cm5zIG91dGdvaW5nIHJlcXVlc3QgYXR0cmlidXRlcyBzY29wZWQgdG8gdGhlIHJlc3BvbnNlIGRhdGFcbiAqIEBwYXJhbSB7SW5jb21pbmdNZXNzYWdlfSByZXNwb25zZSB0aGUgcmVzcG9uc2Ugb2JqZWN0XG4gKiBAcGFyYW0ge3sgaG9zdG5hbWU6IHN0cmluZyB9fSBvcHRpb25zIHVzZWQgdG8gcGFzcyBkYXRhIG5lZWRlZCB0byBjcmVhdGUgYXR0cmlidXRlc1xuICovXG5jb25zdCBnZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZSA9IChyZXNwb25zZSkgPT4ge1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSwgc3RhdHVzTWVzc2FnZSwgaHR0cFZlcnNpb24sIHNvY2tldCB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICAgIGlmIChzb2NrZXQpIHtcbiAgICAgICAgY29uc3QgeyByZW1vdGVBZGRyZXNzLCByZW1vdGVQb3J0IH0gPSBzb2NrZXQ7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9JUF0gPSByZW1vdGVBZGRyZXNzO1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfUE9SVF0gPSByZW1vdGVQb3J0O1xuICAgIH1cbiAgICAoMCwgZXhwb3J0cy5zZXRSZXNwb25zZUNvbnRlbnRMZW5ndGhBdHRyaWJ1dGUpKHJlc3BvbnNlLCBhdHRyaWJ1dGVzKTtcbiAgICBpZiAoc3RhdHVzQ29kZSkge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9TVEFUVVNfQ09ERV0gPSBzdGF0dXNDb2RlO1xuICAgICAgICBhdHRyaWJ1dGVzW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSFRUUF9TVEFUVVNfVEVYVF0gPSAoc3RhdHVzTWVzc2FnZSB8fCAnJykudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgKDAsIGV4cG9ydHMuc2V0QXR0cmlidXRlc0Zyb21IdHRwS2luZCkoaHR0cFZlcnNpb24sIGF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xufTtcbmV4cG9ydHMuZ2V0T3V0Z29pbmdSZXF1ZXN0QXR0cmlidXRlc09uUmVzcG9uc2UgPSBnZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZTtcbi8qKlxuICogUmV0dXJucyBvdXRnb2luZyByZXF1ZXN0IE1ldHJpYyBhdHRyaWJ1dGVzIHNjb3BlZCB0byB0aGUgcmVzcG9uc2UgZGF0YVxuICogQHBhcmFtIHtTcGFuQXR0cmlidXRlc30gc3BhbkF0dHJpYnV0ZXMgdGhlIHNwYW4gYXR0cmlidXRlc1xuICovXG5jb25zdCBnZXRPdXRnb2luZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzT25SZXNwb25zZSA9IChzcGFuQXR0cmlidXRlcykgPT4ge1xuICAgIGNvbnN0IG1ldHJpY0F0dHJpYnV0ZXMgPSB7fTtcbiAgICBtZXRyaWNBdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX1BFRVJfUE9SVF0gPVxuICAgICAgICBzcGFuQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX1BPUlRdO1xuICAgIG1ldHJpY0F0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1NUQVRVU19DT0RFXSA9XG4gICAgICAgIHNwYW5BdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9TVEFUVVNfQ09ERV07XG4gICAgbWV0cmljQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfRkxBVk9SXSA9IHNwYW5BdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9GTEFWT1JdO1xuICAgIHJldHVybiBtZXRyaWNBdHRyaWJ1dGVzO1xufTtcbmV4cG9ydHMuZ2V0T3V0Z29pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc09uUmVzcG9uc2UgPSBnZXRPdXRnb2luZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzT25SZXNwb25zZTtcbi8qKlxuICogUmV0dXJucyBpbmNvbWluZyByZXF1ZXN0IGF0dHJpYnV0ZXMgc2NvcGVkIHRvIHRoZSByZXF1ZXN0IGRhdGFcbiAqIEBwYXJhbSB7SW5jb21pbmdNZXNzYWdlfSByZXF1ZXN0IHRoZSByZXF1ZXN0IG9iamVjdFxuICogQHBhcmFtIHt7IGNvbXBvbmVudDogc3RyaW5nLCBzZXJ2ZXJOYW1lPzogc3RyaW5nLCBob29rQXR0cmlidXRlcz86IFNwYW5BdHRyaWJ1dGVzIH19IG9wdGlvbnMgdXNlZCB0byBwYXNzIGRhdGEgbmVlZGVkIHRvIGNyZWF0ZSBhdHRyaWJ1dGVzXG4gKi9cbmNvbnN0IGdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXMgPSAocmVxdWVzdCwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnM7XG4gICAgY29uc3QgdXNlckFnZW50ID0gaGVhZGVyc1sndXNlci1hZ2VudCddO1xuICAgIGNvbnN0IGlwcyA9IGhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddO1xuICAgIGNvbnN0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kIHx8ICdHRVQnO1xuICAgIGNvbnN0IGh0dHBWZXJzaW9uID0gcmVxdWVzdC5odHRwVmVyc2lvbjtcbiAgICBjb25zdCByZXF1ZXN0VXJsID0gcmVxdWVzdC51cmwgPyB1cmwucGFyc2UocmVxdWVzdC51cmwpIDogbnVsbDtcbiAgICBjb25zdCBob3N0ID0gKHJlcXVlc3RVcmwgPT09IG51bGwgfHwgcmVxdWVzdFVybCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdFVybC5ob3N0KSB8fCBoZWFkZXJzLmhvc3Q7XG4gICAgY29uc3QgaG9zdG5hbWUgPSAocmVxdWVzdFVybCA9PT0gbnVsbCB8fCByZXF1ZXN0VXJsID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0VXJsLmhvc3RuYW1lKSB8fFxuICAgICAgICAoaG9zdCA9PT0gbnVsbCB8fCBob3N0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBob3N0LnJlcGxhY2UoL14oLiopKDpbMC05XXsxLDV9KS8sICckMScpKSB8fFxuICAgICAgICAnbG9jYWxob3N0JztcbiAgICBjb25zdCBzZXJ2ZXJOYW1lID0gb3B0aW9ucy5zZXJ2ZXJOYW1lO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfVVJMXTogKDAsIGV4cG9ydHMuZ2V0QWJzb2x1dGVVcmwpKHJlcXVlc3RVcmwsIGhlYWRlcnMsIGAke29wdGlvbnMuY29tcG9uZW50fTpgKSxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9IT1NUXTogaG9zdCxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX0hPU1RfTkFNRV06IGhvc3RuYW1lLFxuICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX01FVEhPRF06IG1ldGhvZCxcbiAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9TQ0hFTUVdOiBvcHRpb25zLmNvbXBvbmVudCxcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgaXBzID09PSAnc3RyaW5nJykge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9DTElFTlRfSVBdID0gaXBzLnNwbGl0KCcsJylbMF07XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VydmVyTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfU0VSVkVSX05BTUVdID0gc2VydmVyTmFtZTtcbiAgICB9XG4gICAgaWYgKHJlcXVlc3RVcmwpIHtcbiAgICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfVEFSR0VUXSA9IHJlcXVlc3RVcmwucGF0aCB8fCAnLyc7XG4gICAgfVxuICAgIGlmICh1c2VyQWdlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9VU0VSX0FHRU5UXSA9IHVzZXJBZ2VudDtcbiAgICB9XG4gICAgKDAsIGV4cG9ydHMuc2V0UmVxdWVzdENvbnRlbnRMZW5ndGhBdHRyaWJ1dGUpKHJlcXVlc3QsIGF0dHJpYnV0ZXMpO1xuICAgICgwLCBleHBvcnRzLnNldEF0dHJpYnV0ZXNGcm9tSHR0cEtpbmQpKGh0dHBWZXJzaW9uLCBhdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzLCBvcHRpb25zLmhvb2tBdHRyaWJ1dGVzKTtcbn07XG5leHBvcnRzLmdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXMgPSBnZXRJbmNvbWluZ1JlcXVlc3RBdHRyaWJ1dGVzO1xuLyoqXG4gKiBSZXR1cm5zIGluY29taW5nIHJlcXVlc3QgTWV0cmljIGF0dHJpYnV0ZXMgc2NvcGVkIHRvIHRoZSByZXF1ZXN0IGRhdGFcbiAqIEBwYXJhbSB7U3BhbkF0dHJpYnV0ZXN9IHNwYW5BdHRyaWJ1dGVzIHRoZSBzcGFuIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7eyBjb21wb25lbnQ6IHN0cmluZyB9fSBvcHRpb25zIHVzZWQgdG8gcGFzcyBkYXRhIG5lZWRlZCB0byBjcmVhdGUgYXR0cmlidXRlc1xuICovXG5jb25zdCBnZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzID0gKHNwYW5BdHRyaWJ1dGVzKSA9PiB7XG4gICAgY29uc3QgbWV0cmljQXR0cmlidXRlcyA9IHt9O1xuICAgIG1ldHJpY0F0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1NDSEVNRV0gPSBzcGFuQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfU0NIRU1FXTtcbiAgICBtZXRyaWNBdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9NRVRIT0RdID0gc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX01FVEhPRF07XG4gICAgbWV0cmljQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9IT1NUX05BTUVdID1cbiAgICAgICAgc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfSE9TVF9OQU1FXTtcbiAgICBtZXRyaWNBdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9GTEFWT1JdID0gc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX0ZMQVZPUl07XG4gICAgLy9UT0RPOiBodHRwLnRhcmdldCBhdHRyaWJ1dGUsIGl0IHNob3VsZCBzdWJzdGl0dXRlIGFueSBwYXJhbWV0ZXJzIHRvIGF2b2lkIGhpZ2ggY2FyZGluYWxpdHkuXG4gICAgcmV0dXJuIG1ldHJpY0F0dHJpYnV0ZXM7XG59O1xuZXhwb3J0cy5nZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzID0gZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlcztcbi8qKlxuICogUmV0dXJucyBpbmNvbWluZyByZXF1ZXN0IGF0dHJpYnV0ZXMgc2NvcGVkIHRvIHRoZSByZXNwb25zZSBkYXRhXG4gKiBAcGFyYW0geyhTZXJ2ZXJSZXNwb25zZSAmIHsgc29ja2V0OiBTb2NrZXQ7IH0pfSByZXNwb25zZSB0aGUgcmVzcG9uc2Ugb2JqZWN0XG4gKi9cbmNvbnN0IGdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXNPblJlc3BvbnNlID0gKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gICAgLy8gdGFrZSBzb2NrZXQgZnJvbSB0aGUgcmVxdWVzdCxcbiAgICAvLyBzaW5jZSBpdCBtYXkgYmUgZGV0YWNoZWQgZnJvbSB0aGUgcmVzcG9uc2Ugb2JqZWN0IGluIGtlZXAtYWxpdmUgbW9kZVxuICAgIGNvbnN0IHsgc29ja2V0IH0gPSByZXF1ZXN0O1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSwgc3RhdHVzTWVzc2FnZSB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgcnBjTWV0YWRhdGEgPSAoMCwgY29yZV8xLmdldFJQQ01ldGFkYXRhKShhcGlfMS5jb250ZXh0LmFjdGl2ZSgpKTtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgaWYgKHNvY2tldCkge1xuICAgICAgICBjb25zdCB7IGxvY2FsQWRkcmVzcywgbG9jYWxQb3J0LCByZW1vdGVBZGRyZXNzLCByZW1vdGVQb3J0IH0gPSBzb2NrZXQ7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfSE9TVF9JUF0gPSBsb2NhbEFkZHJlc3M7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfSE9TVF9QT1JUXSA9IGxvY2FsUG9ydDtcbiAgICAgICAgYXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9QRUVSX0lQXSA9IHJlbW90ZUFkZHJlc3M7XG4gICAgICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19ORVRfUEVFUl9QT1JUXSA9IHJlbW90ZVBvcnQ7XG4gICAgfVxuICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1NUQVRVU19DT0RFXSA9IHN0YXR1c0NvZGU7XG4gICAgYXR0cmlidXRlc1tBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhUVFBfU1RBVFVTX1RFWFRdID0gKHN0YXR1c01lc3NhZ2UgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKChycGNNZXRhZGF0YSA9PT0gbnVsbCB8fCBycGNNZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcnBjTWV0YWRhdGEudHlwZSkgPT09IGNvcmVfMS5SUENUeXBlLkhUVFAgJiYgcnBjTWV0YWRhdGEucm91dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9ST1VURV0gPSBycGNNZXRhZGF0YS5yb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59O1xuZXhwb3J0cy5nZXRJbmNvbWluZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZSA9IGdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXNPblJlc3BvbnNlO1xuLyoqXG4gKiBSZXR1cm5zIGluY29taW5nIHJlcXVlc3QgTWV0cmljIGF0dHJpYnV0ZXMgc2NvcGVkIHRvIHRoZSByZXF1ZXN0IGRhdGFcbiAqIEBwYXJhbSB7U3BhbkF0dHJpYnV0ZXN9IHNwYW5BdHRyaWJ1dGVzIHRoZSBzcGFuIGF0dHJpYnV0ZXNcbiAqL1xuY29uc3QgZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc09uUmVzcG9uc2UgPSAoc3BhbkF0dHJpYnV0ZXMpID0+IHtcbiAgICBjb25zdCBtZXRyaWNBdHRyaWJ1dGVzID0ge307XG4gICAgbWV0cmljQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfU1RBVFVTX0NPREVdID1cbiAgICAgICAgc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1NUQVRVU19DT0RFXTtcbiAgICBtZXRyaWNBdHRyaWJ1dGVzW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfTkVUX0hPU1RfUE9SVF0gPVxuICAgICAgICBzcGFuQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX05FVF9IT1NUX1BPUlRdO1xuICAgIGlmIChzcGFuQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfUk9VVEVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWV0cmljQXR0cmlidXRlc1tzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfUk9VVEVdID0gc3BhbkF0dHJpYnV0ZXNbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1JPVVRFXTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldHJpY0F0dHJpYnV0ZXM7XG59O1xuZXhwb3J0cy5nZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzT25SZXNwb25zZSA9IGdldEluY29taW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXNPblJlc3BvbnNlO1xuZnVuY3Rpb24gaGVhZGVyQ2FwdHVyZSh0eXBlLCBoZWFkZXJzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZEhlYWRlcnMgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGhlYWRlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2FwdHVyZWRIZWFkZXIgPSBoZWFkZXJzW2ldLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG5vcm1hbGl6ZWRIZWFkZXJzLnNldChjYXB0dXJlZEhlYWRlciwgY2FwdHVyZWRIZWFkZXIucmVwbGFjZSgvLS9nLCAnXycpKTtcbiAgICB9XG4gICAgcmV0dXJuIChzcGFuLCBnZXRIZWFkZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBjYXB0dXJlZEhlYWRlciBvZiBub3JtYWxpemVkSGVhZGVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0SGVhZGVyKGNhcHR1cmVkSGVhZGVyKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkSGVhZGVyID0gbm9ybWFsaXplZEhlYWRlcnMuZ2V0KGNhcHR1cmVkSGVhZGVyKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGBodHRwLiR7dHlwZX0uaGVhZGVyLiR7bm9ybWFsaXplZEhlYWRlcn1gO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShrZXksIFt2YWx1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGtleSwgW3ZhbHVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5oZWFkZXJDYXB0dXJlID0gaGVhZGVyQ2FwdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.53.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWh0dHBAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL3ZlcnNpb24uanM/N2Y3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuVkVSU0lPTiA9ICcwLjUzLjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_ERROR_NAME\"] = \"http.error_name\";\n    AttributeNames[\"HTTP_ERROR_MESSAGE\"] = \"http.error_message\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWh0dHBAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzPzhjNDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktc3BlY2lmaWNhdGlvbi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uL3RyYWNlL3NlbWFudGljX2NvbnZlbnRpb25zL2h0dHAubWRcbiAqL1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSFRUUF9FUlJPUl9OQU1FXCJdID0gXCJodHRwLmVycm9yX25hbWVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhUVFBfRVJST1JfTUVTU0FHRVwiXSA9IFwiaHR0cC5lcnJvcl9tZXNzYWdlXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJIVFRQX1NUQVRVU19URVhUXCJdID0gXCJodHRwLnN0YXR1c190ZXh0XCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst semver = __webpack_require__(/*! semver */ \"(instrument)/../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst utils = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core_2 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/**\n * Http instrumentation instrumentation for Opentelemetry\n */\nclass HttpInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-http', version_1.VERSION, config);\n        /** keep track on spans not ended */\n        this._spanNotEnded = new WeakSet();\n        this._headerCapture = this._createHeaderCapture();\n    }\n    _updateMetricInstruments() {\n        this._httpServerDurationHistogram = this.meter.createHistogram('http.server.duration', {\n            description: 'Measures the duration of inbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._httpClientDurationHistogram = this.meter.createHistogram('http.client.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n    }\n    setConfig(config = {}) {\n        super.setConfig(config);\n        this._headerCapture = this._createHeaderCapture();\n    }\n    init() {\n        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n    }\n    _getHttpInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction('http'));\n                this._wrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('http'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    _getHttpsInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchHttpsOutgoingRequestFunction('https'));\n                this._wrap(moduleExports, 'get', this._getPatchHttpsOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('https'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    /**\n     * Creates spans for incoming requests, restoring spans' context if applied.\n     */\n    _getPatchIncomingRequestFunction(component) {\n        return (original) => {\n            return this._incomingRequestFunction(component, original);\n        };\n    }\n    /**\n     * Creates spans for outgoing requests, sending spans' context for distributed\n     * tracing.\n     */\n    _getPatchOutgoingRequestFunction(component) {\n        return (original) => {\n            return this._outgoingRequestFunction(component, original);\n        };\n    }\n    _getPatchOutgoingGetFunction(clientRequest) {\n        return (_original) => {\n            // Re-implement http.get. This needs to be done (instead of using\n            // getPatchOutgoingRequestFunction to patch it) because we need to\n            // set the trace context header before the returned http.ClientRequest is\n            // ended. The Node.js docs state that the only differences between\n            // request and get are that (1) get defaults to the HTTP GET method and\n            // (2) the returned request object is ended immediately. The former is\n            // already true (at least in supported Node versions up to v10), so we\n            // simply follow the latter. Ref:\n            // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n            // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n            return function outgoingGetRequest(options, ...args) {\n                const req = clientRequest(options, ...args);\n                req.end();\n                return req;\n            };\n        };\n    }\n    /** Patches HTTPS outgoing requests */\n    _getPatchHttpsOutgoingRequestFunction(component) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                var _a;\n                // Makes sure options will have default HTTPS parameters\n                if (component === 'https' &&\n                    typeof options === 'object' &&\n                    ((_a = options === null || options === void 0 ? void 0 : options.constructor) === null || _a === void 0 ? void 0 : _a.name) !== 'URL') {\n                    options = Object.assign({}, options);\n                    instrumentation._setDefaultOptions(options);\n                }\n                return instrumentation._getPatchOutgoingRequestFunction(component)(original)(options, ...args);\n            };\n        };\n    }\n    _setDefaultOptions(options) {\n        options.protocol = options.protocol || 'https:';\n        options.port = options.port || 443;\n    }\n    /** Patches HTTPS outgoing get requests */\n    _getPatchHttpsOutgoingGetFunction(clientRequest) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                return instrumentation._getPatchOutgoingGetFunction(clientRequest)(original)(options, ...args);\n            };\n        };\n    }\n    /**\n     * Attach event listeners to a client request to end span and add span attributes.\n     *\n     * @param request The original request object.\n     * @param span representing the current operation\n     * @param startTime representing the start time of the request to calculate duration in Metric\n     * @param metricAttributes metric attributes\n     */\n    _traceClientRequest(request, span, startTime, metricAttributes) {\n        if (this.getConfig().requestHook) {\n            this._callRequestHook(span, request);\n        }\n        /**\n         * Determines if the request has errored or the response has ended/errored.\n         */\n        let responseFinished = false;\n        /*\n         * User 'response' event listeners can be added before our listener,\n         * force our listener to be the first, so response emitter is bound\n         * before any user listeners are added to it.\n         */\n        request.prependListener('response', (response) => {\n            this._diag.debug('outgoingRequest on response()');\n            if (request.listenerCount('response') <= 1) {\n                response.resume();\n            }\n            const responseAttributes = utils.getOutgoingRequestAttributesOnResponse(response);\n            span.setAttributes(responseAttributes);\n            metricAttributes = Object.assign(metricAttributes, utils.getOutgoingRequestMetricAttributesOnResponse(responseAttributes));\n            if (this.getConfig().responseHook) {\n                this._callResponseHook(span, response);\n            }\n            this._headerCapture.client.captureRequestHeaders(span, header => request.getHeader(header));\n            this._headerCapture.client.captureResponseHeaders(span, header => response.headers[header]);\n            api_1.context.bind(api_1.context.active(), response);\n            const endHandler = () => {\n                this._diag.debug('outgoingRequest on end()');\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                let status;\n                if (response.aborted && !response.complete) {\n                    status = { code: api_1.SpanStatusCode.ERROR };\n                }\n                else {\n                    status = {\n                        code: utils.parseResponseStatus(api_1.SpanKind.CLIENT, response.statusCode),\n                    };\n                }\n                span.setStatus(status);\n                if (this.getConfig().applyCustomAttributesOnSpan) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n                }\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            };\n            response.on('end', endHandler);\n            // See https://github.com/open-telemetry/opentelemetry-js/pull/3625#issuecomment-1475673533\n            if (semver.lt(process.version, '16.0.0')) {\n                response.on('close', endHandler);\n            }\n            response.on(events_1.errorMonitor, (error) => {\n                this._diag.debug('outgoingRequest on error()', error);\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                utils.setSpanWithError(span, error);\n                span.setStatus({\n                    code: api_1.SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            });\n        });\n        request.on('close', () => {\n            this._diag.debug('outgoingRequest on request close()');\n            if (request.aborted || responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        request.on(events_1.errorMonitor, (error) => {\n            this._diag.debug('outgoingRequest on request error()', error);\n            if (responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            utils.setSpanWithError(span, error);\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        this._diag.debug('http.ClientRequest return request');\n        return request;\n    }\n    _incomingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function incomingRequest(event, ...args) {\n            // Only traces request events\n            if (event !== 'request') {\n                return original.apply(this, [event, ...args]);\n            }\n            const request = args[0];\n            const response = args[1];\n            const pathname = request.url\n                ? url.parse(request.url).pathname || '/'\n                : '/';\n            const method = request.method || 'GET';\n            instrumentation._diag.debug(`${component} instrumentation incomingRequest`);\n            if (utils.isIgnored(pathname, instrumentation.getConfig().ignoreIncomingPaths, (e) => instrumentation._diag.error('caught ignoreIncomingPaths error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => { var _a, _b; return (_b = (_a = instrumentation.getConfig()).ignoreIncomingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, request); }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreIncomingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {\n                    api_1.context.bind(api_1.context.active(), request);\n                    api_1.context.bind(api_1.context.active(), response);\n                    return original.apply(this, [event, ...args]);\n                });\n            }\n            const headers = request.headers;\n            const spanAttributes = utils.getIncomingRequestAttributes(request, {\n                component: component,\n                serverName: instrumentation.getConfig().serverName,\n                hookAttributes: instrumentation._callStartSpanHook(request, instrumentation.getConfig().startIncomingSpanHook),\n            });\n            const spanOptions = {\n                kind: api_1.SpanKind.SERVER,\n                attributes: spanAttributes,\n            };\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getIncomingRequestMetricAttributes(spanAttributes);\n            const ctx = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n            const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n            const rpcMetadata = {\n                type: core_2.RPCType.HTTP,\n                span,\n            };\n            return api_1.context.with((0, core_2.setRPCMetadata)(api_1.trace.setSpan(ctx, span), rpcMetadata), () => {\n                api_1.context.bind(api_1.context.active(), request);\n                api_1.context.bind(api_1.context.active(), response);\n                if (instrumentation.getConfig().requestHook) {\n                    instrumentation._callRequestHook(span, request);\n                }\n                if (instrumentation.getConfig().responseHook) {\n                    instrumentation._callResponseHook(span, response);\n                }\n                instrumentation._headerCapture.server.captureRequestHeaders(span, header => request.headers[header]);\n                // After 'error', no further events other than 'close' should be emitted.\n                let hasError = false;\n                response.on('close', () => {\n                    if (hasError) {\n                        return;\n                    }\n                    instrumentation._onServerResponseFinish(request, response, span, metricAttributes, startTime);\n                });\n                response.on(events_1.errorMonitor, (err) => {\n                    hasError = true;\n                    instrumentation._onServerResponseError(span, metricAttributes, startTime, err);\n                });\n                return (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [event, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n            });\n        };\n    }\n    _outgoingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function outgoingRequest(options, ...args) {\n            if (!utils.isValidOptionsType(options)) {\n                return original.apply(this, [options, ...args]);\n            }\n            const extraOptions = typeof args[0] === 'object' &&\n                (typeof options === 'string' || options instanceof url.URL)\n                ? args.shift()\n                : undefined;\n            const { origin, pathname, method, optionsParsed } = utils.getRequestInfo(options, extraOptions);\n            /**\n             * Node 8's https module directly call the http one so to avoid creating\n             * 2 span for the same request we need to check that the protocol is correct\n             * See: https://github.com/nodejs/node/blob/v8.17.0/lib/https.js#L245\n             */\n            if (component === 'http' &&\n                semver.lt(process.version, '9.0.0') &&\n                optionsParsed.protocol === 'https:') {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            if (utils.isIgnored(origin + pathname, instrumentation.getConfig().ignoreOutgoingUrls, (e) => instrumentation._diag.error('caught ignoreOutgoingUrls error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                    var _a, _b;\n                    return (_b = (_a = instrumentation\n                        .getConfig()).ignoreOutgoingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, optionsParsed);\n                }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreOutgoingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            const { hostname, port } = utils.extractHostnameAndPort(optionsParsed);\n            const attributes = utils.getOutgoingRequestAttributes(optionsParsed, {\n                component,\n                port,\n                hostname,\n                hookAttributes: instrumentation._callStartSpanHook(optionsParsed, instrumentation.getConfig().startOutgoingSpanHook),\n            });\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getOutgoingRequestMetricAttributes(attributes);\n            const spanOptions = {\n                kind: api_1.SpanKind.CLIENT,\n                attributes,\n            };\n            const span = instrumentation._startHttpSpan(method, spanOptions);\n            const parentContext = api_1.context.active();\n            const requestContext = api_1.trace.setSpan(parentContext, span);\n            if (!optionsParsed.headers) {\n                optionsParsed.headers = {};\n            }\n            else {\n                // Make a copy of the headers object to avoid mutating an object the\n                // caller might have a reference to.\n                optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n            }\n            api_1.propagation.inject(requestContext, optionsParsed.headers);\n            return api_1.context.with(requestContext, () => {\n                /*\n                 * The response callback is registered before ClientRequest is bound,\n                 * thus it is needed to bind it before the function call.\n                 */\n                const cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    args[args.length - 1] = api_1.context.bind(parentContext, cb);\n                }\n                const request = (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [optionsParsed, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n                instrumentation._diag.debug(`${component} instrumentation outgoingRequest`);\n                api_1.context.bind(parentContext, request);\n                return instrumentation._traceClientRequest(request, span, startTime, metricAttributes);\n            });\n        };\n    }\n    _onServerResponseFinish(request, response, span, metricAttributes, startTime) {\n        const attributes = utils.getIncomingRequestAttributesOnResponse(request, response);\n        metricAttributes = Object.assign(metricAttributes, utils.getIncomingRequestMetricAttributesOnResponse(attributes));\n        this._headerCapture.server.captureResponseHeaders(span, header => response.getHeader(header));\n        span.setAttributes(attributes).setStatus({\n            code: utils.parseResponseStatus(api_1.SpanKind.SERVER, response.statusCode),\n        });\n        const route = attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n        if (route) {\n            span.updateName(`${request.method || 'GET'} ${route}`);\n        }\n        if (this.getConfig().applyCustomAttributesOnSpan) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n        }\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _onServerResponseError(span, metricAttributes, startTime, error) {\n        utils.setSpanWithError(span, error);\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _startHttpSpan(name, options, ctx = api_1.context.active()) {\n        /*\n         * If a parent is required but not present, we use a `NoopSpan` to still\n         * propagate context without recording it.\n         */\n        const requireParent = options.kind === api_1.SpanKind.CLIENT\n            ? this.getConfig().requireParentforOutgoingSpans\n            : this.getConfig().requireParentforIncomingSpans;\n        let span;\n        const currentSpan = api_1.trace.getSpan(ctx);\n        if (requireParent === true && currentSpan === undefined) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else if (requireParent === true && (currentSpan === null || currentSpan === void 0 ? void 0 : currentSpan.spanContext().isRemote)) {\n            span = currentSpan;\n        }\n        else {\n            span = this.tracer.startSpan(name, options, ctx);\n        }\n        this._spanNotEnded.add(span);\n        return span;\n    }\n    _closeHttpSpan(span, spanKind, startTime, metricAttributes) {\n        if (!this._spanNotEnded.has(span)) {\n            return;\n        }\n        span.end();\n        this._spanNotEnded.delete(span);\n        // Record metrics\n        const duration = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)()));\n        if (spanKind === api_1.SpanKind.SERVER) {\n            this._httpServerDurationHistogram.record(duration, metricAttributes);\n        }\n        else if (spanKind === api_1.SpanKind.CLIENT) {\n            this._httpClientDurationHistogram.record(duration, metricAttributes);\n        }\n    }\n    _callResponseHook(span, response) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().responseHook(span, response), () => { }, true);\n    }\n    _callRequestHook(span, request) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().requestHook(span, request), () => { }, true);\n    }\n    _callStartSpanHook(request, hookFunc) {\n        if (typeof hookFunc === 'function') {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => hookFunc(request), () => { }, true);\n        }\n    }\n    _createHeaderCapture() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const config = this.getConfig();\n        return {\n            client: {\n                captureRequestHeaders: utils.headerCapture('request', (_c = (_b = (_a = config.headersToSpanAttributes) === null || _a === void 0 ? void 0 : _a.client) === null || _b === void 0 ? void 0 : _b.requestHeaders) !== null && _c !== void 0 ? _c : []),\n                captureResponseHeaders: utils.headerCapture('response', (_f = (_e = (_d = config.headersToSpanAttributes) === null || _d === void 0 ? void 0 : _d.client) === null || _e === void 0 ? void 0 : _e.responseHeaders) !== null && _f !== void 0 ? _f : []),\n            },\n            server: {\n                captureRequestHeaders: utils.headerCapture('request', (_j = (_h = (_g = config.headersToSpanAttributes) === null || _g === void 0 ? void 0 : _g.server) === null || _h === void 0 ? void 0 : _h.requestHeaders) !== null && _j !== void 0 ? _j : []),\n                captureResponseHeaders: utils.headerCapture('response', (_m = (_l = (_k = config.headersToSpanAttributes) === null || _k === void 0 ? void 0 : _k.server) === null || _l === void 0 ? void 0 : _l.responseHeaders) !== null && _m !== void 0 ? _m : []),\n            },\n        };\n    }\n}\nexports.HttpInstrumentation = HttpInstrumentation;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setSpanWithError = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setAttributesFromHttpKind = exports.satisfiesPattern = exports.parseResponseStatus = exports.isValidOptionsType = exports.isIgnored = exports.isCompressed = exports.headerCapture = exports.getRequestInfo = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributesOnResponse = exports.getOutgoingRequestAttributes = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestAttributes = exports.getAbsoluteUrl = exports.extractHostnameAndPort = exports.HttpInstrumentation = void 0;\nvar http_1 = __webpack_require__(/*! ./http */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\");\nObject.defineProperty(exports, \"HttpInstrumentation\", ({ enumerable: true, get: function () { return http_1.HttpInstrumentation; } }));\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nObject.defineProperty(exports, \"extractHostnameAndPort\", ({ enumerable: true, get: function () { return utils_1.extractHostnameAndPort; } }));\nObject.defineProperty(exports, \"getAbsoluteUrl\", ({ enumerable: true, get: function () { return utils_1.getAbsoluteUrl; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getRequestInfo\", ({ enumerable: true, get: function () { return utils_1.getRequestInfo; } }));\nObject.defineProperty(exports, \"headerCapture\", ({ enumerable: true, get: function () { return utils_1.headerCapture; } }));\nObject.defineProperty(exports, \"isCompressed\", ({ enumerable: true, get: function () { return utils_1.isCompressed; } }));\nObject.defineProperty(exports, \"isIgnored\", ({ enumerable: true, get: function () { return utils_1.isIgnored; } }));\nObject.defineProperty(exports, \"isValidOptionsType\", ({ enumerable: true, get: function () { return utils_1.isValidOptionsType; } }));\nObject.defineProperty(exports, \"parseResponseStatus\", ({ enumerable: true, get: function () { return utils_1.parseResponseStatus; } }));\nObject.defineProperty(exports, \"satisfiesPattern\", ({ enumerable: true, get: function () { return utils_1.satisfiesPattern; } }));\nObject.defineProperty(exports, \"setAttributesFromHttpKind\", ({ enumerable: true, get: function () { return utils_1.setAttributesFromHttpKind; } }));\nObject.defineProperty(exports, \"setRequestContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setRequestContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setResponseContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setResponseContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setSpanWithError\", ({ enumerable: true, get: function () { return utils_1.setSpanWithError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcseUNBQXlDLEdBQUcsd0NBQXdDLEdBQUcsaUNBQWlDLEdBQUcsd0JBQXdCLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsaUJBQWlCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCLEdBQUcsc0JBQXNCLEdBQUcsb0RBQW9ELEdBQUcsMENBQTBDLEdBQUcsOENBQThDLEdBQUcsb0NBQW9DLEdBQUcsb0RBQW9ELEdBQUcsMENBQTBDLEdBQUcsOENBQThDLEdBQUcsb0NBQW9DLEdBQUcsc0JBQXNCLEdBQUcsOEJBQThCLEdBQUcsMkJBQTJCO0FBQ3J4QixhQUFhLG1CQUFPLENBQUMsNExBQVE7QUFDN0IsdURBQXNELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ3BJLGNBQWMsbUJBQU8sQ0FBQyw4TEFBUztBQUMvQiwwREFBeUQsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDM0ksa0RBQWlELEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQzNILGdFQUErRCxFQUFFLHFDQUFxQyxnREFBZ0QsRUFBQztBQUN2SiwwRUFBeUUsRUFBRSxxQ0FBcUMsMERBQTBELEVBQUM7QUFDM0ssc0VBQXFFLEVBQUUscUNBQXFDLHNEQUFzRCxFQUFDO0FBQ25LLGdGQUErRSxFQUFFLHFDQUFxQyxnRUFBZ0UsRUFBQztBQUN2TCxnRUFBK0QsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDdkosMEVBQXlFLEVBQUUscUNBQXFDLDBEQUEwRCxFQUFDO0FBQzNLLHNFQUFxRSxFQUFFLHFDQUFxQyxzREFBc0QsRUFBQztBQUNuSyxnRkFBK0UsRUFBRSxxQ0FBcUMsZ0VBQWdFLEVBQUM7QUFDdkwsa0RBQWlELEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQzNILGlEQUFnRCxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN6SCxnREFBK0MsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdkgsNkNBQTRDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2pILHNEQUFxRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNuSSx1REFBc0QsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDckksb0RBQW1ELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQy9ILDZEQUE0RCxFQUFFLHFDQUFxQyw2Q0FBNkMsRUFBQztBQUNqSixvRUFBbUUsRUFBRSxxQ0FBcUMsb0RBQW9ELEVBQUM7QUFDL0oscUVBQW9FLEVBQUUscUNBQXFDLHFEQUFxRCxFQUFDO0FBQ2pLLG9EQUFtRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMvSCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWh0dHBAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2luZGV4LmpzPzdiYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRTcGFuV2l0aEVycm9yID0gZXhwb3J0cy5zZXRSZXNwb25zZUNvbnRlbnRMZW5ndGhBdHRyaWJ1dGUgPSBleHBvcnRzLnNldFJlcXVlc3RDb250ZW50TGVuZ3RoQXR0cmlidXRlID0gZXhwb3J0cy5zZXRBdHRyaWJ1dGVzRnJvbUh0dHBLaW5kID0gZXhwb3J0cy5zYXRpc2ZpZXNQYXR0ZXJuID0gZXhwb3J0cy5wYXJzZVJlc3BvbnNlU3RhdHVzID0gZXhwb3J0cy5pc1ZhbGlkT3B0aW9uc1R5cGUgPSBleHBvcnRzLmlzSWdub3JlZCA9IGV4cG9ydHMuaXNDb21wcmVzc2VkID0gZXhwb3J0cy5oZWFkZXJDYXB0dXJlID0gZXhwb3J0cy5nZXRSZXF1ZXN0SW5mbyA9IGV4cG9ydHMuZ2V0T3V0Z29pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc09uUmVzcG9uc2UgPSBleHBvcnRzLmdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXMgPSBleHBvcnRzLmdldE91dGdvaW5nUmVxdWVzdEF0dHJpYnV0ZXNPblJlc3BvbnNlID0gZXhwb3J0cy5nZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzID0gZXhwb3J0cy5nZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzT25SZXNwb25zZSA9IGV4cG9ydHMuZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlcyA9IGV4cG9ydHMuZ2V0SW5jb21pbmdSZXF1ZXN0QXR0cmlidXRlc09uUmVzcG9uc2UgPSBleHBvcnRzLmdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXMgPSBleHBvcnRzLmdldEFic29sdXRlVXJsID0gZXhwb3J0cy5leHRyYWN0SG9zdG5hbWVBbmRQb3J0ID0gZXhwb3J0cy5IdHRwSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGh0dHBfMSA9IHJlcXVpcmUoXCIuL2h0dHBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJIdHRwSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBodHRwXzEuSHR0cEluc3RydW1lbnRhdGlvbjsgfSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleHRyYWN0SG9zdG5hbWVBbmRQb3J0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmV4dHJhY3RIb3N0bmFtZUFuZFBvcnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRBYnNvbHV0ZVVybFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5nZXRBYnNvbHV0ZVVybDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0SW5jb21pbmdSZXF1ZXN0QXR0cmlidXRlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXNPblJlc3BvbnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmdldEluY29taW5nUmVxdWVzdEF0dHJpYnV0ZXNPblJlc3BvbnNlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5nZXRJbmNvbWluZ1JlcXVlc3RNZXRyaWNBdHRyaWJ1dGVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc09uUmVzcG9uc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0SW5jb21pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlc09uUmVzcG9uc2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmdldE91dGdvaW5nUmVxdWVzdEF0dHJpYnV0ZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5nZXRPdXRnb2luZ1JlcXVlc3RBdHRyaWJ1dGVzT25SZXNwb25zZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0T3V0Z29pbmdSZXF1ZXN0TWV0cmljQXR0cmlidXRlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXNPblJlc3BvbnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmdldE91dGdvaW5nUmVxdWVzdE1ldHJpY0F0dHJpYnV0ZXNPblJlc3BvbnNlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UmVxdWVzdEluZm9cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZ2V0UmVxdWVzdEluZm87IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJoZWFkZXJDYXB0dXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmhlYWRlckNhcHR1cmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NvbXByZXNzZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuaXNDb21wcmVzc2VkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJZ25vcmVkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLmlzSWdub3JlZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVmFsaWRPcHRpb25zVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5pc1ZhbGlkT3B0aW9uc1R5cGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVJlc3BvbnNlU3RhdHVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnBhcnNlUmVzcG9uc2VTdGF0dXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzYXRpc2ZpZXNQYXR0ZXJuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnNhdGlzZmllc1BhdHRlcm47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRBdHRyaWJ1dGVzRnJvbUh0dHBLaW5kXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnNldEF0dHJpYnV0ZXNGcm9tSHR0cEtpbmQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRSZXF1ZXN0Q29udGVudExlbmd0aEF0dHJpYnV0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5zZXRSZXF1ZXN0Q29udGVudExlbmd0aEF0dHJpYnV0ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNldFJlc3BvbnNlQ29udGVudExlbmd0aEF0dHJpYnV0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5zZXRSZXNwb25zZUNvbnRlbnRMZW5ndGhBdHRyaWJ1dGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRTcGFuV2l0aEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnNldFNwYW5XaXRoRXJyb3I7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.headerCapture = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributes = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestAttributesOnResponse = exports.setAttributesFromHttpKind = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributes = exports.extractHostnameAndPort = exports.isValidOptionsType = exports.getRequestInfo = exports.isCompressed = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setSpanWithError = exports.isIgnored = exports.satisfiesPattern = exports.parseResponseStatus = exports.getAbsoluteUrl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\");\n/**\n * Get an absolute url\n */\nconst getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:') => {\n    const reqUrlObject = requestUrl || {};\n    const protocol = reqUrlObject.protocol || fallbackProtocol;\n    const port = (reqUrlObject.port || '').toString();\n    const path = reqUrlObject.path || '/';\n    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n    // if there is no port in host and there is a port\n    // it should be displayed if it's not 80 and 443 (default ports)\n    if (host.indexOf(':') === -1 &&\n        port &&\n        port !== '80' &&\n        port !== '443') {\n        host += `:${port}`;\n    }\n    return `${protocol}//${host}${path}`;\n};\nexports.getAbsoluteUrl = getAbsoluteUrl;\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nconst parseResponseStatus = (kind, statusCode) => {\n    const upperBound = kind === api_1.SpanKind.CLIENT ? 400 : 500;\n    // 1xx, 2xx, 3xx are OK on client and server\n    // 4xx is OK on server\n    if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n        return api_1.SpanStatusCode.UNSET;\n    }\n    // All other codes are error\n    return api_1.SpanStatusCode.ERROR;\n};\nexports.parseResponseStatus = parseResponseStatus;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\nexports.satisfiesPattern = satisfiesPattern;\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isIgnored = (constant, list, onException) => {\n    if (!list) {\n        // No ignored urls - trace everything\n        return false;\n    }\n    // Try/catch outside the loop for failing fast\n    try {\n        for (const pattern of list) {\n            if ((0, exports.satisfiesPattern)(constant, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        if (onException) {\n            onException(e);\n        }\n    }\n    return false;\n};\nexports.isIgnored = isIgnored;\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n */\nconst setSpanWithError = (span, error) => {\n    const message = error.message;\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_NAME, error.name);\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE, message);\n    span.setStatus({ code: api_1.SpanStatusCode.ERROR, message });\n    span.recordException(error);\n};\nexports.setSpanWithError = setSpanWithError;\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setRequestContentLengthAttribute = (request, attributes) => {\n    const length = getContentLength(request.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(request.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setRequestContentLengthAttribute = setRequestContentLengthAttribute;\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setResponseContentLengthAttribute = (response, attributes) => {\n    const length = getContentLength(response.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(response.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setResponseContentLengthAttribute = setResponseContentLengthAttribute;\nfunction getContentLength(headers) {\n    const contentLengthHeader = headers['content-length'];\n    if (contentLengthHeader === undefined)\n        return null;\n    const contentLength = parseInt(contentLengthHeader, 10);\n    if (isNaN(contentLength))\n        return null;\n    return contentLength;\n}\nconst isCompressed = (headers) => {\n    const encoding = headers['content-encoding'];\n    return !!encoding && encoding !== 'identity';\n};\nexports.isCompressed = isCompressed;\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (options, extraOptions) => {\n    let pathname = '/';\n    let origin = '';\n    let optionsParsed;\n    if (typeof options === 'string') {\n        optionsParsed = url.parse(options);\n        pathname = optionsParsed.pathname || '/';\n        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else if (options instanceof url.URL) {\n        optionsParsed = {\n            protocol: options.protocol,\n            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')\n                ? options.hostname.slice(1, -1)\n                : options.hostname,\n            path: `${options.pathname || ''}${options.search || ''}`,\n        };\n        if (options.port !== '') {\n            optionsParsed.port = Number(options.port);\n        }\n        if (options.username || options.password) {\n            optionsParsed.auth = `${options.username}:${options.password}`;\n        }\n        pathname = options.pathname;\n        origin = options.origin;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else {\n        optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n        pathname = options.pathname;\n        if (!pathname && optionsParsed.path) {\n            pathname = url.parse(optionsParsed.path).pathname || '/';\n        }\n        const hostname = optionsParsed.host ||\n            (optionsParsed.port != null\n                ? `${optionsParsed.hostname}${optionsParsed.port}`\n                : optionsParsed.hostname);\n        origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n    }\n    // some packages return method in lowercase..\n    // ensure upperCase for consistency\n    const method = optionsParsed.method\n        ? optionsParsed.method.toUpperCase()\n        : 'GET';\n    return { origin, pathname, method, optionsParsed };\n};\nexports.getRequestInfo = getRequestInfo;\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nconst isValidOptionsType = (options) => {\n    if (!options) {\n        return false;\n    }\n    const type = typeof options;\n    return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\nexports.isValidOptionsType = isValidOptionsType;\nconst extractHostnameAndPort = (requestOptions) => {\n    var _a;\n    if (requestOptions.hostname && requestOptions.port) {\n        return { hostname: requestOptions.hostname, port: requestOptions.port };\n    }\n    const matches = ((_a = requestOptions.host) === null || _a === void 0 ? void 0 : _a.match(/^([^:/ ]+)(:\\d{1,5})?/)) || null;\n    const hostname = requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n    let port = requestOptions.port;\n    if (!port) {\n        if (matches && matches[2]) {\n            // remove the leading \":\". The extracted port would be something like \":8080\"\n            port = matches[2].substring(1);\n        }\n        else {\n            port = requestOptions.protocol === 'https:' ? '443' : '80';\n        }\n    }\n    return { hostname, port };\n};\nexports.extractHostnameAndPort = extractHostnameAndPort;\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributes = (requestOptions, options) => {\n    var _a;\n    const hostname = options.hostname;\n    const port = options.port;\n    const requestMethod = requestOptions.method;\n    const method = requestMethod ? requestMethod.toUpperCase() : 'GET';\n    const headers = requestOptions.headers || {};\n    const userAgent = headers['user-agent'];\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestOptions, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_TARGET]: requestOptions.path || '/',\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: (_a = headers.host) !== null && _a !== void 0 ? _a : `${hostname}:${port}`,\n    };\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getOutgoingRequestAttributes = getOutgoingRequestAttributes;\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME];\n    //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributes = getOutgoingRequestMetricAttributes;\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nconst setAttributesFromHttpKind = (kind, attributes) => {\n    if (kind) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = kind;\n        if (kind.toUpperCase() !== 'QUIC') {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_TCP;\n        }\n        else {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_UDP;\n        }\n    }\n};\nexports.setAttributesFromHttpKind = setAttributesFromHttpKind;\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {{ hostname: string }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributesOnResponse = (response) => {\n    const { statusCode, statusMessage, httpVersion, socket } = response;\n    const attributes = {};\n    if (socket) {\n        const { remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    (0, exports.setResponseContentLengthAttribute)(response, attributes);\n    if (statusCode) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n        attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    }\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return attributes;\n};\nexports.getOutgoingRequestAttributesOnResponse = getOutgoingRequestAttributesOnResponse;\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributesOnResponse = getOutgoingRequestMetricAttributesOnResponse;\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestAttributes = (request, options) => {\n    const headers = request.headers;\n    const userAgent = headers['user-agent'];\n    const ips = headers['x-forwarded-for'];\n    const method = request.method || 'GET';\n    const httpVersion = request.httpVersion;\n    const requestUrl = request.url ? url.parse(request.url) : null;\n    const host = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.host) || headers.host;\n    const hostname = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.hostname) ||\n        (host === null || host === void 0 ? void 0 : host.replace(/^(.*)(:[0-9]{1,5})/, '$1')) ||\n        'localhost';\n    const serverName = options.serverName;\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestUrl, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: host,\n        [semantic_conventions_1.SEMATTRS_NET_HOST_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_SCHEME]: options.component,\n    };\n    if (typeof ips === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_CLIENT_IP] = ips.split(',')[0];\n    }\n    if (typeof serverName === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_SERVER_NAME] = serverName;\n    }\n    if (requestUrl) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_TARGET] = requestUrl.path || '/';\n    }\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    (0, exports.setRequestContentLengthAttribute)(request, attributes);\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getIncomingRequestAttributes = getIncomingRequestAttributes;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributes = getIncomingRequestMetricAttributes;\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nconst getIncomingRequestAttributesOnResponse = (request, response) => {\n    // take socket from the request,\n    // since it may be detached from the response object in keep-alive mode\n    const { socket } = request;\n    const { statusCode, statusMessage } = response;\n    const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n    const attributes = {};\n    if (socket) {\n        const { localAddress, localPort, remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_IP] = localAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] = localPort;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n    attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = rpcMetadata.route;\n    }\n    return attributes;\n};\nexports.getIncomingRequestAttributesOnResponse = getIncomingRequestAttributesOnResponse;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT];\n    if (spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributesOnResponse = getIncomingRequestMetricAttributesOnResponse;\nfunction headerCapture(type, headers) {\n    const normalizedHeaders = new Map();\n    for (let i = 0, len = headers.length; i < len; i++) {\n        const capturedHeader = headers[i].toLowerCase();\n        normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n    }\n    return (span, getHeader) => {\n        for (const capturedHeader of normalizedHeaders.keys()) {\n            const value = getHeader(capturedHeader);\n            if (value === undefined) {\n                continue;\n            }\n            const normalizedHeader = normalizedHeaders.get(capturedHeader);\n            const key = `http.${type}.header.${normalizedHeader}`;\n            if (typeof value === 'string') {\n                span.setAttribute(key, [value]);\n            }\n            else if (Array.isArray(value)) {\n                span.setAttribute(key, value);\n            }\n            else {\n                span.setAttribute(key, [value]);\n            }\n        }\n    };\n}\nexports.headerCapture = headerCapture;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.53.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy92ZXJzaW9uLmpzPzc4Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlZFUlNJT04gPSAnMC41My4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_ERROR_NAME\"] = \"http.error_name\";\n    AttributeNames[\"HTTP_ERROR_MESSAGE\"] = \"http.error_message\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/Zjk3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vdHJhY2Uvc2VtYW50aWNfY29udmVudGlvbnMvaHR0cC5tZFxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJIVFRQX0VSUk9SX05BTUVcIl0gPSBcImh0dHAuZXJyb3JfbmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSFRUUF9FUlJPUl9NRVNTQUdFXCJdID0gXCJodHRwLmVycm9yX21lc3NhZ2VcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhUVFBfU1RBVFVTX1RFWFRcIl0gPSBcImh0dHAuc3RhdHVzX3RleHRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst semver = __webpack_require__(/*! semver */ \"(rsc)/../../node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core_2 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/**\n * Http instrumentation instrumentation for Opentelemetry\n */\nclass HttpInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-http', version_1.VERSION, config);\n        /** keep track on spans not ended */\n        this._spanNotEnded = new WeakSet();\n        this._headerCapture = this._createHeaderCapture();\n    }\n    _updateMetricInstruments() {\n        this._httpServerDurationHistogram = this.meter.createHistogram('http.server.duration', {\n            description: 'Measures the duration of inbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._httpClientDurationHistogram = this.meter.createHistogram('http.client.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n    }\n    setConfig(config = {}) {\n        super.setConfig(config);\n        this._headerCapture = this._createHeaderCapture();\n    }\n    init() {\n        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n    }\n    _getHttpInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction('http'));\n                this._wrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('http'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    _getHttpsInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports) => {\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchHttpsOutgoingRequestFunction('https'));\n                this._wrap(moduleExports, 'get', this._getPatchHttpsOutgoingGetFunction(patchedRequest));\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('https'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    /**\n     * Creates spans for incoming requests, restoring spans' context if applied.\n     */\n    _getPatchIncomingRequestFunction(component) {\n        return (original) => {\n            return this._incomingRequestFunction(component, original);\n        };\n    }\n    /**\n     * Creates spans for outgoing requests, sending spans' context for distributed\n     * tracing.\n     */\n    _getPatchOutgoingRequestFunction(component) {\n        return (original) => {\n            return this._outgoingRequestFunction(component, original);\n        };\n    }\n    _getPatchOutgoingGetFunction(clientRequest) {\n        return (_original) => {\n            // Re-implement http.get. This needs to be done (instead of using\n            // getPatchOutgoingRequestFunction to patch it) because we need to\n            // set the trace context header before the returned http.ClientRequest is\n            // ended. The Node.js docs state that the only differences between\n            // request and get are that (1) get defaults to the HTTP GET method and\n            // (2) the returned request object is ended immediately. The former is\n            // already true (at least in supported Node versions up to v10), so we\n            // simply follow the latter. Ref:\n            // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n            // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n            return function outgoingGetRequest(options, ...args) {\n                const req = clientRequest(options, ...args);\n                req.end();\n                return req;\n            };\n        };\n    }\n    /** Patches HTTPS outgoing requests */\n    _getPatchHttpsOutgoingRequestFunction(component) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                var _a;\n                // Makes sure options will have default HTTPS parameters\n                if (component === 'https' &&\n                    typeof options === 'object' &&\n                    ((_a = options === null || options === void 0 ? void 0 : options.constructor) === null || _a === void 0 ? void 0 : _a.name) !== 'URL') {\n                    options = Object.assign({}, options);\n                    instrumentation._setDefaultOptions(options);\n                }\n                return instrumentation._getPatchOutgoingRequestFunction(component)(original)(options, ...args);\n            };\n        };\n    }\n    _setDefaultOptions(options) {\n        options.protocol = options.protocol || 'https:';\n        options.port = options.port || 443;\n    }\n    /** Patches HTTPS outgoing get requests */\n    _getPatchHttpsOutgoingGetFunction(clientRequest) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            options, ...args) {\n                return instrumentation._getPatchOutgoingGetFunction(clientRequest)(original)(options, ...args);\n            };\n        };\n    }\n    /**\n     * Attach event listeners to a client request to end span and add span attributes.\n     *\n     * @param request The original request object.\n     * @param span representing the current operation\n     * @param startTime representing the start time of the request to calculate duration in Metric\n     * @param metricAttributes metric attributes\n     */\n    _traceClientRequest(request, span, startTime, metricAttributes) {\n        if (this.getConfig().requestHook) {\n            this._callRequestHook(span, request);\n        }\n        /**\n         * Determines if the request has errored or the response has ended/errored.\n         */\n        let responseFinished = false;\n        /*\n         * User 'response' event listeners can be added before our listener,\n         * force our listener to be the first, so response emitter is bound\n         * before any user listeners are added to it.\n         */\n        request.prependListener('response', (response) => {\n            this._diag.debug('outgoingRequest on response()');\n            if (request.listenerCount('response') <= 1) {\n                response.resume();\n            }\n            const responseAttributes = utils.getOutgoingRequestAttributesOnResponse(response);\n            span.setAttributes(responseAttributes);\n            metricAttributes = Object.assign(metricAttributes, utils.getOutgoingRequestMetricAttributesOnResponse(responseAttributes));\n            if (this.getConfig().responseHook) {\n                this._callResponseHook(span, response);\n            }\n            this._headerCapture.client.captureRequestHeaders(span, header => request.getHeader(header));\n            this._headerCapture.client.captureResponseHeaders(span, header => response.headers[header]);\n            api_1.context.bind(api_1.context.active(), response);\n            const endHandler = () => {\n                this._diag.debug('outgoingRequest on end()');\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                let status;\n                if (response.aborted && !response.complete) {\n                    status = { code: api_1.SpanStatusCode.ERROR };\n                }\n                else {\n                    status = {\n                        code: utils.parseResponseStatus(api_1.SpanKind.CLIENT, response.statusCode),\n                    };\n                }\n                span.setStatus(status);\n                if (this.getConfig().applyCustomAttributesOnSpan) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n                }\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            };\n            response.on('end', endHandler);\n            // See https://github.com/open-telemetry/opentelemetry-js/pull/3625#issuecomment-1475673533\n            if (semver.lt(process.version, '16.0.0')) {\n                response.on('close', endHandler);\n            }\n            response.on(events_1.errorMonitor, (error) => {\n                this._diag.debug('outgoingRequest on error()', error);\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                utils.setSpanWithError(span, error);\n                span.setStatus({\n                    code: api_1.SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n            });\n        });\n        request.on('close', () => {\n            this._diag.debug('outgoingRequest on request close()');\n            if (request.aborted || responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        request.on(events_1.errorMonitor, (error) => {\n            this._diag.debug('outgoingRequest on request error()', error);\n            if (responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            utils.setSpanWithError(span, error);\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n        });\n        this._diag.debug('http.ClientRequest return request');\n        return request;\n    }\n    _incomingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function incomingRequest(event, ...args) {\n            // Only traces request events\n            if (event !== 'request') {\n                return original.apply(this, [event, ...args]);\n            }\n            const request = args[0];\n            const response = args[1];\n            const pathname = request.url\n                ? url.parse(request.url).pathname || '/'\n                : '/';\n            const method = request.method || 'GET';\n            instrumentation._diag.debug(`${component} instrumentation incomingRequest`);\n            if (utils.isIgnored(pathname, instrumentation.getConfig().ignoreIncomingPaths, (e) => instrumentation._diag.error('caught ignoreIncomingPaths error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => { var _a, _b; return (_b = (_a = instrumentation.getConfig()).ignoreIncomingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, request); }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreIncomingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {\n                    api_1.context.bind(api_1.context.active(), request);\n                    api_1.context.bind(api_1.context.active(), response);\n                    return original.apply(this, [event, ...args]);\n                });\n            }\n            const headers = request.headers;\n            const spanAttributes = utils.getIncomingRequestAttributes(request, {\n                component: component,\n                serverName: instrumentation.getConfig().serverName,\n                hookAttributes: instrumentation._callStartSpanHook(request, instrumentation.getConfig().startIncomingSpanHook),\n            });\n            const spanOptions = {\n                kind: api_1.SpanKind.SERVER,\n                attributes: spanAttributes,\n            };\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getIncomingRequestMetricAttributes(spanAttributes);\n            const ctx = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n            const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n            const rpcMetadata = {\n                type: core_2.RPCType.HTTP,\n                span,\n            };\n            return api_1.context.with((0, core_2.setRPCMetadata)(api_1.trace.setSpan(ctx, span), rpcMetadata), () => {\n                api_1.context.bind(api_1.context.active(), request);\n                api_1.context.bind(api_1.context.active(), response);\n                if (instrumentation.getConfig().requestHook) {\n                    instrumentation._callRequestHook(span, request);\n                }\n                if (instrumentation.getConfig().responseHook) {\n                    instrumentation._callResponseHook(span, response);\n                }\n                instrumentation._headerCapture.server.captureRequestHeaders(span, header => request.headers[header]);\n                // After 'error', no further events other than 'close' should be emitted.\n                let hasError = false;\n                response.on('close', () => {\n                    if (hasError) {\n                        return;\n                    }\n                    instrumentation._onServerResponseFinish(request, response, span, metricAttributes, startTime);\n                });\n                response.on(events_1.errorMonitor, (err) => {\n                    hasError = true;\n                    instrumentation._onServerResponseError(span, metricAttributes, startTime, err);\n                });\n                return (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [event, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n            });\n        };\n    }\n    _outgoingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function outgoingRequest(options, ...args) {\n            if (!utils.isValidOptionsType(options)) {\n                return original.apply(this, [options, ...args]);\n            }\n            const extraOptions = typeof args[0] === 'object' &&\n                (typeof options === 'string' || options instanceof url.URL)\n                ? args.shift()\n                : undefined;\n            const { origin, pathname, method, optionsParsed } = utils.getRequestInfo(options, extraOptions);\n            /**\n             * Node 8's https module directly call the http one so to avoid creating\n             * 2 span for the same request we need to check that the protocol is correct\n             * See: https://github.com/nodejs/node/blob/v8.17.0/lib/https.js#L245\n             */\n            if (component === 'http' &&\n                semver.lt(process.version, '9.0.0') &&\n                optionsParsed.protocol === 'https:') {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            if (utils.isIgnored(origin + pathname, instrumentation.getConfig().ignoreOutgoingUrls, (e) => instrumentation._diag.error('caught ignoreOutgoingUrls error: ', e)) ||\n                (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                    var _a, _b;\n                    return (_b = (_a = instrumentation\n                        .getConfig()).ignoreOutgoingRequestHook) === null || _b === void 0 ? void 0 : _b.call(_a, optionsParsed);\n                }, (e) => {\n                    if (e != null) {\n                        instrumentation._diag.error('caught ignoreOutgoingRequestHook error: ', e);\n                    }\n                }, true)) {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            const { hostname, port } = utils.extractHostnameAndPort(optionsParsed);\n            const attributes = utils.getOutgoingRequestAttributes(optionsParsed, {\n                component,\n                port,\n                hostname,\n                hookAttributes: instrumentation._callStartSpanHook(optionsParsed, instrumentation.getConfig().startOutgoingSpanHook),\n            });\n            const startTime = (0, core_1.hrTime)();\n            const metricAttributes = utils.getOutgoingRequestMetricAttributes(attributes);\n            const spanOptions = {\n                kind: api_1.SpanKind.CLIENT,\n                attributes,\n            };\n            const span = instrumentation._startHttpSpan(method, spanOptions);\n            const parentContext = api_1.context.active();\n            const requestContext = api_1.trace.setSpan(parentContext, span);\n            if (!optionsParsed.headers) {\n                optionsParsed.headers = {};\n            }\n            else {\n                // Make a copy of the headers object to avoid mutating an object the\n                // caller might have a reference to.\n                optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n            }\n            api_1.propagation.inject(requestContext, optionsParsed.headers);\n            return api_1.context.with(requestContext, () => {\n                /*\n                 * The response callback is registered before ClientRequest is bound,\n                 * thus it is needed to bind it before the function call.\n                 */\n                const cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    args[args.length - 1] = api_1.context.bind(parentContext, cb);\n                }\n                const request = (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [optionsParsed, ...args]), error => {\n                    if (error) {\n                        utils.setSpanWithError(span, error);\n                        instrumentation._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, metricAttributes);\n                        throw error;\n                    }\n                });\n                instrumentation._diag.debug(`${component} instrumentation outgoingRequest`);\n                api_1.context.bind(parentContext, request);\n                return instrumentation._traceClientRequest(request, span, startTime, metricAttributes);\n            });\n        };\n    }\n    _onServerResponseFinish(request, response, span, metricAttributes, startTime) {\n        const attributes = utils.getIncomingRequestAttributesOnResponse(request, response);\n        metricAttributes = Object.assign(metricAttributes, utils.getIncomingRequestMetricAttributesOnResponse(attributes));\n        this._headerCapture.server.captureResponseHeaders(span, header => response.getHeader(header));\n        span.setAttributes(attributes).setStatus({\n            code: utils.parseResponseStatus(api_1.SpanKind.SERVER, response.statusCode),\n        });\n        const route = attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n        if (route) {\n            span.updateName(`${request.method || 'GET'} ${route}`);\n        }\n        if (this.getConfig().applyCustomAttributesOnSpan) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n        }\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _onServerResponseError(span, metricAttributes, startTime, error) {\n        utils.setSpanWithError(span, error);\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, metricAttributes);\n    }\n    _startHttpSpan(name, options, ctx = api_1.context.active()) {\n        /*\n         * If a parent is required but not present, we use a `NoopSpan` to still\n         * propagate context without recording it.\n         */\n        const requireParent = options.kind === api_1.SpanKind.CLIENT\n            ? this.getConfig().requireParentforOutgoingSpans\n            : this.getConfig().requireParentforIncomingSpans;\n        let span;\n        const currentSpan = api_1.trace.getSpan(ctx);\n        if (requireParent === true && currentSpan === undefined) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else if (requireParent === true && (currentSpan === null || currentSpan === void 0 ? void 0 : currentSpan.spanContext().isRemote)) {\n            span = currentSpan;\n        }\n        else {\n            span = this.tracer.startSpan(name, options, ctx);\n        }\n        this._spanNotEnded.add(span);\n        return span;\n    }\n    _closeHttpSpan(span, spanKind, startTime, metricAttributes) {\n        if (!this._spanNotEnded.has(span)) {\n            return;\n        }\n        span.end();\n        this._spanNotEnded.delete(span);\n        // Record metrics\n        const duration = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)()));\n        if (spanKind === api_1.SpanKind.SERVER) {\n            this._httpServerDurationHistogram.record(duration, metricAttributes);\n        }\n        else if (spanKind === api_1.SpanKind.CLIENT) {\n            this._httpClientDurationHistogram.record(duration, metricAttributes);\n        }\n    }\n    _callResponseHook(span, response) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().responseHook(span, response), () => { }, true);\n    }\n    _callRequestHook(span, request) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().requestHook(span, request), () => { }, true);\n    }\n    _callStartSpanHook(request, hookFunc) {\n        if (typeof hookFunc === 'function') {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => hookFunc(request), () => { }, true);\n        }\n    }\n    _createHeaderCapture() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const config = this.getConfig();\n        return {\n            client: {\n                captureRequestHeaders: utils.headerCapture('request', (_c = (_b = (_a = config.headersToSpanAttributes) === null || _a === void 0 ? void 0 : _a.client) === null || _b === void 0 ? void 0 : _b.requestHeaders) !== null && _c !== void 0 ? _c : []),\n                captureResponseHeaders: utils.headerCapture('response', (_f = (_e = (_d = config.headersToSpanAttributes) === null || _d === void 0 ? void 0 : _d.client) === null || _e === void 0 ? void 0 : _e.responseHeaders) !== null && _f !== void 0 ? _f : []),\n            },\n            server: {\n                captureRequestHeaders: utils.headerCapture('request', (_j = (_h = (_g = config.headersToSpanAttributes) === null || _g === void 0 ? void 0 : _g.server) === null || _h === void 0 ? void 0 : _h.requestHeaders) !== null && _j !== void 0 ? _j : []),\n                captureResponseHeaders: utils.headerCapture('response', (_m = (_l = (_k = config.headersToSpanAttributes) === null || _k === void 0 ? void 0 : _k.server) === null || _l === void 0 ? void 0 : _l.responseHeaders) !== null && _m !== void 0 ? _m : []),\n            },\n        };\n    }\n}\nexports.HttpInstrumentation = HttpInstrumentation;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setSpanWithError = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setAttributesFromHttpKind = exports.satisfiesPattern = exports.parseResponseStatus = exports.isValidOptionsType = exports.isIgnored = exports.isCompressed = exports.headerCapture = exports.getRequestInfo = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributesOnResponse = exports.getOutgoingRequestAttributes = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestAttributes = exports.getAbsoluteUrl = exports.extractHostnameAndPort = exports.HttpInstrumentation = void 0;\nvar http_1 = __webpack_require__(/*! ./http */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\");\nObject.defineProperty(exports, \"HttpInstrumentation\", ({ enumerable: true, get: function () { return http_1.HttpInstrumentation; } }));\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\nObject.defineProperty(exports, \"extractHostnameAndPort\", ({ enumerable: true, get: function () { return utils_1.extractHostnameAndPort; } }));\nObject.defineProperty(exports, \"getAbsoluteUrl\", ({ enumerable: true, get: function () { return utils_1.getAbsoluteUrl; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getIncomingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getIncomingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributes\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributes; } }));\nObject.defineProperty(exports, \"getOutgoingRequestMetricAttributesOnResponse\", ({ enumerable: true, get: function () { return utils_1.getOutgoingRequestMetricAttributesOnResponse; } }));\nObject.defineProperty(exports, \"getRequestInfo\", ({ enumerable: true, get: function () { return utils_1.getRequestInfo; } }));\nObject.defineProperty(exports, \"headerCapture\", ({ enumerable: true, get: function () { return utils_1.headerCapture; } }));\nObject.defineProperty(exports, \"isCompressed\", ({ enumerable: true, get: function () { return utils_1.isCompressed; } }));\nObject.defineProperty(exports, \"isIgnored\", ({ enumerable: true, get: function () { return utils_1.isIgnored; } }));\nObject.defineProperty(exports, \"isValidOptionsType\", ({ enumerable: true, get: function () { return utils_1.isValidOptionsType; } }));\nObject.defineProperty(exports, \"parseResponseStatus\", ({ enumerable: true, get: function () { return utils_1.parseResponseStatus; } }));\nObject.defineProperty(exports, \"satisfiesPattern\", ({ enumerable: true, get: function () { return utils_1.satisfiesPattern; } }));\nObject.defineProperty(exports, \"setAttributesFromHttpKind\", ({ enumerable: true, get: function () { return utils_1.setAttributesFromHttpKind; } }));\nObject.defineProperty(exports, \"setRequestContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setRequestContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setResponseContentLengthAttribute\", ({ enumerable: true, get: function () { return utils_1.setResponseContentLengthAttribute; } }));\nObject.defineProperty(exports, \"setSpanWithError\", ({ enumerable: true, get: function () { return utils_1.setSpanWithError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.headerCapture = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributes = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestAttributesOnResponse = exports.setAttributesFromHttpKind = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributes = exports.extractHostnameAndPort = exports.isValidOptionsType = exports.getRequestInfo = exports.isCompressed = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setSpanWithError = exports.isIgnored = exports.satisfiesPattern = exports.parseResponseStatus = exports.getAbsoluteUrl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.27.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.26.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\");\n/**\n * Get an absolute url\n */\nconst getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:') => {\n    const reqUrlObject = requestUrl || {};\n    const protocol = reqUrlObject.protocol || fallbackProtocol;\n    const port = (reqUrlObject.port || '').toString();\n    const path = reqUrlObject.path || '/';\n    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n    // if there is no port in host and there is a port\n    // it should be displayed if it's not 80 and 443 (default ports)\n    if (host.indexOf(':') === -1 &&\n        port &&\n        port !== '80' &&\n        port !== '443') {\n        host += `:${port}`;\n    }\n    return `${protocol}//${host}${path}`;\n};\nexports.getAbsoluteUrl = getAbsoluteUrl;\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nconst parseResponseStatus = (kind, statusCode) => {\n    const upperBound = kind === api_1.SpanKind.CLIENT ? 400 : 500;\n    // 1xx, 2xx, 3xx are OK on client and server\n    // 4xx is OK on server\n    if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n        return api_1.SpanStatusCode.UNSET;\n    }\n    // All other codes are error\n    return api_1.SpanStatusCode.ERROR;\n};\nexports.parseResponseStatus = parseResponseStatus;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\nexports.satisfiesPattern = satisfiesPattern;\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isIgnored = (constant, list, onException) => {\n    if (!list) {\n        // No ignored urls - trace everything\n        return false;\n    }\n    // Try/catch outside the loop for failing fast\n    try {\n        for (const pattern of list) {\n            if ((0, exports.satisfiesPattern)(constant, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        if (onException) {\n            onException(e);\n        }\n    }\n    return false;\n};\nexports.isIgnored = isIgnored;\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n */\nconst setSpanWithError = (span, error) => {\n    const message = error.message;\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_NAME, error.name);\n    span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE, message);\n    span.setStatus({ code: api_1.SpanStatusCode.ERROR, message });\n    span.recordException(error);\n};\nexports.setSpanWithError = setSpanWithError;\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setRequestContentLengthAttribute = (request, attributes) => {\n    const length = getContentLength(request.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(request.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setRequestContentLengthAttribute = setRequestContentLengthAttribute;\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { SpanAttributes } SpanAttributes object to be modified\n */\nconst setResponseContentLengthAttribute = (response, attributes) => {\n    const length = getContentLength(response.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(response.headers)) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setResponseContentLengthAttribute = setResponseContentLengthAttribute;\nfunction getContentLength(headers) {\n    const contentLengthHeader = headers['content-length'];\n    if (contentLengthHeader === undefined)\n        return null;\n    const contentLength = parseInt(contentLengthHeader, 10);\n    if (isNaN(contentLength))\n        return null;\n    return contentLength;\n}\nconst isCompressed = (headers) => {\n    const encoding = headers['content-encoding'];\n    return !!encoding && encoding !== 'identity';\n};\nexports.isCompressed = isCompressed;\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (options, extraOptions) => {\n    let pathname = '/';\n    let origin = '';\n    let optionsParsed;\n    if (typeof options === 'string') {\n        optionsParsed = url.parse(options);\n        pathname = optionsParsed.pathname || '/';\n        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else if (options instanceof url.URL) {\n        optionsParsed = {\n            protocol: options.protocol,\n            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')\n                ? options.hostname.slice(1, -1)\n                : options.hostname,\n            path: `${options.pathname || ''}${options.search || ''}`,\n        };\n        if (options.port !== '') {\n            optionsParsed.port = Number(options.port);\n        }\n        if (options.username || options.password) {\n            optionsParsed.auth = `${options.username}:${options.password}`;\n        }\n        pathname = options.pathname;\n        origin = options.origin;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else {\n        optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n        pathname = options.pathname;\n        if (!pathname && optionsParsed.path) {\n            pathname = url.parse(optionsParsed.path).pathname || '/';\n        }\n        const hostname = optionsParsed.host ||\n            (optionsParsed.port != null\n                ? `${optionsParsed.hostname}${optionsParsed.port}`\n                : optionsParsed.hostname);\n        origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n    }\n    // some packages return method in lowercase..\n    // ensure upperCase for consistency\n    const method = optionsParsed.method\n        ? optionsParsed.method.toUpperCase()\n        : 'GET';\n    return { origin, pathname, method, optionsParsed };\n};\nexports.getRequestInfo = getRequestInfo;\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nconst isValidOptionsType = (options) => {\n    if (!options) {\n        return false;\n    }\n    const type = typeof options;\n    return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\nexports.isValidOptionsType = isValidOptionsType;\nconst extractHostnameAndPort = (requestOptions) => {\n    var _a;\n    if (requestOptions.hostname && requestOptions.port) {\n        return { hostname: requestOptions.hostname, port: requestOptions.port };\n    }\n    const matches = ((_a = requestOptions.host) === null || _a === void 0 ? void 0 : _a.match(/^([^:/ ]+)(:\\d{1,5})?/)) || null;\n    const hostname = requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n    let port = requestOptions.port;\n    if (!port) {\n        if (matches && matches[2]) {\n            // remove the leading \":\". The extracted port would be something like \":8080\"\n            port = matches[2].substring(1);\n        }\n        else {\n            port = requestOptions.protocol === 'https:' ? '443' : '80';\n        }\n    }\n    return { hostname, port };\n};\nexports.extractHostnameAndPort = extractHostnameAndPort;\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributes = (requestOptions, options) => {\n    var _a;\n    const hostname = options.hostname;\n    const port = options.port;\n    const requestMethod = requestOptions.method;\n    const method = requestMethod ? requestMethod.toUpperCase() : 'GET';\n    const headers = requestOptions.headers || {};\n    const userAgent = headers['user-agent'];\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestOptions, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_TARGET]: requestOptions.path || '/',\n        [semantic_conventions_1.SEMATTRS_NET_PEER_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: (_a = headers.host) !== null && _a !== void 0 ? _a : `${hostname}:${port}`,\n    };\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getOutgoingRequestAttributes = getOutgoingRequestAttributes;\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_NAME];\n    //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributes = getOutgoingRequestMetricAttributes;\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nconst setAttributesFromHttpKind = (kind, attributes) => {\n    if (kind) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = kind;\n        if (kind.toUpperCase() !== 'QUIC') {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_TCP;\n        }\n        else {\n            attributes[semantic_conventions_1.SEMATTRS_NET_TRANSPORT] = semantic_conventions_1.NETTRANSPORTVALUES_IP_UDP;\n        }\n    }\n};\nexports.setAttributesFromHttpKind = setAttributesFromHttpKind;\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {{ hostname: string }} options used to pass data needed to create attributes\n */\nconst getOutgoingRequestAttributesOnResponse = (response) => {\n    const { statusCode, statusMessage, httpVersion, socket } = response;\n    const attributes = {};\n    if (socket) {\n        const { remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    (0, exports.setResponseContentLengthAttribute)(response, attributes);\n    if (statusCode) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n        attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    }\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return attributes;\n};\nexports.getOutgoingRequestAttributesOnResponse = getOutgoingRequestAttributesOnResponse;\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributesOnResponse = getOutgoingRequestMetricAttributesOnResponse;\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: SpanAttributes }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestAttributes = (request, options) => {\n    const headers = request.headers;\n    const userAgent = headers['user-agent'];\n    const ips = headers['x-forwarded-for'];\n    const method = request.method || 'GET';\n    const httpVersion = request.httpVersion;\n    const requestUrl = request.url ? url.parse(request.url) : null;\n    const host = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.host) || headers.host;\n    const hostname = (requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.hostname) ||\n        (host === null || host === void 0 ? void 0 : host.replace(/^(.*)(:[0-9]{1,5})/, '$1')) ||\n        'localhost';\n    const serverName = options.serverName;\n    const attributes = {\n        [semantic_conventions_1.SEMATTRS_HTTP_URL]: (0, exports.getAbsoluteUrl)(requestUrl, headers, `${options.component}:`),\n        [semantic_conventions_1.SEMATTRS_HTTP_HOST]: host,\n        [semantic_conventions_1.SEMATTRS_NET_HOST_NAME]: hostname,\n        [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: method,\n        [semantic_conventions_1.SEMATTRS_HTTP_SCHEME]: options.component,\n    };\n    if (typeof ips === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_CLIENT_IP] = ips.split(',')[0];\n    }\n    if (typeof serverName === 'string') {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_SERVER_NAME] = serverName;\n    }\n    if (requestUrl) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_TARGET] = requestUrl.path || '/';\n    }\n    if (userAgent !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_USER_AGENT] = userAgent;\n    }\n    (0, exports.setRequestContentLengthAttribute)(request, attributes);\n    (0, exports.setAttributesFromHttpKind)(httpVersion, attributes);\n    return Object.assign(attributes, options.hookAttributes);\n};\nexports.getIncomingRequestAttributes = getIncomingRequestAttributes;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_SCHEME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_METHOD];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_NAME];\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_FLAVOR];\n    //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributes = getIncomingRequestMetricAttributes;\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nconst getIncomingRequestAttributesOnResponse = (request, response) => {\n    // take socket from the request,\n    // since it may be detached from the response object in keep-alive mode\n    const { socket } = request;\n    const { statusCode, statusMessage } = response;\n    const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n    const attributes = {};\n    if (socket) {\n        const { localAddress, localPort, remoteAddress, remotePort } = socket;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_IP] = localAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] = localPort;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_IP] = remoteAddress;\n        attributes[semantic_conventions_1.SEMATTRS_NET_PEER_PORT] = remotePort;\n    }\n    attributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n    attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n        attributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = rpcMetadata.route;\n    }\n    return attributes;\n};\nexports.getIncomingRequestAttributesOnResponse = getIncomingRequestAttributesOnResponse;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {SpanAttributes} spanAttributes the span attributes\n */\nconst getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_STATUS_CODE];\n    metricAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT] =\n        spanAttributes[semantic_conventions_1.SEMATTRS_NET_HOST_PORT];\n    if (spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.SEMATTRS_HTTP_ROUTE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributesOnResponse = getIncomingRequestMetricAttributesOnResponse;\nfunction headerCapture(type, headers) {\n    const normalizedHeaders = new Map();\n    for (let i = 0, len = headers.length; i < len; i++) {\n        const capturedHeader = headers[i].toLowerCase();\n        normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n    }\n    return (span, getHeader) => {\n        for (const capturedHeader of normalizedHeaders.keys()) {\n            const value = getHeader(capturedHeader);\n            if (value === undefined) {\n                continue;\n            }\n            const normalizedHeader = normalizedHeaders.get(capturedHeader);\n            const key = `http.${type}.header.${normalizedHeader}`;\n            if (typeof value === 'string') {\n                span.setAttribute(key, [value]);\n            }\n            else if (Array.isArray(value)) {\n                span.setAttribute(key, value);\n            }\n            else {\n                span.setAttribute(key, [value]);\n            }\n        }\n    };\n}\nexports.headerCapture = headerCapture;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.53.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1odHRwL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWh0dHBAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL3ZlcnNpb24uanM/YmIyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuVkVSU0lPTiA9ICcwLjUzLjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\n");

/***/ })

};
;