"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HAPI_TYPE\"] = \"hapi.type\";\n    AttributeNames[\"PLUGIN_NAME\"] = \"hapi.plugin.name\";\n    AttributeNames[\"EXT_TYPE\"] = \"server.ext.type\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/MWE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSEFQSV9UWVBFXCJdID0gXCJoYXBpLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBMVUdJTl9OQU1FXCJdID0gXCJoYXBpLnBsdWdpbi5uYW1lXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFRfVFlQRVwiXSA9IFwic2VydmVyLmV4dC50eXBlXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDJNQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMscU5BQXdCO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW5kZXguanM/YTc3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiLifecycleMethodNames = exports.HapiLayerType = exports.handlerPatched = exports.HapiComponentName = void 0;\nexports.HapiComponentName = '@hapi/hapi';\n/**\n * This symbol is used to mark a Hapi route handler or server extension handler as\n * already patched, since its possible to use these handlers multiple times\n * i.e. when allowing multiple versions of one plugin, or when registering a plugin\n * multiple times on different servers.\n */\nexports.handlerPatched = Symbol('hapi-handler-patched');\nexports.HapiLayerType = {\n    ROUTER: 'router',\n    PLUGIN: 'plugin',\n    EXT: 'server.ext',\n};\nexports.HapiLifecycleMethodNames = new Set([\n    'onPreAuth',\n    'onCredentials',\n    'onPostAuth',\n    'onPreHandler',\n    'onPostHandler',\n    'onPreResponse',\n    'onRequest',\n]);\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUI7QUFDN0cseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanM/NTg1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhhcGlMaWZlY3ljbGVNZXRob2ROYW1lcyA9IGV4cG9ydHMuSGFwaUxheWVyVHlwZSA9IGV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBleHBvcnRzLkhhcGlDb21wb25lbnROYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5IYXBpQ29tcG9uZW50TmFtZSA9ICdAaGFwaS9oYXBpJztcbi8qKlxuICogVGhpcyBzeW1ib2wgaXMgdXNlZCB0byBtYXJrIGEgSGFwaSByb3V0ZSBoYW5kbGVyIG9yIHNlcnZlciBleHRlbnNpb24gaGFuZGxlciBhc1xuICogYWxyZWFkeSBwYXRjaGVkLCBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIHRoZXNlIGhhbmRsZXJzIG11bHRpcGxlIHRpbWVzXG4gKiBpLmUuIHdoZW4gYWxsb3dpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2Ygb25lIHBsdWdpbiwgb3Igd2hlbiByZWdpc3RlcmluZyBhIHBsdWdpblxuICogbXVsdGlwbGUgdGltZXMgb24gZGlmZmVyZW50IHNlcnZlcnMuXG4gKi9cbmV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBTeW1ib2woJ2hhcGktaGFuZGxlci1wYXRjaGVkJyk7XG5leHBvcnRzLkhhcGlMYXllclR5cGUgPSB7XG4gICAgUk9VVEVSOiAncm91dGVyJyxcbiAgICBQTFVHSU46ICdwbHVnaW4nLFxuICAgIEVYVDogJ3NlcnZlci5leHQnLFxufTtcbmV4cG9ydHMuSGFwaUxpZmVjeWNsZU1ldGhvZE5hbWVzID0gbmV3IFNldChbXG4gICAgJ29uUHJlQXV0aCcsXG4gICAgJ29uQ3JlZGVudGlhbHMnLFxuICAgICdvblBvc3RBdXRoJyxcbiAgICAnb25QcmVIYW5kbGVyJyxcbiAgICAnb25Qb3N0SGFuZGxlcicsXG4gICAgJ29uUHJlUmVzcG9uc2UnLFxuICAgICdvblJlcXVlc3QnLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPluginFromInput = exports.getExtMetadata = exports.getRouteMetadata = exports.isPatchableExtMethod = exports.isDirectExtInput = exports.isLifecycleExtEventObj = exports.isLifecycleExtType = exports.getPluginName = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\");\nfunction getPluginName(plugin) {\n    if (plugin.name) {\n        return plugin.name;\n    }\n    else {\n        return plugin.pkg.name;\n    }\n}\nexports.getPluginName = getPluginName;\nconst isLifecycleExtType = (variableToCheck) => {\n    return (typeof variableToCheck === 'string' &&\n        internal_types_1.HapiLifecycleMethodNames.has(variableToCheck));\n};\nexports.isLifecycleExtType = isLifecycleExtType;\nconst isLifecycleExtEventObj = (variableToCheck) => {\n    var _a;\n    const event = (_a = variableToCheck) === null || _a === void 0 ? void 0 : _a.type;\n    return event !== undefined && (0, exports.isLifecycleExtType)(event);\n};\nexports.isLifecycleExtEventObj = isLifecycleExtEventObj;\nconst isDirectExtInput = (variableToCheck) => {\n    return (Array.isArray(variableToCheck) &&\n        variableToCheck.length <= 3 &&\n        (0, exports.isLifecycleExtType)(variableToCheck[0]) &&\n        typeof variableToCheck[1] === 'function');\n};\nexports.isDirectExtInput = isDirectExtInput;\nconst isPatchableExtMethod = (variableToCheck) => {\n    return !Array.isArray(variableToCheck);\n};\nexports.isPatchableExtMethod = isPatchableExtMethod;\nconst getRouteMetadata = (route, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n                [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.PLUGIN,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: route - ${route.path}`,\n        };\n    }\n    return {\n        attributes: {\n            [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n            [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.ROUTER,\n        },\n        name: `route - ${route.path}`,\n    };\n};\nexports.getRouteMetadata = getRouteMetadata;\nconst getExtMetadata = (extPoint, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: ext - ${extPoint}`,\n        };\n    }\n    return {\n        attributes: {\n            [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n        },\n        name: `ext - ${extPoint}`,\n    };\n};\nexports.getExtMetadata = getExtMetadata;\nconst getPluginFromInput = (pluginObj) => {\n    if ('plugin' in pluginObj) {\n        if ('plugin' in pluginObj.plugin) {\n            return pluginObj.plugin.plugin;\n        }\n        return pluginObj.plugin;\n    }\n    return pluginObj;\n};\nexports.getPluginFromInput = getPluginFromInput;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyw0QkFBNEIsR0FBRyx3QkFBd0IsR0FBRyw4QkFBOEIsR0FBRywwQkFBMEIsR0FBRyxxQkFBcUI7QUFDOU4sK0JBQStCLG1CQUFPLENBQUMsMExBQXFDO0FBQzVFLHlCQUF5QixtQkFBTyxDQUFDLHlNQUFrQjtBQUNuRCx5QkFBeUIsbUJBQU8sQ0FBQyxxTkFBd0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixxQkFBcUIsV0FBVyxZQUFZLFdBQVc7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QseUJBQXlCLFdBQVc7QUFDcEM7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixxQkFBcUIsV0FBVyxVQUFVLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvdXRpbHMuanM/ZjY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFBsdWdpbkZyb21JbnB1dCA9IGV4cG9ydHMuZ2V0RXh0TWV0YWRhdGEgPSBleHBvcnRzLmdldFJvdXRlTWV0YWRhdGEgPSBleHBvcnRzLmlzUGF0Y2hhYmxlRXh0TWV0aG9kID0gZXhwb3J0cy5pc0RpcmVjdEV4dElucHV0ID0gZXhwb3J0cy5pc0xpZmVjeWNsZUV4dEV2ZW50T2JqID0gZXhwb3J0cy5pc0xpZmVjeWNsZUV4dFR5cGUgPSBleHBvcnRzLmdldFBsdWdpbk5hbWUgPSB2b2lkIDA7XG5jb25zdCBzZW1hbnRpY19jb252ZW50aW9uc18xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zXCIpO1xuY29uc3QgaW50ZXJuYWxfdHlwZXNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLXR5cGVzXCIpO1xuY29uc3QgQXR0cmlidXRlTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpO1xuZnVuY3Rpb24gZ2V0UGx1Z2luTmFtZShwbHVnaW4pIHtcbiAgICBpZiAocGx1Z2luLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5uYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5wa2cubmFtZTtcbiAgICB9XG59XG5leHBvcnRzLmdldFBsdWdpbk5hbWUgPSBnZXRQbHVnaW5OYW1lO1xuY29uc3QgaXNMaWZlY3ljbGVFeHRUeXBlID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAodHlwZW9mIHZhcmlhYmxlVG9DaGVjayA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGlmZWN5Y2xlTWV0aG9kTmFtZXMuaGFzKHZhcmlhYmxlVG9DaGVjaykpO1xufTtcbmV4cG9ydHMuaXNMaWZlY3ljbGVFeHRUeXBlID0gaXNMaWZlY3ljbGVFeHRUeXBlO1xuY29uc3QgaXNMaWZlY3ljbGVFeHRFdmVudE9iaiA9ICh2YXJpYWJsZVRvQ2hlY2spID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZXZlbnQgPSAoX2EgPSB2YXJpYWJsZVRvQ2hlY2spID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlO1xuICAgIHJldHVybiBldmVudCAhPT0gdW5kZWZpbmVkICYmICgwLCBleHBvcnRzLmlzTGlmZWN5Y2xlRXh0VHlwZSkoZXZlbnQpO1xufTtcbmV4cG9ydHMuaXNMaWZlY3ljbGVFeHRFdmVudE9iaiA9IGlzTGlmZWN5Y2xlRXh0RXZlbnRPYmo7XG5jb25zdCBpc0RpcmVjdEV4dElucHV0ID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZVRvQ2hlY2spICYmXG4gICAgICAgIHZhcmlhYmxlVG9DaGVjay5sZW5ndGggPD0gMyAmJlxuICAgICAgICAoMCwgZXhwb3J0cy5pc0xpZmVjeWNsZUV4dFR5cGUpKHZhcmlhYmxlVG9DaGVja1swXSkgJiZcbiAgICAgICAgdHlwZW9mIHZhcmlhYmxlVG9DaGVja1sxXSA9PT0gJ2Z1bmN0aW9uJyk7XG59O1xuZXhwb3J0cy5pc0RpcmVjdEV4dElucHV0ID0gaXNEaXJlY3RFeHRJbnB1dDtcbmNvbnN0IGlzUGF0Y2hhYmxlRXh0TWV0aG9kID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAhQXJyYXkuaXNBcnJheSh2YXJpYWJsZVRvQ2hlY2spO1xufTtcbmV4cG9ydHMuaXNQYXRjaGFibGVFeHRNZXRob2QgPSBpc1BhdGNoYWJsZUV4dE1ldGhvZDtcbmNvbnN0IGdldFJvdXRlTWV0YWRhdGEgPSAocm91dGUsIHBsdWdpbk5hbWUpID0+IHtcbiAgICBpZiAocGx1Z2luTmFtZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfUk9VVEVdOiByb3V0ZS5wYXRoLFxuICAgICAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfTUVUSE9EXTogcm91dGUubWV0aG9kLFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5QTFVHSU4sXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuUExVR0lOX05BTUVdOiBwbHVnaW5OYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IGAke3BsdWdpbk5hbWV9OiByb3V0ZSAtICR7cm91dGUucGF0aH1gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1JPVVRFXTogcm91dGUucGF0aCxcbiAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfTUVUSE9EXTogcm91dGUubWV0aG9kLFxuICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSEFQSV9UWVBFXTogaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGF5ZXJUeXBlLlJPVVRFUixcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZTogYHJvdXRlIC0gJHtyb3V0ZS5wYXRofWAsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJvdXRlTWV0YWRhdGEgPSBnZXRSb3V0ZU1ldGFkYXRhO1xuY29uc3QgZ2V0RXh0TWV0YWRhdGEgPSAoZXh0UG9pbnQsIHBsdWdpbk5hbWUpID0+IHtcbiAgICBpZiAocGx1Z2luTmFtZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkVYVF9UWVBFXTogZXh0UG9pbnQsXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSEFQSV9UWVBFXTogaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGF5ZXJUeXBlLkVYVCxcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5QTFVHSU5fTkFNRV06IHBsdWdpbk5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogYCR7cGx1Z2luTmFtZX06IGV4dCAtICR7ZXh0UG9pbnR9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuRVhUX1RZUEVdOiBleHRQb2ludCxcbiAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5FWFQsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IGBleHQgLSAke2V4dFBvaW50fWAsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldEV4dE1ldGFkYXRhID0gZ2V0RXh0TWV0YWRhdGE7XG5jb25zdCBnZXRQbHVnaW5Gcm9tSW5wdXQgPSAocGx1Z2luT2JqKSA9PiB7XG4gICAgaWYgKCdwbHVnaW4nIGluIHBsdWdpbk9iaikge1xuICAgICAgICBpZiAoJ3BsdWdpbicgaW4gcGx1Z2luT2JqLnBsdWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBsdWdpbk9iai5wbHVnaW4ucGx1Z2luO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbHVnaW5PYmoucGx1Z2luO1xuICAgIH1cbiAgICByZXR1cm4gcGx1Z2luT2JqO1xufTtcbmV4cG9ydHMuZ2V0UGx1Z2luRnJvbUlucHV0ID0gZ2V0UGx1Z2luRnJvbUlucHV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.41.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-hapi';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy92ZXJzaW9uLmpzPzY0YTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40MS4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\");\n/** Hapi instrumentation for OpenTelemetry */\nclass HapiInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(internal_types_1.HapiComponentName, ['>=17.0.0 <22'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.server)) {\n                this._wrap(moduleExports, 'server', this._getServerPatch.bind(this));\n            }\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.Server)) {\n                this._wrap(moduleExports, 'Server', this._getServerPatch.bind(this));\n            }\n            return moduleExports;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            this._massUnwrap([moduleExports], ['server', 'Server']);\n        });\n    }\n    /**\n     * Patches the Hapi.server and Hapi.Server functions in order to instrument\n     * the server.route, server.ext, and server.register functions via calls to the\n     * @function _getServerRoutePatch, @function _getServerExtPatch, and\n     * @function _getServerRegisterPatch functions\n     * @param original - the original Hapi Server creation function\n     */\n    _getServerPatch(original) {\n        const instrumentation = this;\n        const self = this;\n        return function server(opts) {\n            const newServer = original.apply(this, [opts]);\n            self._wrap(newServer, 'route', originalRouter => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(originalRouter);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(newServer, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.Server.register\n            // function, which requires supporting a variety of different types of Plugin inputs\n            self._wrap(newServer, 'register', \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            instrumentation._getServerRegisterPatch.bind(instrumentation));\n            return newServer;\n        };\n    }\n    /**\n     * Patches the plugin register function used by the Hapi Server. This function\n     * goes through each plugin that is being registered and adds instrumentation\n     * via a call to the @function _wrapRegisterHandler function.\n     * @param {RegisterFunction<T>} original - the original register function which\n     * registers each plugin on the server\n     */\n    _getServerRegisterPatch(original) {\n        const instrumentation = this;\n        return function register(pluginInput, options) {\n            if (Array.isArray(pluginInput)) {\n                for (const pluginObj of pluginInput) {\n                    const plugin = (0, utils_1.getPluginFromInput)(pluginObj);\n                    instrumentation._wrapRegisterHandler(plugin);\n                }\n            }\n            else {\n                const plugin = (0, utils_1.getPluginFromInput)(pluginInput);\n                instrumentation._wrapRegisterHandler(plugin);\n            }\n            return original.apply(this, [pluginInput, options]);\n        };\n    }\n    /**\n     * Patches the Server.ext function which adds extension methods to the specified\n     * point along the request lifecycle. This function accepts the full range of\n     * accepted input into the standard Hapi `server.ext` function. For each extension,\n     * it adds instrumentation to the handler via a call to the @function _wrapExtMethods\n     * function.\n     * @param original - the original ext function which adds the extension method to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server extension. Else, signifies that the extension was added directly\n     */\n    _getServerExtPatch(original, pluginName) {\n        const instrumentation = this;\n        return function ext(...args) {\n            if (Array.isArray(args[0])) {\n                const eventsList = args[0];\n                for (let i = 0; i < eventsList.length; i++) {\n                    const eventObj = eventsList[i];\n                    if ((0, utils_1.isLifecycleExtType)(eventObj.type)) {\n                        const lifecycleEventObj = eventObj;\n                        const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, eventObj.type, pluginName);\n                        lifecycleEventObj.method = handler;\n                        eventsList[i] = lifecycleEventObj;\n                    }\n                }\n                return original.apply(this, args);\n            }\n            else if ((0, utils_1.isDirectExtInput)(args)) {\n                const extInput = args;\n                const method = extInput[1];\n                const handler = instrumentation._wrapExtMethods(method, extInput[0], pluginName);\n                return original.apply(this, [extInput[0], handler, extInput[2]]);\n            }\n            else if ((0, utils_1.isLifecycleExtEventObj)(args[0])) {\n                const lifecycleEventObj = args[0];\n                const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, lifecycleEventObj.type, pluginName);\n                lifecycleEventObj.method = handler;\n                return original.call(this, lifecycleEventObj);\n            }\n            return original.apply(this, args);\n        };\n    }\n    /**\n     * Patches the Server.route function. This function accepts either one or an array\n     * of Hapi.ServerRoute objects and adds instrumentation on each route via a call to\n     * the @function _wrapRouteHandler function.\n     * @param {HapiServerRouteInputMethod} original - the original route function which adds\n     * the route to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _getServerRoutePatch(original, pluginName) {\n        const instrumentation = this;\n        return function route(route) {\n            if (Array.isArray(route)) {\n                for (let i = 0; i < route.length; i++) {\n                    const newRoute = instrumentation._wrapRouteHandler.call(instrumentation, route[i], pluginName);\n                    route[i] = newRoute;\n                }\n            }\n            else {\n                route = instrumentation._wrapRouteHandler.call(instrumentation, route, pluginName);\n            }\n            return original.apply(this, [route]);\n        };\n    }\n    /**\n     * Wraps newly registered plugins to add instrumentation to the plugin's clone of\n     * the original server. Specifically, wraps the server.route and server.ext functions\n     * via calls to @function _getServerRoutePatch and @function _getServerExtPatch\n     * @param {Hapi.Plugin<T>} plugin - the new plugin which is being instrumented\n     */\n    _wrapRegisterHandler(plugin) {\n        const instrumentation = this;\n        const pluginName = (0, utils_1.getPluginName)(plugin);\n        const oldHandler = plugin.register;\n        const self = this;\n        const newRegisterHandler = function (server, options) {\n            self._wrap(server, 'route', original => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(original, pluginName);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(server, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler, pluginName);\n            });\n            return oldHandler(server, options);\n        };\n        plugin.register = newRegisterHandler;\n    }\n    /**\n     * Wraps request extension methods to add instrumentation to each new extension handler.\n     * Patches each individual extension in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableExtMethod | PatchableExtMethod[]} method - the request extension\n     * handler which is being instrumented\n     * @param {Hapi.ServerRequestExtType} extPoint - the point in the Hapi request lifecycle\n     * which this extension targets\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapExtMethods(method, extPoint, pluginName) {\n        const instrumentation = this;\n        if (method instanceof Array) {\n            for (let i = 0; i < method.length; i++) {\n                method[i] = instrumentation._wrapExtMethods(method[i], extPoint);\n            }\n            return method;\n        }\n        else if ((0, utils_1.isPatchableExtMethod)(method)) {\n            if (method[internal_types_1.handlerPatched] === true)\n                return method;\n            method[internal_types_1.handlerPatched] = true;\n            const newHandler = async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await method.apply(this, params);\n                }\n                const metadata = (0, utils_1.getExtMetadata)(extPoint, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), method, undefined, ...params);\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n            return newHandler;\n        }\n        return method;\n    }\n    /**\n     * Patches each individual route handler method in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableServerRoute} route - the route handler which is being instrumented\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapRouteHandler(route, pluginName) {\n        var _a;\n        const instrumentation = this;\n        if (route[internal_types_1.handlerPatched] === true)\n            return route;\n        route[internal_types_1.handlerPatched] = true;\n        const wrapHandler = oldHandler => {\n            return async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await oldHandler.call(this, ...params);\n                }\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api.context.active());\n                if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = route.path;\n                }\n                const metadata = (0, utils_1.getRouteMetadata)(route, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n        };\n        if (typeof route.handler === 'function') {\n            route.handler = wrapHandler(route.handler);\n        }\n        else if (typeof route.options === 'function') {\n            const oldOptions = route.options;\n            route.options = function (server) {\n                const options = oldOptions(server);\n                if (typeof options.handler === 'function') {\n                    options.handler = wrapHandler(options.handler);\n                }\n                return options;\n            };\n        }\n        else if (typeof ((_a = route.options) === null || _a === void 0 ? void 0 : _a.handler) === 'function') {\n            route.options.handler = wrapHandler(route.options.handler);\n        }\n        return route;\n    }\n}\nexports.HapiInstrumentation = HapiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HAPI_TYPE\"] = \"hapi.type\";\n    AttributeNames[\"PLUGIN_NAME\"] = \"hapi.plugin.name\";\n    AttributeNames[\"EXT_TYPE\"] = \"server.ext.type\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWhhcGlAMC40MS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGkvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzP2U3ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBBdHRyaWJ1dGVOYW1lcztcbihmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhBUElfVFlQRVwiXSA9IFwiaGFwaS50eXBlXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJQTFVHSU5fTkFNRVwiXSA9IFwiaGFwaS5wbHVnaW4ubmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiRVhUX1RZUEVcIl0gPSBcInNlcnZlci5leHQudHlwZVwiO1xufSkoQXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLkF0dHJpYnV0ZU5hbWVzIHx8IChleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZU5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxrTkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLDROQUF3QjtBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWhhcGlAMC40MS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGkvYnVpbGQvc3JjL2luZGV4LmpzPzdmM2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiLifecycleMethodNames = exports.HapiLayerType = exports.handlerPatched = exports.HapiComponentName = void 0;\nexports.HapiComponentName = '@hapi/hapi';\n/**\n * This symbol is used to mark a Hapi route handler or server extension handler as\n * already patched, since its possible to use these handlers multiple times\n * i.e. when allowing multiple versions of one plugin, or when registering a plugin\n * multiple times on different servers.\n */\nexports.handlerPatched = Symbol('hapi-handler-patched');\nexports.HapiLayerType = {\n    ROUTER: 'router',\n    PLUGIN: 'plugin',\n    EXT: 'server.ext',\n};\nexports.HapiLifecycleMethodNames = new Set([\n    'onPreAuth',\n    'onCredentials',\n    'onPostAuth',\n    'onPreHandler',\n    'onPostHandler',\n    'onPreResponse',\n    'onRequest',\n]);\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcscUJBQXFCLEdBQUcsc0JBQXNCLEdBQUcseUJBQXlCO0FBQzdHLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWhhcGlAMC40MS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGkvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzP2U1ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IYXBpTGlmZWN5Y2xlTWV0aG9kTmFtZXMgPSBleHBvcnRzLkhhcGlMYXllclR5cGUgPSBleHBvcnRzLmhhbmRsZXJQYXRjaGVkID0gZXhwb3J0cy5IYXBpQ29tcG9uZW50TmFtZSA9IHZvaWQgMDtcbmV4cG9ydHMuSGFwaUNvbXBvbmVudE5hbWUgPSAnQGhhcGkvaGFwaSc7XG4vKipcbiAqIFRoaXMgc3ltYm9sIGlzIHVzZWQgdG8gbWFyayBhIEhhcGkgcm91dGUgaGFuZGxlciBvciBzZXJ2ZXIgZXh0ZW5zaW9uIGhhbmRsZXIgYXNcbiAqIGFscmVhZHkgcGF0Y2hlZCwgc2luY2UgaXRzIHBvc3NpYmxlIHRvIHVzZSB0aGVzZSBoYW5kbGVycyBtdWx0aXBsZSB0aW1lc1xuICogaS5lLiB3aGVuIGFsbG93aW5nIG11bHRpcGxlIHZlcnNpb25zIG9mIG9uZSBwbHVnaW4sIG9yIHdoZW4gcmVnaXN0ZXJpbmcgYSBwbHVnaW5cbiAqIG11bHRpcGxlIHRpbWVzIG9uIGRpZmZlcmVudCBzZXJ2ZXJzLlxuICovXG5leHBvcnRzLmhhbmRsZXJQYXRjaGVkID0gU3ltYm9sKCdoYXBpLWhhbmRsZXItcGF0Y2hlZCcpO1xuZXhwb3J0cy5IYXBpTGF5ZXJUeXBlID0ge1xuICAgIFJPVVRFUjogJ3JvdXRlcicsXG4gICAgUExVR0lOOiAncGx1Z2luJyxcbiAgICBFWFQ6ICdzZXJ2ZXIuZXh0Jyxcbn07XG5leHBvcnRzLkhhcGlMaWZlY3ljbGVNZXRob2ROYW1lcyA9IG5ldyBTZXQoW1xuICAgICdvblByZUF1dGgnLFxuICAgICdvbkNyZWRlbnRpYWxzJyxcbiAgICAnb25Qb3N0QXV0aCcsXG4gICAgJ29uUHJlSGFuZGxlcicsXG4gICAgJ29uUG9zdEhhbmRsZXInLFxuICAgICdvblByZVJlc3BvbnNlJyxcbiAgICAnb25SZXF1ZXN0Jyxcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwtdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPluginFromInput = exports.getExtMetadata = exports.getRouteMetadata = exports.isPatchableExtMethod = exports.isDirectExtInput = exports.isLifecycleExtEventObj = exports.isLifecycleExtType = exports.getPluginName = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\");\nfunction getPluginName(plugin) {\n    if (plugin.name) {\n        return plugin.name;\n    }\n    else {\n        return plugin.pkg.name;\n    }\n}\nexports.getPluginName = getPluginName;\nconst isLifecycleExtType = (variableToCheck) => {\n    return (typeof variableToCheck === 'string' &&\n        internal_types_1.HapiLifecycleMethodNames.has(variableToCheck));\n};\nexports.isLifecycleExtType = isLifecycleExtType;\nconst isLifecycleExtEventObj = (variableToCheck) => {\n    var _a;\n    const event = (_a = variableToCheck) === null || _a === void 0 ? void 0 : _a.type;\n    return event !== undefined && (0, exports.isLifecycleExtType)(event);\n};\nexports.isLifecycleExtEventObj = isLifecycleExtEventObj;\nconst isDirectExtInput = (variableToCheck) => {\n    return (Array.isArray(variableToCheck) &&\n        variableToCheck.length <= 3 &&\n        (0, exports.isLifecycleExtType)(variableToCheck[0]) &&\n        typeof variableToCheck[1] === 'function');\n};\nexports.isDirectExtInput = isDirectExtInput;\nconst isPatchableExtMethod = (variableToCheck) => {\n    return !Array.isArray(variableToCheck);\n};\nexports.isPatchableExtMethod = isPatchableExtMethod;\nconst getRouteMetadata = (route, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n                [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.PLUGIN,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: route - ${route.path}`,\n        };\n    }\n    return {\n        attributes: {\n            [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n            [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.ROUTER,\n        },\n        name: `route - ${route.path}`,\n    };\n};\nexports.getRouteMetadata = getRouteMetadata;\nconst getExtMetadata = (extPoint, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: ext - ${extPoint}`,\n        };\n    }\n    return {\n        attributes: {\n            [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n        },\n        name: `ext - ${extPoint}`,\n    };\n};\nexports.getExtMetadata = getExtMetadata;\nconst getPluginFromInput = (pluginObj) => {\n    if ('plugin' in pluginObj) {\n        if ('plugin' in pluginObj.plugin) {\n            return pluginObj.plugin.plugin;\n        }\n        return pluginObj.plugin;\n    }\n    return pluginObj;\n};\nexports.getPluginFromInput = getPluginFromInput;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsc0JBQXNCLEdBQUcsd0JBQXdCLEdBQUcsNEJBQTRCLEdBQUcsd0JBQXdCLEdBQUcsOEJBQThCLEdBQUcsMEJBQTBCLEdBQUcscUJBQXFCO0FBQzlOLCtCQUErQixtQkFBTyxDQUFDLGlNQUFxQztBQUM1RSx5QkFBeUIsbUJBQU8sQ0FBQyxnTkFBa0I7QUFDbkQseUJBQXlCLG1CQUFPLENBQUMsNE5BQXdCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IscUJBQXFCLFdBQVcsWUFBWSxXQUFXO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHlCQUF5QixXQUFXO0FBQ3BDO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IscUJBQXFCLFdBQVcsVUFBVSxTQUFTO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bmb2lsL2FwcC8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWhhcGlAMC40MS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGkvYnVpbGQvc3JjL3V0aWxzLmpzP2UwN2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRQbHVnaW5Gcm9tSW5wdXQgPSBleHBvcnRzLmdldEV4dE1ldGFkYXRhID0gZXhwb3J0cy5nZXRSb3V0ZU1ldGFkYXRhID0gZXhwb3J0cy5pc1BhdGNoYWJsZUV4dE1ldGhvZCA9IGV4cG9ydHMuaXNEaXJlY3RFeHRJbnB1dCA9IGV4cG9ydHMuaXNMaWZlY3ljbGVFeHRFdmVudE9iaiA9IGV4cG9ydHMuaXNMaWZlY3ljbGVFeHRUeXBlID0gZXhwb3J0cy5nZXRQbHVnaW5OYW1lID0gdm9pZCAwO1xuY29uc3Qgc2VtYW50aWNfY29udmVudGlvbnNfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9uc1wiKTtcbmNvbnN0IGludGVybmFsX3R5cGVzXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC10eXBlc1wiKTtcbmNvbnN0IEF0dHJpYnV0ZU5hbWVzXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKTtcbmZ1bmN0aW9uIGdldFBsdWdpbk5hbWUocGx1Z2luKSB7XG4gICAgaWYgKHBsdWdpbi5uYW1lKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW4ubmFtZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBwbHVnaW4ucGtnLm5hbWU7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRQbHVnaW5OYW1lID0gZ2V0UGx1Z2luTmFtZTtcbmNvbnN0IGlzTGlmZWN5Y2xlRXh0VHlwZSA9ICh2YXJpYWJsZVRvQ2hlY2spID0+IHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YXJpYWJsZVRvQ2hlY2sgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGludGVybmFsX3R5cGVzXzEuSGFwaUxpZmVjeWNsZU1ldGhvZE5hbWVzLmhhcyh2YXJpYWJsZVRvQ2hlY2spKTtcbn07XG5leHBvcnRzLmlzTGlmZWN5Y2xlRXh0VHlwZSA9IGlzTGlmZWN5Y2xlRXh0VHlwZTtcbmNvbnN0IGlzTGlmZWN5Y2xlRXh0RXZlbnRPYmogPSAodmFyaWFibGVUb0NoZWNrKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGV2ZW50ID0gKF9hID0gdmFyaWFibGVUb0NoZWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZTtcbiAgICByZXR1cm4gZXZlbnQgIT09IHVuZGVmaW5lZCAmJiAoMCwgZXhwb3J0cy5pc0xpZmVjeWNsZUV4dFR5cGUpKGV2ZW50KTtcbn07XG5leHBvcnRzLmlzTGlmZWN5Y2xlRXh0RXZlbnRPYmogPSBpc0xpZmVjeWNsZUV4dEV2ZW50T2JqO1xuY29uc3QgaXNEaXJlY3RFeHRJbnB1dCA9ICh2YXJpYWJsZVRvQ2hlY2spID0+IHtcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkodmFyaWFibGVUb0NoZWNrKSAmJlxuICAgICAgICB2YXJpYWJsZVRvQ2hlY2subGVuZ3RoIDw9IDMgJiZcbiAgICAgICAgKDAsIGV4cG9ydHMuaXNMaWZlY3ljbGVFeHRUeXBlKSh2YXJpYWJsZVRvQ2hlY2tbMF0pICYmXG4gICAgICAgIHR5cGVvZiB2YXJpYWJsZVRvQ2hlY2tbMV0gPT09ICdmdW5jdGlvbicpO1xufTtcbmV4cG9ydHMuaXNEaXJlY3RFeHRJbnB1dCA9IGlzRGlyZWN0RXh0SW5wdXQ7XG5jb25zdCBpc1BhdGNoYWJsZUV4dE1ldGhvZCA9ICh2YXJpYWJsZVRvQ2hlY2spID0+IHtcbiAgICByZXR1cm4gIUFycmF5LmlzQXJyYXkodmFyaWFibGVUb0NoZWNrKTtcbn07XG5leHBvcnRzLmlzUGF0Y2hhYmxlRXh0TWV0aG9kID0gaXNQYXRjaGFibGVFeHRNZXRob2Q7XG5jb25zdCBnZXRSb3V0ZU1ldGFkYXRhID0gKHJvdXRlLCBwbHVnaW5OYW1lKSA9PiB7XG4gICAgaWYgKHBsdWdpbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1JPVVRFXTogcm91dGUucGF0aCxcbiAgICAgICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX01FVEhPRF06IHJvdXRlLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5IQVBJX1RZUEVdOiBpbnRlcm5hbF90eXBlc18xLkhhcGlMYXllclR5cGUuUExVR0lOLFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLlBMVUdJTl9OQU1FXTogcGx1Z2luTmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBgJHtwbHVnaW5OYW1lfTogcm91dGUgLSAke3JvdXRlLnBhdGh9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgW3NlbWFudGljX2NvbnZlbnRpb25zXzEuU0VNQVRUUlNfSFRUUF9ST1VURV06IHJvdXRlLnBhdGgsXG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX01FVEhPRF06IHJvdXRlLm1ldGhvZCxcbiAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5ST1VURVIsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IGByb3V0ZSAtICR7cm91dGUucGF0aH1gLFxuICAgIH07XG59O1xuZXhwb3J0cy5nZXRSb3V0ZU1ldGFkYXRhID0gZ2V0Um91dGVNZXRhZGF0YTtcbmNvbnN0IGdldEV4dE1ldGFkYXRhID0gKGV4dFBvaW50LCBwbHVnaW5OYW1lKSA9PiB7XG4gICAgaWYgKHBsdWdpbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5FWFRfVFlQRV06IGV4dFBvaW50LFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5FWFQsXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuUExVR0lOX05BTUVdOiBwbHVnaW5OYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IGAke3BsdWdpbk5hbWV9OiBleHQgLSAke2V4dFBvaW50fWAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkVYVF9UWVBFXTogZXh0UG9pbnQsXG4gICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5IQVBJX1RZUEVdOiBpbnRlcm5hbF90eXBlc18xLkhhcGlMYXllclR5cGUuRVhULFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiBgZXh0IC0gJHtleHRQb2ludH1gLFxuICAgIH07XG59O1xuZXhwb3J0cy5nZXRFeHRNZXRhZGF0YSA9IGdldEV4dE1ldGFkYXRhO1xuY29uc3QgZ2V0UGx1Z2luRnJvbUlucHV0ID0gKHBsdWdpbk9iaikgPT4ge1xuICAgIGlmICgncGx1Z2luJyBpbiBwbHVnaW5PYmopIHtcbiAgICAgICAgaWYgKCdwbHVnaW4nIGluIHBsdWdpbk9iai5wbHVnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwbHVnaW5PYmoucGx1Z2luLnBsdWdpbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGx1Z2luT2JqLnBsdWdpbjtcbiAgICB9XG4gICAgcmV0dXJuIHBsdWdpbk9iajtcbn07XG5leHBvcnRzLmdldFBsdWdpbkZyb21JbnB1dCA9IGdldFBsdWdpbkZyb21JbnB1dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.41.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-hapi';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvdmVyc2lvbi5qcz80YmY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNDEuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\");\n/** Hapi instrumentation for OpenTelemetry */\nclass HapiInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(internal_types_1.HapiComponentName, ['>=17.0.0 <22'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.server)) {\n                this._wrap(moduleExports, 'server', this._getServerPatch.bind(this));\n            }\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.Server)) {\n                this._wrap(moduleExports, 'Server', this._getServerPatch.bind(this));\n            }\n            return moduleExports;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            this._massUnwrap([moduleExports], ['server', 'Server']);\n        });\n    }\n    /**\n     * Patches the Hapi.server and Hapi.Server functions in order to instrument\n     * the server.route, server.ext, and server.register functions via calls to the\n     * @function _getServerRoutePatch, @function _getServerExtPatch, and\n     * @function _getServerRegisterPatch functions\n     * @param original - the original Hapi Server creation function\n     */\n    _getServerPatch(original) {\n        const instrumentation = this;\n        const self = this;\n        return function server(opts) {\n            const newServer = original.apply(this, [opts]);\n            self._wrap(newServer, 'route', originalRouter => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(originalRouter);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(newServer, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.Server.register\n            // function, which requires supporting a variety of different types of Plugin inputs\n            self._wrap(newServer, 'register', \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            instrumentation._getServerRegisterPatch.bind(instrumentation));\n            return newServer;\n        };\n    }\n    /**\n     * Patches the plugin register function used by the Hapi Server. This function\n     * goes through each plugin that is being registered and adds instrumentation\n     * via a call to the @function _wrapRegisterHandler function.\n     * @param {RegisterFunction<T>} original - the original register function which\n     * registers each plugin on the server\n     */\n    _getServerRegisterPatch(original) {\n        const instrumentation = this;\n        return function register(pluginInput, options) {\n            if (Array.isArray(pluginInput)) {\n                for (const pluginObj of pluginInput) {\n                    const plugin = (0, utils_1.getPluginFromInput)(pluginObj);\n                    instrumentation._wrapRegisterHandler(plugin);\n                }\n            }\n            else {\n                const plugin = (0, utils_1.getPluginFromInput)(pluginInput);\n                instrumentation._wrapRegisterHandler(plugin);\n            }\n            return original.apply(this, [pluginInput, options]);\n        };\n    }\n    /**\n     * Patches the Server.ext function which adds extension methods to the specified\n     * point along the request lifecycle. This function accepts the full range of\n     * accepted input into the standard Hapi `server.ext` function. For each extension,\n     * it adds instrumentation to the handler via a call to the @function _wrapExtMethods\n     * function.\n     * @param original - the original ext function which adds the extension method to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server extension. Else, signifies that the extension was added directly\n     */\n    _getServerExtPatch(original, pluginName) {\n        const instrumentation = this;\n        return function ext(...args) {\n            if (Array.isArray(args[0])) {\n                const eventsList = args[0];\n                for (let i = 0; i < eventsList.length; i++) {\n                    const eventObj = eventsList[i];\n                    if ((0, utils_1.isLifecycleExtType)(eventObj.type)) {\n                        const lifecycleEventObj = eventObj;\n                        const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, eventObj.type, pluginName);\n                        lifecycleEventObj.method = handler;\n                        eventsList[i] = lifecycleEventObj;\n                    }\n                }\n                return original.apply(this, args);\n            }\n            else if ((0, utils_1.isDirectExtInput)(args)) {\n                const extInput = args;\n                const method = extInput[1];\n                const handler = instrumentation._wrapExtMethods(method, extInput[0], pluginName);\n                return original.apply(this, [extInput[0], handler, extInput[2]]);\n            }\n            else if ((0, utils_1.isLifecycleExtEventObj)(args[0])) {\n                const lifecycleEventObj = args[0];\n                const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, lifecycleEventObj.type, pluginName);\n                lifecycleEventObj.method = handler;\n                return original.call(this, lifecycleEventObj);\n            }\n            return original.apply(this, args);\n        };\n    }\n    /**\n     * Patches the Server.route function. This function accepts either one or an array\n     * of Hapi.ServerRoute objects and adds instrumentation on each route via a call to\n     * the @function _wrapRouteHandler function.\n     * @param {HapiServerRouteInputMethod} original - the original route function which adds\n     * the route to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _getServerRoutePatch(original, pluginName) {\n        const instrumentation = this;\n        return function route(route) {\n            if (Array.isArray(route)) {\n                for (let i = 0; i < route.length; i++) {\n                    const newRoute = instrumentation._wrapRouteHandler.call(instrumentation, route[i], pluginName);\n                    route[i] = newRoute;\n                }\n            }\n            else {\n                route = instrumentation._wrapRouteHandler.call(instrumentation, route, pluginName);\n            }\n            return original.apply(this, [route]);\n        };\n    }\n    /**\n     * Wraps newly registered plugins to add instrumentation to the plugin's clone of\n     * the original server. Specifically, wraps the server.route and server.ext functions\n     * via calls to @function _getServerRoutePatch and @function _getServerExtPatch\n     * @param {Hapi.Plugin<T>} plugin - the new plugin which is being instrumented\n     */\n    _wrapRegisterHandler(plugin) {\n        const instrumentation = this;\n        const pluginName = (0, utils_1.getPluginName)(plugin);\n        const oldHandler = plugin.register;\n        const self = this;\n        const newRegisterHandler = function (server, options) {\n            self._wrap(server, 'route', original => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(original, pluginName);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(server, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler, pluginName);\n            });\n            return oldHandler(server, options);\n        };\n        plugin.register = newRegisterHandler;\n    }\n    /**\n     * Wraps request extension methods to add instrumentation to each new extension handler.\n     * Patches each individual extension in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableExtMethod | PatchableExtMethod[]} method - the request extension\n     * handler which is being instrumented\n     * @param {Hapi.ServerRequestExtType} extPoint - the point in the Hapi request lifecycle\n     * which this extension targets\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapExtMethods(method, extPoint, pluginName) {\n        const instrumentation = this;\n        if (method instanceof Array) {\n            for (let i = 0; i < method.length; i++) {\n                method[i] = instrumentation._wrapExtMethods(method[i], extPoint);\n            }\n            return method;\n        }\n        else if ((0, utils_1.isPatchableExtMethod)(method)) {\n            if (method[internal_types_1.handlerPatched] === true)\n                return method;\n            method[internal_types_1.handlerPatched] = true;\n            const newHandler = async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await method.apply(this, params);\n                }\n                const metadata = (0, utils_1.getExtMetadata)(extPoint, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), method, undefined, ...params);\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n            return newHandler;\n        }\n        return method;\n    }\n    /**\n     * Patches each individual route handler method in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableServerRoute} route - the route handler which is being instrumented\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapRouteHandler(route, pluginName) {\n        var _a;\n        const instrumentation = this;\n        if (route[internal_types_1.handlerPatched] === true)\n            return route;\n        route[internal_types_1.handlerPatched] = true;\n        const wrapHandler = oldHandler => {\n            return async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await oldHandler.call(this, ...params);\n                }\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api.context.active());\n                if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = route.path;\n                }\n                const metadata = (0, utils_1.getRouteMetadata)(route, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n        };\n        if (typeof route.handler === 'function') {\n            route.handler = wrapHandler(route.handler);\n        }\n        else if (typeof route.options === 'function') {\n            const oldOptions = route.options;\n            route.options = function (server) {\n                const options = oldOptions(server);\n                if (typeof options.handler === 'function') {\n                    options.handler = wrapHandler(options.handler);\n                }\n                return options;\n            };\n        }\n        else if (typeof ((_a = route.options) === null || _a === void 0 ? void 0 : _a.handler) === 'function') {\n            route.options.handler = wrapHandler(route.options.handler);\n        }\n        return route;\n    }\n}\nexports.HapiInstrumentation = HapiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HAPI_TYPE\"] = \"hapi.type\";\n    AttributeNames[\"PLUGIN_NAME\"] = \"hapi.plugin.name\";\n    AttributeNames[\"EXT_TYPE\"] = \"server.ext.type\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/OTNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSEFQSV9UWVBFXCJdID0gXCJoYXBpLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIlBMVUdJTl9OQU1FXCJdID0gXCJoYXBpLnBsdWdpbi5uYW1lXCI7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFRfVFlQRVwiXSA9IFwic2VydmVyLmV4dC50eXBlXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0NBQW9DLGdCQUFnQjtBQUN2RixDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDJNQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMscU5BQXdCO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW5kZXguanM/MTQwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiLifecycleMethodNames = exports.HapiLayerType = exports.handlerPatched = exports.HapiComponentName = void 0;\nexports.HapiComponentName = '@hapi/hapi';\n/**\n * This symbol is used to mark a Hapi route handler or server extension handler as\n * already patched, since its possible to use these handlers multiple times\n * i.e. when allowing multiple versions of one plugin, or when registering a plugin\n * multiple times on different servers.\n */\nexports.handlerPatched = Symbol('hapi-handler-patched');\nexports.HapiLayerType = {\n    ROUTER: 'router',\n    PLUGIN: 'plugin',\n    EXT: 'server.ext',\n};\nexports.HapiLifecycleMethodNames = new Set([\n    'onPreAuth',\n    'onCredentials',\n    'onPostAuth',\n    'onPreHandler',\n    'onPostHandler',\n    'onPreResponse',\n    'onRequest',\n]);\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUI7QUFDN0cseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanM/ZDcxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhhcGlMaWZlY3ljbGVNZXRob2ROYW1lcyA9IGV4cG9ydHMuSGFwaUxheWVyVHlwZSA9IGV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBleHBvcnRzLkhhcGlDb21wb25lbnROYW1lID0gdm9pZCAwO1xuZXhwb3J0cy5IYXBpQ29tcG9uZW50TmFtZSA9ICdAaGFwaS9oYXBpJztcbi8qKlxuICogVGhpcyBzeW1ib2wgaXMgdXNlZCB0byBtYXJrIGEgSGFwaSByb3V0ZSBoYW5kbGVyIG9yIHNlcnZlciBleHRlbnNpb24gaGFuZGxlciBhc1xuICogYWxyZWFkeSBwYXRjaGVkLCBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIHRoZXNlIGhhbmRsZXJzIG11bHRpcGxlIHRpbWVzXG4gKiBpLmUuIHdoZW4gYWxsb3dpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2Ygb25lIHBsdWdpbiwgb3Igd2hlbiByZWdpc3RlcmluZyBhIHBsdWdpblxuICogbXVsdGlwbGUgdGltZXMgb24gZGlmZmVyZW50IHNlcnZlcnMuXG4gKi9cbmV4cG9ydHMuaGFuZGxlclBhdGNoZWQgPSBTeW1ib2woJ2hhcGktaGFuZGxlci1wYXRjaGVkJyk7XG5leHBvcnRzLkhhcGlMYXllclR5cGUgPSB7XG4gICAgUk9VVEVSOiAncm91dGVyJyxcbiAgICBQTFVHSU46ICdwbHVnaW4nLFxuICAgIEVYVDogJ3NlcnZlci5leHQnLFxufTtcbmV4cG9ydHMuSGFwaUxpZmVjeWNsZU1ldGhvZE5hbWVzID0gbmV3IFNldChbXG4gICAgJ29uUHJlQXV0aCcsXG4gICAgJ29uQ3JlZGVudGlhbHMnLFxuICAgICdvblBvc3RBdXRoJyxcbiAgICAnb25QcmVIYW5kbGVyJyxcbiAgICAnb25Qb3N0SGFuZGxlcicsXG4gICAgJ29uUHJlUmVzcG9uc2UnLFxuICAgICdvblJlcXVlc3QnLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPluginFromInput = exports.getExtMetadata = exports.getRouteMetadata = exports.isPatchableExtMethod = exports.isDirectExtInput = exports.isLifecycleExtEventObj = exports.isLifecycleExtType = exports.getPluginName = void 0;\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.28.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/enums/AttributeNames.js\");\nfunction getPluginName(plugin) {\n    if (plugin.name) {\n        return plugin.name;\n    }\n    else {\n        return plugin.pkg.name;\n    }\n}\nexports.getPluginName = getPluginName;\nconst isLifecycleExtType = (variableToCheck) => {\n    return (typeof variableToCheck === 'string' &&\n        internal_types_1.HapiLifecycleMethodNames.has(variableToCheck));\n};\nexports.isLifecycleExtType = isLifecycleExtType;\nconst isLifecycleExtEventObj = (variableToCheck) => {\n    var _a;\n    const event = (_a = variableToCheck) === null || _a === void 0 ? void 0 : _a.type;\n    return event !== undefined && (0, exports.isLifecycleExtType)(event);\n};\nexports.isLifecycleExtEventObj = isLifecycleExtEventObj;\nconst isDirectExtInput = (variableToCheck) => {\n    return (Array.isArray(variableToCheck) &&\n        variableToCheck.length <= 3 &&\n        (0, exports.isLifecycleExtType)(variableToCheck[0]) &&\n        typeof variableToCheck[1] === 'function');\n};\nexports.isDirectExtInput = isDirectExtInput;\nconst isPatchableExtMethod = (variableToCheck) => {\n    return !Array.isArray(variableToCheck);\n};\nexports.isPatchableExtMethod = isPatchableExtMethod;\nconst getRouteMetadata = (route, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n                [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.PLUGIN,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: route - ${route.path}`,\n        };\n    }\n    return {\n        attributes: {\n            [semantic_conventions_1.SEMATTRS_HTTP_ROUTE]: route.path,\n            [semantic_conventions_1.SEMATTRS_HTTP_METHOD]: route.method,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.ROUTER,\n        },\n        name: `route - ${route.path}`,\n    };\n};\nexports.getRouteMetadata = getRouteMetadata;\nconst getExtMetadata = (extPoint, pluginName) => {\n    if (pluginName) {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n                [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n                [AttributeNames_1.AttributeNames.PLUGIN_NAME]: pluginName,\n            },\n            name: `${pluginName}: ext - ${extPoint}`,\n        };\n    }\n    return {\n        attributes: {\n            [AttributeNames_1.AttributeNames.EXT_TYPE]: extPoint,\n            [AttributeNames_1.AttributeNames.HAPI_TYPE]: internal_types_1.HapiLayerType.EXT,\n        },\n        name: `ext - ${extPoint}`,\n    };\n};\nexports.getExtMetadata = getExtMetadata;\nconst getPluginFromInput = (pluginObj) => {\n    if ('plugin' in pluginObj) {\n        if ('plugin' in pluginObj.plugin) {\n            return pluginObj.plugin.plugin;\n        }\n        return pluginObj.plugin;\n    }\n    return pluginObj;\n};\nexports.getPluginFromInput = getPluginFromInput;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyw0QkFBNEIsR0FBRyx3QkFBd0IsR0FBRyw4QkFBOEIsR0FBRywwQkFBMEIsR0FBRyxxQkFBcUI7QUFDOU4sK0JBQStCLG1CQUFPLENBQUMsMExBQXFDO0FBQzVFLHlCQUF5QixtQkFBTyxDQUFDLHlNQUFrQjtBQUNuRCx5QkFBeUIsbUJBQU8sQ0FBQyxxTkFBd0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixxQkFBcUIsV0FBVyxZQUFZLFdBQVc7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QseUJBQXlCLFdBQVc7QUFDcEM7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixxQkFBcUIsV0FBVyxVQUFVLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZvaWwvYXBwLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taGFwaUAwLjQxLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaS9idWlsZC9zcmMvdXRpbHMuanM/NWUzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFBsdWdpbkZyb21JbnB1dCA9IGV4cG9ydHMuZ2V0RXh0TWV0YWRhdGEgPSBleHBvcnRzLmdldFJvdXRlTWV0YWRhdGEgPSBleHBvcnRzLmlzUGF0Y2hhYmxlRXh0TWV0aG9kID0gZXhwb3J0cy5pc0RpcmVjdEV4dElucHV0ID0gZXhwb3J0cy5pc0xpZmVjeWNsZUV4dEV2ZW50T2JqID0gZXhwb3J0cy5pc0xpZmVjeWNsZUV4dFR5cGUgPSBleHBvcnRzLmdldFBsdWdpbk5hbWUgPSB2b2lkIDA7XG5jb25zdCBzZW1hbnRpY19jb252ZW50aW9uc18xID0gcmVxdWlyZShcIkBvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zXCIpO1xuY29uc3QgaW50ZXJuYWxfdHlwZXNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLXR5cGVzXCIpO1xuY29uc3QgQXR0cmlidXRlTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpO1xuZnVuY3Rpb24gZ2V0UGx1Z2luTmFtZShwbHVnaW4pIHtcbiAgICBpZiAocGx1Z2luLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5uYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5wa2cubmFtZTtcbiAgICB9XG59XG5leHBvcnRzLmdldFBsdWdpbk5hbWUgPSBnZXRQbHVnaW5OYW1lO1xuY29uc3QgaXNMaWZlY3ljbGVFeHRUeXBlID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAodHlwZW9mIHZhcmlhYmxlVG9DaGVjayA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGlmZWN5Y2xlTWV0aG9kTmFtZXMuaGFzKHZhcmlhYmxlVG9DaGVjaykpO1xufTtcbmV4cG9ydHMuaXNMaWZlY3ljbGVFeHRUeXBlID0gaXNMaWZlY3ljbGVFeHRUeXBlO1xuY29uc3QgaXNMaWZlY3ljbGVFeHRFdmVudE9iaiA9ICh2YXJpYWJsZVRvQ2hlY2spID0+IHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZXZlbnQgPSAoX2EgPSB2YXJpYWJsZVRvQ2hlY2spID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlO1xuICAgIHJldHVybiBldmVudCAhPT0gdW5kZWZpbmVkICYmICgwLCBleHBvcnRzLmlzTGlmZWN5Y2xlRXh0VHlwZSkoZXZlbnQpO1xufTtcbmV4cG9ydHMuaXNMaWZlY3ljbGVFeHRFdmVudE9iaiA9IGlzTGlmZWN5Y2xlRXh0RXZlbnRPYmo7XG5jb25zdCBpc0RpcmVjdEV4dElucHV0ID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZVRvQ2hlY2spICYmXG4gICAgICAgIHZhcmlhYmxlVG9DaGVjay5sZW5ndGggPD0gMyAmJlxuICAgICAgICAoMCwgZXhwb3J0cy5pc0xpZmVjeWNsZUV4dFR5cGUpKHZhcmlhYmxlVG9DaGVja1swXSkgJiZcbiAgICAgICAgdHlwZW9mIHZhcmlhYmxlVG9DaGVja1sxXSA9PT0gJ2Z1bmN0aW9uJyk7XG59O1xuZXhwb3J0cy5pc0RpcmVjdEV4dElucHV0ID0gaXNEaXJlY3RFeHRJbnB1dDtcbmNvbnN0IGlzUGF0Y2hhYmxlRXh0TWV0aG9kID0gKHZhcmlhYmxlVG9DaGVjaykgPT4ge1xuICAgIHJldHVybiAhQXJyYXkuaXNBcnJheSh2YXJpYWJsZVRvQ2hlY2spO1xufTtcbmV4cG9ydHMuaXNQYXRjaGFibGVFeHRNZXRob2QgPSBpc1BhdGNoYWJsZUV4dE1ldGhvZDtcbmNvbnN0IGdldFJvdXRlTWV0YWRhdGEgPSAocm91dGUsIHBsdWdpbk5hbWUpID0+IHtcbiAgICBpZiAocGx1Z2luTmFtZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfUk9VVEVdOiByb3V0ZS5wYXRoLFxuICAgICAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfTUVUSE9EXTogcm91dGUubWV0aG9kLFxuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5QTFVHSU4sXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuUExVR0lOX05BTUVdOiBwbHVnaW5OYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IGAke3BsdWdpbk5hbWV9OiByb3V0ZSAtICR7cm91dGUucGF0aH1gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBbc2VtYW50aWNfY29udmVudGlvbnNfMS5TRU1BVFRSU19IVFRQX1JPVVRFXTogcm91dGUucGF0aCxcbiAgICAgICAgICAgIFtzZW1hbnRpY19jb252ZW50aW9uc18xLlNFTUFUVFJTX0hUVFBfTUVUSE9EXTogcm91dGUubWV0aG9kLFxuICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSEFQSV9UWVBFXTogaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGF5ZXJUeXBlLlJPVVRFUixcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZTogYHJvdXRlIC0gJHtyb3V0ZS5wYXRofWAsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJvdXRlTWV0YWRhdGEgPSBnZXRSb3V0ZU1ldGFkYXRhO1xuY29uc3QgZ2V0RXh0TWV0YWRhdGEgPSAoZXh0UG9pbnQsIHBsdWdpbk5hbWUpID0+IHtcbiAgICBpZiAocGx1Z2luTmFtZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkVYVF9UWVBFXTogZXh0UG9pbnQsXG4gICAgICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuSEFQSV9UWVBFXTogaW50ZXJuYWxfdHlwZXNfMS5IYXBpTGF5ZXJUeXBlLkVYVCxcbiAgICAgICAgICAgICAgICBbQXR0cmlidXRlTmFtZXNfMS5BdHRyaWJ1dGVOYW1lcy5QTFVHSU5fTkFNRV06IHBsdWdpbk5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogYCR7cGx1Z2luTmFtZX06IGV4dCAtICR7ZXh0UG9pbnR9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgW0F0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXMuRVhUX1RZUEVdOiBleHRQb2ludCxcbiAgICAgICAgICAgIFtBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzLkhBUElfVFlQRV06IGludGVybmFsX3R5cGVzXzEuSGFwaUxheWVyVHlwZS5FWFQsXG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IGBleHQgLSAke2V4dFBvaW50fWAsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldEV4dE1ldGFkYXRhID0gZ2V0RXh0TWV0YWRhdGE7XG5jb25zdCBnZXRQbHVnaW5Gcm9tSW5wdXQgPSAocGx1Z2luT2JqKSA9PiB7XG4gICAgaWYgKCdwbHVnaW4nIGluIHBsdWdpbk9iaikge1xuICAgICAgICBpZiAoJ3BsdWdpbicgaW4gcGx1Z2luT2JqLnBsdWdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBsdWdpbk9iai5wbHVnaW4ucGx1Z2luO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwbHVnaW5PYmoucGx1Z2luO1xuICAgIH1cbiAgICByZXR1cm4gcGx1Z2luT2JqO1xufTtcbmV4cG9ydHMuZ2V0UGx1Z2luRnJvbUlucHV0ID0gZ2V0UGx1Z2luRnJvbUlucHV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.41.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-hapi';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZm9pbC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1oYXBpQDAuNDEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpL2J1aWxkL3NyYy92ZXJzaW9uLmpzPzBmYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSBleHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9IHZvaWQgMDtcbi8vIHRoaXMgaXMgYXV0b2dlbmVyYXRlZCBmaWxlLCBzZWUgc2NyaXB0cy92ZXJzaW9uLXVwZGF0ZS5qc1xuZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSAnMC40MS4wJztcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1oYXBpJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HapiInstrumentation = void 0;\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@1.28.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/version.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/internal-types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/utils.js\");\n/** Hapi instrumentation for OpenTelemetry */\nclass HapiInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition(internal_types_1.HapiComponentName, ['>=17.0.0 <22'], (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.server)) {\n                this._wrap(moduleExports, 'server', this._getServerPatch.bind(this));\n            }\n            if (!(0, instrumentation_1.isWrapped)(moduleExports.Server)) {\n                this._wrap(moduleExports, 'Server', this._getServerPatch.bind(this));\n            }\n            return moduleExports;\n        }, (module) => {\n            const moduleExports = module[Symbol.toStringTag] === 'Module' ? module.default : module;\n            this._massUnwrap([moduleExports], ['server', 'Server']);\n        });\n    }\n    /**\n     * Patches the Hapi.server and Hapi.Server functions in order to instrument\n     * the server.route, server.ext, and server.register functions via calls to the\n     * @function _getServerRoutePatch, @function _getServerExtPatch, and\n     * @function _getServerRegisterPatch functions\n     * @param original - the original Hapi Server creation function\n     */\n    _getServerPatch(original) {\n        const instrumentation = this;\n        const self = this;\n        return function server(opts) {\n            const newServer = original.apply(this, [opts]);\n            self._wrap(newServer, 'route', originalRouter => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(originalRouter);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(newServer, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.Server.register\n            // function, which requires supporting a variety of different types of Plugin inputs\n            self._wrap(newServer, 'register', \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            instrumentation._getServerRegisterPatch.bind(instrumentation));\n            return newServer;\n        };\n    }\n    /**\n     * Patches the plugin register function used by the Hapi Server. This function\n     * goes through each plugin that is being registered and adds instrumentation\n     * via a call to the @function _wrapRegisterHandler function.\n     * @param {RegisterFunction<T>} original - the original register function which\n     * registers each plugin on the server\n     */\n    _getServerRegisterPatch(original) {\n        const instrumentation = this;\n        return function register(pluginInput, options) {\n            if (Array.isArray(pluginInput)) {\n                for (const pluginObj of pluginInput) {\n                    const plugin = (0, utils_1.getPluginFromInput)(pluginObj);\n                    instrumentation._wrapRegisterHandler(plugin);\n                }\n            }\n            else {\n                const plugin = (0, utils_1.getPluginFromInput)(pluginInput);\n                instrumentation._wrapRegisterHandler(plugin);\n            }\n            return original.apply(this, [pluginInput, options]);\n        };\n    }\n    /**\n     * Patches the Server.ext function which adds extension methods to the specified\n     * point along the request lifecycle. This function accepts the full range of\n     * accepted input into the standard Hapi `server.ext` function. For each extension,\n     * it adds instrumentation to the handler via a call to the @function _wrapExtMethods\n     * function.\n     * @param original - the original ext function which adds the extension method to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server extension. Else, signifies that the extension was added directly\n     */\n    _getServerExtPatch(original, pluginName) {\n        const instrumentation = this;\n        return function ext(...args) {\n            if (Array.isArray(args[0])) {\n                const eventsList = args[0];\n                for (let i = 0; i < eventsList.length; i++) {\n                    const eventObj = eventsList[i];\n                    if ((0, utils_1.isLifecycleExtType)(eventObj.type)) {\n                        const lifecycleEventObj = eventObj;\n                        const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, eventObj.type, pluginName);\n                        lifecycleEventObj.method = handler;\n                        eventsList[i] = lifecycleEventObj;\n                    }\n                }\n                return original.apply(this, args);\n            }\n            else if ((0, utils_1.isDirectExtInput)(args)) {\n                const extInput = args;\n                const method = extInput[1];\n                const handler = instrumentation._wrapExtMethods(method, extInput[0], pluginName);\n                return original.apply(this, [extInput[0], handler, extInput[2]]);\n            }\n            else if ((0, utils_1.isLifecycleExtEventObj)(args[0])) {\n                const lifecycleEventObj = args[0];\n                const handler = instrumentation._wrapExtMethods(lifecycleEventObj.method, lifecycleEventObj.type, pluginName);\n                lifecycleEventObj.method = handler;\n                return original.call(this, lifecycleEventObj);\n            }\n            return original.apply(this, args);\n        };\n    }\n    /**\n     * Patches the Server.route function. This function accepts either one or an array\n     * of Hapi.ServerRoute objects and adds instrumentation on each route via a call to\n     * the @function _wrapRouteHandler function.\n     * @param {HapiServerRouteInputMethod} original - the original route function which adds\n     * the route to the server\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _getServerRoutePatch(original, pluginName) {\n        const instrumentation = this;\n        return function route(route) {\n            if (Array.isArray(route)) {\n                for (let i = 0; i < route.length; i++) {\n                    const newRoute = instrumentation._wrapRouteHandler.call(instrumentation, route[i], pluginName);\n                    route[i] = newRoute;\n                }\n            }\n            else {\n                route = instrumentation._wrapRouteHandler.call(instrumentation, route, pluginName);\n            }\n            return original.apply(this, [route]);\n        };\n    }\n    /**\n     * Wraps newly registered plugins to add instrumentation to the plugin's clone of\n     * the original server. Specifically, wraps the server.route and server.ext functions\n     * via calls to @function _getServerRoutePatch and @function _getServerExtPatch\n     * @param {Hapi.Plugin<T>} plugin - the new plugin which is being instrumented\n     */\n    _wrapRegisterHandler(plugin) {\n        const instrumentation = this;\n        const pluginName = (0, utils_1.getPluginName)(plugin);\n        const oldHandler = plugin.register;\n        const self = this;\n        const newRegisterHandler = function (server, options) {\n            self._wrap(server, 'route', original => {\n                return instrumentation._getServerRoutePatch.bind(instrumentation)(original, pluginName);\n            });\n            // Casting as any is necessary here due to multiple overloads on the Hapi.ext\n            // function, which requires supporting a variety of different parameters\n            // as extension inputs\n            self._wrap(server, 'ext', originalExtHandler => {\n                return instrumentation._getServerExtPatch.bind(instrumentation)(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                originalExtHandler, pluginName);\n            });\n            return oldHandler(server, options);\n        };\n        plugin.register = newRegisterHandler;\n    }\n    /**\n     * Wraps request extension methods to add instrumentation to each new extension handler.\n     * Patches each individual extension in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableExtMethod | PatchableExtMethod[]} method - the request extension\n     * handler which is being instrumented\n     * @param {Hapi.ServerRequestExtType} extPoint - the point in the Hapi request lifecycle\n     * which this extension targets\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapExtMethods(method, extPoint, pluginName) {\n        const instrumentation = this;\n        if (method instanceof Array) {\n            for (let i = 0; i < method.length; i++) {\n                method[i] = instrumentation._wrapExtMethods(method[i], extPoint);\n            }\n            return method;\n        }\n        else if ((0, utils_1.isPatchableExtMethod)(method)) {\n            if (method[internal_types_1.handlerPatched] === true)\n                return method;\n            method[internal_types_1.handlerPatched] = true;\n            const newHandler = async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await method.apply(this, params);\n                }\n                const metadata = (0, utils_1.getExtMetadata)(extPoint, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), method, undefined, ...params);\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n            return newHandler;\n        }\n        return method;\n    }\n    /**\n     * Patches each individual route handler method in order to create the\n     * span and propagate context. It does not create spans when there is no parent span.\n     * @param {PatchableServerRoute} route - the route handler which is being instrumented\n     * @param {string} [pluginName] - if present, represents the name of the plugin responsible\n     * for adding this server route. Else, signifies that the route was added directly\n     */\n    _wrapRouteHandler(route, pluginName) {\n        var _a;\n        const instrumentation = this;\n        if (route[internal_types_1.handlerPatched] === true)\n            return route;\n        route[internal_types_1.handlerPatched] = true;\n        const wrapHandler = oldHandler => {\n            return async function (...params) {\n                if (api.trace.getSpan(api.context.active()) === undefined) {\n                    return await oldHandler.call(this, ...params);\n                }\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api.context.active());\n                if ((rpcMetadata === null || rpcMetadata === void 0 ? void 0 : rpcMetadata.type) === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = route.path;\n                }\n                const metadata = (0, utils_1.getRouteMetadata)(route, pluginName);\n                const span = instrumentation.tracer.startSpan(metadata.name, {\n                    attributes: metadata.attributes,\n                });\n                try {\n                    return await api.context.with(api.trace.setSpan(api.context.active(), span), () => oldHandler.call(this, ...params));\n                }\n                catch (err) {\n                    span.recordException(err);\n                    span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                }\n                finally {\n                    span.end();\n                }\n            };\n        };\n        if (typeof route.handler === 'function') {\n            route.handler = wrapHandler(route.handler);\n        }\n        else if (typeof route.options === 'function') {\n            const oldOptions = route.options;\n            route.options = function (server) {\n                const options = oldOptions(server);\n                if (typeof options.handler === 'function') {\n                    options.handler = wrapHandler(options.handler);\n                }\n                return options;\n            };\n        }\n        else if (typeof ((_a = route.options) === null || _a === void 0 ? void 0 : _a.handler) === 'function') {\n            route.options.handler = wrapHandler(route.options.handler);\n        }\n        return route;\n    }\n}\nexports.HapiInstrumentation = HapiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.41.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/instrumentation.js\n");

/***/ })

};
;