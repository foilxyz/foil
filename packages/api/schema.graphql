# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CandleAndTimestampType {
  data: [CandleType!]!
  lastUpdateTimestamp: Int!
}

type CandleType {
  close: String!
  high: String!
  low: String!
  open: String!
  timestamp: Int!
}

type Category {
  id: ID!
  marketGroups: [MarketGroup!]
  name: String!
  slug: String!
}

type Market {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  currentPrice: String
  endTimestamp: Int
  id: ID!
  marketGroup: MarketGroup
  marketId: Int!
  marketParamsAssertionliveness: String
  marketParamsBondamount: String
  marketParamsBondcurrency: String
  marketParamsClaimstatementNo: String
  marketParamsClaimstatementYesOrNumeric: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  optionName: String
  poolAddress: String
  positions: [Position!]
  public: Boolean!
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: String
  startTimestamp: Int
  startingSqrtPriceX96: String
}

input MarketFilterInput {
  endTimestamp_gt: String
}

type MarketGroup {
  address: String
  baseTokenName: String
  category: Category
  chainId: Int!
  classification: String!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: ID!
  initializationNonce: String
  isBridged: Boolean!
  isCumulative: Boolean!
  marketParamsAssertionliveness: String
  marketParamsBondamount: String
  marketParamsBondcurrency: String
  marketParamsClaimstatementNo: String
  marketParamsClaimstatementYesOrNumeric: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  markets(filter: MarketFilterInput, orderBy: MarketOrderInput): [Market!]
  minTradeSize: String
  owner: String
  question: String
  quoteTokenName: String
  resource: Resource
}

input MarketOrderInput {
  direction: String!
  field: String!
}

type PnLType {
  marketId: Int!
  openPositionsPnL: String!
  owner: String!
  positionCount: Int!
  positions: [Int!]!
  totalDeposits: String!
  totalPnL: String!
  totalWithdrawals: String!
}

type Position {
  baseToken: String
  borrowedBaseToken: String
  borrowedQuoteToken: String
  collateral: String
  highPriceTick: String
  id: ID!
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: String
  lpBaseToken: String
  lpQuoteToken: String
  market: Market
  owner: String
  positionId: Int!
  quoteToken: String
  transactions: [Transaction!]
}

type Query {
  categories: [Category!]!
  getMarketLeaderboard(address: String!, chainId: Int!, marketId: String!): [PnLType!]!
  indexCandlesFromCache(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): CandleAndTimestampType!
  indexPriceAtTime(address: String!, chainId: Int!, marketId: String!, timestamp: Int!): CandleType
  legacyMarketCandles(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): [CandleType!]!
  marketCandlesFromCache(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): CandleAndTimestampType!
  marketGroup(address: String!, chainId: Int!): MarketGroup
  marketGroups(baseTokenName: String, chainId: Int, collateralAsset: String): [MarketGroup!]!
  marketGroupsByCategory(slug: String!): [MarketGroup!]!
  markets(chainId: Int!, marketAddress: String!, marketId: Int!): [Market!]!
  positions(chainId: Int, marketAddress: String, owner: String): [Position!]!
  resource(slug: String!): Resource
  resourceCandlesFromCache(from: Int!, interval: Int!, slug: String!, to: Int!): CandleAndTimestampType!
  resourcePrices: [ResourcePrice!]!
  resourceTrailingAverageCandlesFromCache(from: Int!, interval: Int!, slug: String!, to: Int!, trailingAvgTime: Int!): CandleAndTimestampType!
  resources(categorySlug: String): [Resource!]!
  totalVolumeByMarket(chainId: Int!, marketAddress: String!, marketId: Int!): Float!
  transactions(positionId: Int): [Transaction!]!
}

type Resource {
  category: Category
  id: ID!
  marketGroups: [MarketGroup!]
  name: String!
  resourcePrices: [ResourcePrice!]
  slug: String!
}

type ResourcePrice {
  blockNumber: Int!
  id: ID!
  resource: Resource
  timestamp: Int!
  value: String!
}

type Transaction {
  baseToken: String
  collateral: String
  id: ID!
  lpBaseDeltaToken: String
  lpQuoteDeltaToken: String
  position: Position
  quoteToken: String
  timestamp: Int
  tradeRatioD18: String
  transactionHash: String
  type: String!
}