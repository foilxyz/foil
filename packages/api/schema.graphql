# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCache_candle {
  _avg: Cache_candleAvgAggregate
  _count: Cache_candleCountAggregate
  _max: Cache_candleMaxAggregate
  _min: Cache_candleMinAggregate
  _sum: Cache_candleSumAggregate
}

type AggregateCache_param {
  _avg: Cache_paramAvgAggregate
  _count: Cache_paramCountAggregate
  _max: Cache_paramMaxAggregate
  _min: Cache_paramMinAggregate
  _sum: Cache_paramSumAggregate
}

type AggregateCategory {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
}

type AggregateCollateral_transfer {
  _avg: Collateral_transferAvgAggregate
  _count: Collateral_transferCountAggregate
  _max: Collateral_transferMaxAggregate
  _min: Collateral_transferMinAggregate
  _sum: Collateral_transferSumAggregate
}

type AggregateCrypto_prices {
  _avg: Crypto_pricesAvgAggregate
  _count: Crypto_pricesCountAggregate
  _max: Crypto_pricesMaxAggregate
  _min: Crypto_pricesMinAggregate
  _sum: Crypto_pricesSumAggregate
}

type AggregateEvent {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
}

type AggregateMarket {
  _avg: MarketAvgAggregate
  _count: MarketCountAggregate
  _max: MarketMaxAggregate
  _min: MarketMinAggregate
  _sum: MarketSumAggregate
}

type AggregateMarket_group {
  _avg: Market_groupAvgAggregate
  _count: Market_groupCountAggregate
  _max: Market_groupMaxAggregate
  _min: Market_groupMinAggregate
  _sum: Market_groupSumAggregate
}

type AggregateMarket_price {
  _avg: Market_priceAvgAggregate
  _count: Market_priceCountAggregate
  _max: Market_priceMaxAggregate
  _min: Market_priceMinAggregate
  _sum: Market_priceSumAggregate
}

type AggregateMigrations {
  _avg: MigrationsAvgAggregate
  _count: MigrationsCountAggregate
  _max: MigrationsMaxAggregate
  _min: MigrationsMinAggregate
  _sum: MigrationsSumAggregate
}

type AggregatePosition {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
}

type AggregateRender_job {
  _avg: Render_jobAvgAggregate
  _count: Render_jobCountAggregate
  _max: Render_jobMaxAggregate
  _min: Render_jobMinAggregate
  _sum: Render_jobSumAggregate
}

type AggregateResource {
  _avg: ResourceAvgAggregate
  _count: ResourceCountAggregate
  _max: ResourceMaxAggregate
  _min: ResourceMinAggregate
  _sum: ResourceSumAggregate
}

type AggregateResource_price {
  _avg: Resource_priceAvgAggregate
  _count: Resource_priceCountAggregate
  _max: Resource_priceMaxAggregate
  _min: Resource_priceMinAggregate
  _sum: Resource_priceSumAggregate
}

type AggregateTransaction {
  _avg: TransactionAvgAggregate
  _count: TransactionCountAggregate
  _max: TransactionMaxAggregate
  _min: TransactionMinAggregate
  _sum: TransactionSumAggregate
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFieldUpdateOperationsInput {
  decrement: BigInt
  divide: BigInt
  increment: BigInt
  multiply: BigInt
  set: BigInt
}

input BigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt!]
}

input BigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt!]
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Cache_candle {
  address: String
  candleType: String!
  chainId: Int
  close: String!
  createdAt: DateTimeISO!
  endTimestamp: Int!
  high: String!
  id: Int!
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: String!
  marketId: Int
  marketIdx: Int
  open: String!
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int!
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

type Cache_candleAvgAggregate {
  chainId: Float
  endTimestamp: Float
  id: Float
  interval: Float
  lastUpdatedTimestamp: Float
  marketId: Float
  marketIdx: Float
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Float
  trailingAvgTime: Float
  trailingStartTimestamp: Float
}

input Cache_candleAvgOrderByAggregateInput {
  chainId: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  marketId: SortOrder
  marketIdx: SortOrder
  sumFeePaid: SortOrder
  sumUsed: SortOrder
  timestamp: SortOrder
  trailingAvgTime: SortOrder
  trailingStartTimestamp: SortOrder
}

type Cache_candleCountAggregate {
  _all: Int!
  address: Int!
  candleType: Int!
  chainId: Int!
  close: Int!
  createdAt: Int!
  endTimestamp: Int!
  high: Int!
  id: Int!
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: Int!
  marketId: Int!
  marketIdx: Int!
  open: Int!
  resourceSlug: Int!
  sumFeePaid: Int!
  sumUsed: Int!
  timestamp: Int!
  trailingAvgTime: Int!
  trailingStartTimestamp: Int!
}

input Cache_candleCountOrderByAggregateInput {
  address: SortOrder
  candleType: SortOrder
  chainId: SortOrder
  close: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  high: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  low: SortOrder
  marketId: SortOrder
  marketIdx: SortOrder
  open: SortOrder
  resourceSlug: SortOrder
  sumFeePaid: SortOrder
  sumUsed: SortOrder
  timestamp: SortOrder
  trailingAvgTime: SortOrder
  trailingStartTimestamp: SortOrder
}

input Cache_candleCreateInput {
  address: String
  candleType: String!
  chainId: Int
  close: String!
  createdAt: DateTimeISO
  endTimestamp: Int!
  high: String!
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: String!
  marketId: Int
  marketIdx: Int
  open: String!
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int!
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

input Cache_candleCreateManyInput {
  address: String
  candleType: String!
  chainId: Int
  close: String!
  createdAt: DateTimeISO
  endTimestamp: Int!
  high: String!
  id: Int
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: String!
  marketId: Int
  marketIdx: Int
  open: String!
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int!
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

type Cache_candleGroupBy {
  _avg: Cache_candleAvgAggregate
  _count: Cache_candleCountAggregate
  _max: Cache_candleMaxAggregate
  _min: Cache_candleMinAggregate
  _sum: Cache_candleSumAggregate
  address: String
  candleType: String!
  chainId: Int
  close: String!
  createdAt: DateTimeISO!
  endTimestamp: Int!
  high: String!
  id: Int!
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: String!
  marketId: Int
  marketIdx: Int
  open: String!
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int!
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

type Cache_candleMaxAggregate {
  address: String
  candleType: String
  chainId: Int
  close: String
  createdAt: DateTimeISO
  endTimestamp: Int
  high: String
  id: Int
  interval: Int
  lastUpdatedTimestamp: Int
  low: String
  marketId: Int
  marketIdx: Int
  open: String
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

input Cache_candleMaxOrderByAggregateInput {
  address: SortOrder
  candleType: SortOrder
  chainId: SortOrder
  close: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  high: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  low: SortOrder
  marketId: SortOrder
  marketIdx: SortOrder
  open: SortOrder
  resourceSlug: SortOrder
  sumFeePaid: SortOrder
  sumUsed: SortOrder
  timestamp: SortOrder
  trailingAvgTime: SortOrder
  trailingStartTimestamp: SortOrder
}

type Cache_candleMinAggregate {
  address: String
  candleType: String
  chainId: Int
  close: String
  createdAt: DateTimeISO
  endTimestamp: Int
  high: String
  id: Int
  interval: Int
  lastUpdatedTimestamp: Int
  low: String
  marketId: Int
  marketIdx: Int
  open: String
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

input Cache_candleMinOrderByAggregateInput {
  address: SortOrder
  candleType: SortOrder
  chainId: SortOrder
  close: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  high: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  low: SortOrder
  marketId: SortOrder
  marketIdx: SortOrder
  open: SortOrder
  resourceSlug: SortOrder
  sumFeePaid: SortOrder
  sumUsed: SortOrder
  timestamp: SortOrder
  trailingAvgTime: SortOrder
  trailingStartTimestamp: SortOrder
}

input Cache_candleOrderByWithAggregationInput {
  _avg: Cache_candleAvgOrderByAggregateInput
  _count: Cache_candleCountOrderByAggregateInput
  _max: Cache_candleMaxOrderByAggregateInput
  _min: Cache_candleMinOrderByAggregateInput
  _sum: Cache_candleSumOrderByAggregateInput
  address: SortOrderInput
  candleType: SortOrder
  chainId: SortOrderInput
  close: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  high: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  low: SortOrder
  marketId: SortOrderInput
  marketIdx: SortOrderInput
  open: SortOrder
  resourceSlug: SortOrderInput
  sumFeePaid: SortOrderInput
  sumUsed: SortOrderInput
  timestamp: SortOrder
  trailingAvgTime: SortOrderInput
  trailingStartTimestamp: SortOrderInput
}

input Cache_candleOrderByWithRelationInput {
  address: SortOrderInput
  candleType: SortOrder
  chainId: SortOrderInput
  close: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  high: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  low: SortOrder
  marketId: SortOrderInput
  marketIdx: SortOrderInput
  open: SortOrder
  resourceSlug: SortOrderInput
  sumFeePaid: SortOrderInput
  sumUsed: SortOrderInput
  timestamp: SortOrder
  trailingAvgTime: SortOrderInput
  trailingStartTimestamp: SortOrderInput
}

enum Cache_candleScalarFieldEnum {
  address
  candleType
  chainId
  close
  createdAt
  endTimestamp
  high
  id
  interval
  lastUpdatedTimestamp
  low
  marketId
  marketIdx
  open
  resourceSlug
  sumFeePaid
  sumUsed
  timestamp
  trailingAvgTime
  trailingStartTimestamp
}

input Cache_candleScalarWhereWithAggregatesInput {
  AND: [Cache_candleScalarWhereWithAggregatesInput!]
  NOT: [Cache_candleScalarWhereWithAggregatesInput!]
  OR: [Cache_candleScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  candleType: StringWithAggregatesFilter
  chainId: IntNullableWithAggregatesFilter
  close: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  endTimestamp: IntWithAggregatesFilter
  high: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  interval: IntWithAggregatesFilter
  lastUpdatedTimestamp: IntWithAggregatesFilter
  low: StringWithAggregatesFilter
  marketId: IntNullableWithAggregatesFilter
  marketIdx: IntNullableWithAggregatesFilter
  open: StringWithAggregatesFilter
  resourceSlug: StringNullableWithAggregatesFilter
  sumFeePaid: DecimalNullableWithAggregatesFilter
  sumUsed: DecimalNullableWithAggregatesFilter
  timestamp: IntWithAggregatesFilter
  trailingAvgTime: IntNullableWithAggregatesFilter
  trailingStartTimestamp: IntNullableWithAggregatesFilter
}

type Cache_candleSumAggregate {
  chainId: Int
  endTimestamp: Int
  id: Int
  interval: Int
  lastUpdatedTimestamp: Int
  marketId: Int
  marketIdx: Int
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

input Cache_candleSumOrderByAggregateInput {
  chainId: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  interval: SortOrder
  lastUpdatedTimestamp: SortOrder
  marketId: SortOrder
  marketIdx: SortOrder
  sumFeePaid: SortOrder
  sumUsed: SortOrder
  timestamp: SortOrder
  trailingAvgTime: SortOrder
  trailingStartTimestamp: SortOrder
}

input Cache_candleUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  candleType: StringFieldUpdateOperationsInput
  chainId: NullableIntFieldUpdateOperationsInput
  close: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: IntFieldUpdateOperationsInput
  high: StringFieldUpdateOperationsInput
  interval: IntFieldUpdateOperationsInput
  lastUpdatedTimestamp: IntFieldUpdateOperationsInput
  low: StringFieldUpdateOperationsInput
  marketId: NullableIntFieldUpdateOperationsInput
  marketIdx: NullableIntFieldUpdateOperationsInput
  open: StringFieldUpdateOperationsInput
  resourceSlug: NullableStringFieldUpdateOperationsInput
  sumFeePaid: NullableDecimalFieldUpdateOperationsInput
  sumUsed: NullableDecimalFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  trailingAvgTime: NullableIntFieldUpdateOperationsInput
  trailingStartTimestamp: NullableIntFieldUpdateOperationsInput
}

input Cache_candleUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  candleType: StringFieldUpdateOperationsInput
  chainId: NullableIntFieldUpdateOperationsInput
  close: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: IntFieldUpdateOperationsInput
  high: StringFieldUpdateOperationsInput
  interval: IntFieldUpdateOperationsInput
  lastUpdatedTimestamp: IntFieldUpdateOperationsInput
  low: StringFieldUpdateOperationsInput
  marketId: NullableIntFieldUpdateOperationsInput
  marketIdx: NullableIntFieldUpdateOperationsInput
  open: StringFieldUpdateOperationsInput
  resourceSlug: NullableStringFieldUpdateOperationsInput
  sumFeePaid: NullableDecimalFieldUpdateOperationsInput
  sumUsed: NullableDecimalFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  trailingAvgTime: NullableIntFieldUpdateOperationsInput
  trailingStartTimestamp: NullableIntFieldUpdateOperationsInput
}

input Cache_candleWhereInput {
  AND: [Cache_candleWhereInput!]
  NOT: [Cache_candleWhereInput!]
  OR: [Cache_candleWhereInput!]
  address: StringNullableFilter
  candleType: StringFilter
  chainId: IntNullableFilter
  close: StringFilter
  createdAt: DateTimeFilter
  endTimestamp: IntFilter
  high: StringFilter
  id: IntFilter
  interval: IntFilter
  lastUpdatedTimestamp: IntFilter
  low: StringFilter
  marketId: IntNullableFilter
  marketIdx: IntNullableFilter
  open: StringFilter
  resourceSlug: StringNullableFilter
  sumFeePaid: DecimalNullableFilter
  sumUsed: DecimalNullableFilter
  timestamp: IntFilter
  trailingAvgTime: IntNullableFilter
  trailingStartTimestamp: IntNullableFilter
}

input Cache_candleWhereUniqueInput {
  AND: [Cache_candleWhereInput!]
  NOT: [Cache_candleWhereInput!]
  OR: [Cache_candleWhereInput!]
  address: StringNullableFilter
  candleType: StringFilter
  candleType_interval_timestamp_resourceSlug_marketIdx_trailingAvgTime: cache_candleCandleTypeIntervalTimestampResourceSlugMarketIdxTrailingAvgTimeCompoundUniqueInput
  chainId: IntNullableFilter
  close: StringFilter
  createdAt: DateTimeFilter
  endTimestamp: IntFilter
  high: StringFilter
  id: Int
  interval: IntFilter
  lastUpdatedTimestamp: IntFilter
  low: StringFilter
  marketId: IntNullableFilter
  marketIdx: IntNullableFilter
  open: StringFilter
  resourceSlug: StringNullableFilter
  sumFeePaid: DecimalNullableFilter
  sumUsed: DecimalNullableFilter
  timestamp: IntFilter
  trailingAvgTime: IntNullableFilter
  trailingStartTimestamp: IntNullableFilter
}

type Cache_param {
  createdAt: DateTimeISO!
  id: Int!
  paramName: String!
  paramValueNumber: Decimal!
  paramValueString: String
}

type Cache_paramAvgAggregate {
  id: Float
  paramValueNumber: Decimal
}

input Cache_paramAvgOrderByAggregateInput {
  id: SortOrder
  paramValueNumber: SortOrder
}

type Cache_paramCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  paramName: Int!
  paramValueNumber: Int!
  paramValueString: Int!
}

input Cache_paramCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  paramName: SortOrder
  paramValueNumber: SortOrder
  paramValueString: SortOrder
}

input Cache_paramCreateInput {
  createdAt: DateTimeISO
  paramName: String!
  paramValueNumber: Decimal!
  paramValueString: String
}

input Cache_paramCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  paramName: String!
  paramValueNumber: Decimal!
  paramValueString: String
}

type Cache_paramGroupBy {
  _avg: Cache_paramAvgAggregate
  _count: Cache_paramCountAggregate
  _max: Cache_paramMaxAggregate
  _min: Cache_paramMinAggregate
  _sum: Cache_paramSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  paramName: String!
  paramValueNumber: Decimal!
  paramValueString: String
}

type Cache_paramMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  paramName: String
  paramValueNumber: Decimal
  paramValueString: String
}

input Cache_paramMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  paramName: SortOrder
  paramValueNumber: SortOrder
  paramValueString: SortOrder
}

type Cache_paramMinAggregate {
  createdAt: DateTimeISO
  id: Int
  paramName: String
  paramValueNumber: Decimal
  paramValueString: String
}

input Cache_paramMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  paramName: SortOrder
  paramValueNumber: SortOrder
  paramValueString: SortOrder
}

input Cache_paramOrderByWithAggregationInput {
  _avg: Cache_paramAvgOrderByAggregateInput
  _count: Cache_paramCountOrderByAggregateInput
  _max: Cache_paramMaxOrderByAggregateInput
  _min: Cache_paramMinOrderByAggregateInput
  _sum: Cache_paramSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  paramName: SortOrder
  paramValueNumber: SortOrder
  paramValueString: SortOrderInput
}

input Cache_paramOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  paramName: SortOrder
  paramValueNumber: SortOrder
  paramValueString: SortOrderInput
}

enum Cache_paramScalarFieldEnum {
  createdAt
  id
  paramName
  paramValueNumber
  paramValueString
}

input Cache_paramScalarWhereWithAggregatesInput {
  AND: [Cache_paramScalarWhereWithAggregatesInput!]
  NOT: [Cache_paramScalarWhereWithAggregatesInput!]
  OR: [Cache_paramScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  paramName: StringWithAggregatesFilter
  paramValueNumber: DecimalWithAggregatesFilter
  paramValueString: StringNullableWithAggregatesFilter
}

type Cache_paramSumAggregate {
  id: Int
  paramValueNumber: Decimal
}

input Cache_paramSumOrderByAggregateInput {
  id: SortOrder
  paramValueNumber: SortOrder
}

input Cache_paramUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  paramName: StringFieldUpdateOperationsInput
  paramValueNumber: DecimalFieldUpdateOperationsInput
  paramValueString: NullableStringFieldUpdateOperationsInput
}

input Cache_paramUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  paramName: StringFieldUpdateOperationsInput
  paramValueNumber: DecimalFieldUpdateOperationsInput
  paramValueString: NullableStringFieldUpdateOperationsInput
}

input Cache_paramWhereInput {
  AND: [Cache_paramWhereInput!]
  NOT: [Cache_paramWhereInput!]
  OR: [Cache_paramWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  paramName: StringFilter
  paramValueNumber: DecimalFilter
  paramValueString: StringNullableFilter
}

input Cache_paramWhereUniqueInput {
  AND: [Cache_paramWhereInput!]
  NOT: [Cache_paramWhereInput!]
  OR: [Cache_paramWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  paramName: String
  paramValueNumber: DecimalFilter
  paramValueString: StringNullableFilter
}

type CandleAndTimestampType {
  data: [CandleType!]!
  lastUpdateTimestamp: Int!
}

type CandleType {
  close: String!
  high: String!
  low: String!
  open: String!
  timestamp: Int!
}

type Category {
  _count: CategoryCount
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

type CategoryAvgAggregate {
  id: Float
}

input CategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type CategoryCount {
  market_group(where: Market_groupWhereInput): Int!
  resource(where: ResourceWhereInput): Int!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input CategoryCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input CategoryCreateInput {
  createdAt: DateTimeISO
  market_group: Market_groupCreateNestedManyWithoutCategoryInput
  name: String!
  resource: ResourceCreateNestedManyWithoutCategoryInput
  slug: String!
}

input CategoryCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  name: String!
  slug: String!
}

input CategoryCreateNestedOneWithoutMarket_groupInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutMarket_groupInput
  create: CategoryCreateWithoutMarket_groupInput
}

input CategoryCreateNestedOneWithoutResourceInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutResourceInput
  create: CategoryCreateWithoutResourceInput
}

input CategoryCreateOrConnectWithoutMarket_groupInput {
  create: CategoryCreateWithoutMarket_groupInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutResourceInput {
  create: CategoryCreateWithoutResourceInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutMarket_groupInput {
  createdAt: DateTimeISO
  name: String!
  resource: ResourceCreateNestedManyWithoutCategoryInput
  slug: String!
}

input CategoryCreateWithoutResourceInput {
  createdAt: DateTimeISO
  market_group: Market_groupCreateNestedManyWithoutCategoryInput
  name: String!
  slug: String!
}

type CategoryGroupBy {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

type CategoryMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  slug: String
}

input CategoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type CategoryMinAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  slug: String
}

input CategoryMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input CategoryNullableRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryOrderByWithAggregationInput {
  _avg: CategoryAvgOrderByAggregateInput
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  _sum: CategorySumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input CategoryOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  market_group: Market_groupOrderByRelationAggregateInput
  name: SortOrder
  resource: ResourceOrderByRelationAggregateInput
  slug: SortOrder
}

enum CategoryScalarFieldEnum {
  createdAt
  id
  name
  slug
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type CategorySumAggregate {
  id: Int
}

input CategorySumOrderByAggregateInput {
  id: SortOrder
}

input CategoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  market_group: Market_groupUpdateManyWithoutCategoryNestedInput
  name: StringFieldUpdateOperationsInput
  resource: ResourceUpdateManyWithoutCategoryNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateOneWithoutMarket_groupNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutMarket_groupInput
  create: CategoryCreateWithoutMarket_groupInput
  delete: CategoryWhereInput
  disconnect: CategoryWhereInput
  update: CategoryUpdateToOneWithWhereWithoutMarket_groupInput
  upsert: CategoryUpsertWithoutMarket_groupInput
}

input CategoryUpdateOneWithoutResourceNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutResourceInput
  create: CategoryCreateWithoutResourceInput
  delete: CategoryWhereInput
  disconnect: CategoryWhereInput
  update: CategoryUpdateToOneWithWhereWithoutResourceInput
  upsert: CategoryUpsertWithoutResourceInput
}

input CategoryUpdateToOneWithWhereWithoutMarket_groupInput {
  data: CategoryUpdateWithoutMarket_groupInput!
  where: CategoryWhereInput
}

input CategoryUpdateToOneWithWhereWithoutResourceInput {
  data: CategoryUpdateWithoutResourceInput!
  where: CategoryWhereInput
}

input CategoryUpdateWithoutMarket_groupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resource: ResourceUpdateManyWithoutCategoryNestedInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithoutResourceInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  market_group: Market_groupUpdateManyWithoutCategoryNestedInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutMarket_groupInput {
  create: CategoryCreateWithoutMarket_groupInput!
  update: CategoryUpdateWithoutMarket_groupInput!
  where: CategoryWhereInput
}

input CategoryUpsertWithoutResourceInput {
  create: CategoryCreateWithoutResourceInput!
  update: CategoryUpdateWithoutResourceInput!
  where: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  market_group: Market_groupListRelationFilter
  name: StringFilter
  resource: ResourceListRelationFilter
  slug: StringFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  market_group: Market_groupListRelationFilter
  name: String
  resource: ResourceListRelationFilter
  slug: String
}

type Collateral_transfer {
  collateral: Decimal!
  createdAt: DateTimeISO!
  id: Int!
  owner: String!
  timestamp: Int!
  transactionHash: String!
}

type Collateral_transferAvgAggregate {
  collateral: Decimal
  id: Float
  timestamp: Float
}

input Collateral_transferAvgOrderByAggregateInput {
  collateral: SortOrder
  id: SortOrder
  timestamp: SortOrder
}

type Collateral_transferCountAggregate {
  _all: Int!
  collateral: Int!
  createdAt: Int!
  id: Int!
  owner: Int!
  timestamp: Int!
  transactionHash: Int!
}

input Collateral_transferCountOrderByAggregateInput {
  collateral: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

input Collateral_transferCreateInput {
  collateral: Decimal!
  createdAt: DateTimeISO
  owner: String!
  timestamp: Int!
  transaction: TransactionCreateNestedOneWithoutCollateral_transferInput
  transactionHash: String!
}

input Collateral_transferCreateManyInput {
  collateral: Decimal!
  createdAt: DateTimeISO
  id: Int
  owner: String!
  timestamp: Int!
  transactionHash: String!
}

input Collateral_transferCreateNestedOneWithoutTransactionInput {
  connect: Collateral_transferWhereUniqueInput
  connectOrCreate: Collateral_transferCreateOrConnectWithoutTransactionInput
  create: Collateral_transferCreateWithoutTransactionInput
}

input Collateral_transferCreateOrConnectWithoutTransactionInput {
  create: Collateral_transferCreateWithoutTransactionInput!
  where: Collateral_transferWhereUniqueInput!
}

input Collateral_transferCreateWithoutTransactionInput {
  collateral: Decimal!
  createdAt: DateTimeISO
  owner: String!
  timestamp: Int!
  transactionHash: String!
}

type Collateral_transferGroupBy {
  _avg: Collateral_transferAvgAggregate
  _count: Collateral_transferCountAggregate
  _max: Collateral_transferMaxAggregate
  _min: Collateral_transferMinAggregate
  _sum: Collateral_transferSumAggregate
  collateral: Decimal!
  createdAt: DateTimeISO!
  id: Int!
  owner: String!
  timestamp: Int!
  transactionHash: String!
}

type Collateral_transferMaxAggregate {
  collateral: Decimal
  createdAt: DateTimeISO
  id: Int
  owner: String
  timestamp: Int
  transactionHash: String
}

input Collateral_transferMaxOrderByAggregateInput {
  collateral: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

type Collateral_transferMinAggregate {
  collateral: Decimal
  createdAt: DateTimeISO
  id: Int
  owner: String
  timestamp: Int
  transactionHash: String
}

input Collateral_transferMinOrderByAggregateInput {
  collateral: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

input Collateral_transferNullableRelationFilter {
  is: Collateral_transferWhereInput
  isNot: Collateral_transferWhereInput
}

input Collateral_transferOrderByWithAggregationInput {
  _avg: Collateral_transferAvgOrderByAggregateInput
  _count: Collateral_transferCountOrderByAggregateInput
  _max: Collateral_transferMaxOrderByAggregateInput
  _min: Collateral_transferMinOrderByAggregateInput
  _sum: Collateral_transferSumOrderByAggregateInput
  collateral: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

input Collateral_transferOrderByWithRelationInput {
  collateral: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: SortOrder
  timestamp: SortOrder
  transaction: TransactionOrderByWithRelationInput
  transactionHash: SortOrder
}

enum Collateral_transferScalarFieldEnum {
  collateral
  createdAt
  id
  owner
  timestamp
  transactionHash
}

input Collateral_transferScalarWhereWithAggregatesInput {
  AND: [Collateral_transferScalarWhereWithAggregatesInput!]
  NOT: [Collateral_transferScalarWhereWithAggregatesInput!]
  OR: [Collateral_transferScalarWhereWithAggregatesInput!]
  collateral: DecimalWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  owner: StringWithAggregatesFilter
  timestamp: IntWithAggregatesFilter
  transactionHash: StringWithAggregatesFilter
}

type Collateral_transferSumAggregate {
  collateral: Decimal
  id: Int
  timestamp: Int
}

input Collateral_transferSumOrderByAggregateInput {
  collateral: SortOrder
  id: SortOrder
  timestamp: SortOrder
}

input Collateral_transferUpdateInput {
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  owner: StringFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  transaction: TransactionUpdateOneWithoutCollateral_transferNestedInput
  transactionHash: StringFieldUpdateOperationsInput
}

input Collateral_transferUpdateManyMutationInput {
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  owner: StringFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  transactionHash: StringFieldUpdateOperationsInput
}

input Collateral_transferUpdateOneWithoutTransactionNestedInput {
  connect: Collateral_transferWhereUniqueInput
  connectOrCreate: Collateral_transferCreateOrConnectWithoutTransactionInput
  create: Collateral_transferCreateWithoutTransactionInput
  delete: Collateral_transferWhereInput
  disconnect: Collateral_transferWhereInput
  update: Collateral_transferUpdateToOneWithWhereWithoutTransactionInput
  upsert: Collateral_transferUpsertWithoutTransactionInput
}

input Collateral_transferUpdateToOneWithWhereWithoutTransactionInput {
  data: Collateral_transferUpdateWithoutTransactionInput!
  where: Collateral_transferWhereInput
}

input Collateral_transferUpdateWithoutTransactionInput {
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  owner: StringFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  transactionHash: StringFieldUpdateOperationsInput
}

input Collateral_transferUpsertWithoutTransactionInput {
  create: Collateral_transferCreateWithoutTransactionInput!
  update: Collateral_transferUpdateWithoutTransactionInput!
  where: Collateral_transferWhereInput
}

input Collateral_transferWhereInput {
  AND: [Collateral_transferWhereInput!]
  NOT: [Collateral_transferWhereInput!]
  OR: [Collateral_transferWhereInput!]
  collateral: DecimalFilter
  createdAt: DateTimeFilter
  id: IntFilter
  owner: StringFilter
  timestamp: IntFilter
  transaction: TransactionNullableRelationFilter
  transactionHash: StringFilter
}

input Collateral_transferWhereUniqueInput {
  AND: [Collateral_transferWhereInput!]
  NOT: [Collateral_transferWhereInput!]
  OR: [Collateral_transferWhereInput!]
  collateral: DecimalFilter
  createdAt: DateTimeFilter
  id: Int
  owner: StringFilter
  timestamp: IntFilter
  transaction: TransactionNullableRelationFilter
  transactionHash: String
}

type CreateManyAndReturnCache_candle {
  address: String
  candleType: String!
  chainId: Int
  close: String!
  createdAt: DateTimeISO!
  endTimestamp: Int!
  high: String!
  id: Int!
  interval: Int!
  lastUpdatedTimestamp: Int!
  low: String!
  marketId: Int
  marketIdx: Int
  open: String!
  resourceSlug: String
  sumFeePaid: Decimal
  sumUsed: Decimal
  timestamp: Int!
  trailingAvgTime: Int
  trailingStartTimestamp: Int
}

type CreateManyAndReturnCache_param {
  createdAt: DateTimeISO!
  id: Int!
  paramName: String!
  paramValueNumber: Decimal!
  paramValueString: String
}

type CreateManyAndReturnCategory {
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

type CreateManyAndReturnCollateral_transfer {
  collateral: Decimal!
  createdAt: DateTimeISO!
  id: Int!
  owner: String!
  timestamp: Int!
  transactionHash: String!
}

type CreateManyAndReturnCrypto_prices {
  id: Int!
  price: Float!
  ticker: String
  timestamp: DateTimeISO!
}

type CreateManyAndReturnEvent {
  blockNumber: Int!
  createdAt: DateTimeISO!
  id: Int!
  logData: JSON!
  logIndex: Int!
  marketGroupId: Int
  market_group(where: Market_groupWhereInput): Market_group
  timestamp: BigInt!
  transactionHash: String!
}

type CreateManyAndReturnMarket {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO!
  endTimestamp: Int
  id: Int!
  marketGroupId: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  market_group(where: Market_groupWhereInput): Market_group
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean!
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

type CreateManyAndReturnMarket_group {
  address: String
  baseTokenName: String
  category(where: CategoryWhereInput): Category
  categoryId: Int
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO!
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int!
  initializationNonce: String
  isCumulative: Boolean!
  isYin: Boolean!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resource(where: ResourceWhereInput): Resource
  resourceId: Int
  vaultAddress: String
}

type CreateManyAndReturnMarket_price {
  createdAt: DateTimeISO!
  id: Int!
  timestamp: BigInt!
  value: Decimal!
}

type CreateManyAndReturnMigrations {
  id: Int!
  name: String!
  timestamp: BigInt!
}

type CreateManyAndReturnPosition {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO!
  highPriceTick: Decimal
  id: Int!
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  market(where: MarketWhereInput): Market
  marketId: Int
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

type CreateManyAndReturnRender_job {
  createdAt: DateTimeISO!
  id: Int!
  jobId: String!
  serviceId: String!
}

type CreateManyAndReturnResource {
  category(where: CategoryWhereInput): Category
  categoryId: Int
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

type CreateManyAndReturnResource_price {
  blockNumber: Int!
  createdAt: DateTimeISO!
  feePaid: Decimal!
  id: Int!
  resource(where: ResourceWhereInput): Resource
  resourceId: Int
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

type CreateManyAndReturnTransaction {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateralTransferId: Int
  collateral_transfer(where: Collateral_transferWhereInput): Collateral_transfer
  createdAt: DateTimeISO!
  event(where: EventWhereInput): Event
  eventId: Int
  id: Int!
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  market_price(where: Market_priceWhereInput): Market_price
  position(where: PositionWhereInput): Position
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

type Crypto_prices {
  id: Int!
  price: Float!
  ticker: String
  timestamp: DateTimeISO!
}

type Crypto_pricesAvgAggregate {
  id: Float
  price: Float
}

input Crypto_pricesAvgOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
}

type Crypto_pricesCountAggregate {
  _all: Int!
  id: Int!
  price: Int!
  ticker: Int!
  timestamp: Int!
}

input Crypto_pricesCountOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  ticker: SortOrder
  timestamp: SortOrder
}

input Crypto_pricesCreateInput {
  price: Float!
  ticker: String
  timestamp: DateTimeISO
}

input Crypto_pricesCreateManyInput {
  id: Int
  price: Float!
  ticker: String
  timestamp: DateTimeISO
}

type Crypto_pricesGroupBy {
  _avg: Crypto_pricesAvgAggregate
  _count: Crypto_pricesCountAggregate
  _max: Crypto_pricesMaxAggregate
  _min: Crypto_pricesMinAggregate
  _sum: Crypto_pricesSumAggregate
  id: Int!
  price: Float!
  ticker: String
  timestamp: DateTimeISO!
}

type Crypto_pricesMaxAggregate {
  id: Int
  price: Float
  ticker: String
  timestamp: DateTimeISO
}

input Crypto_pricesMaxOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  ticker: SortOrder
  timestamp: SortOrder
}

type Crypto_pricesMinAggregate {
  id: Int
  price: Float
  ticker: String
  timestamp: DateTimeISO
}

input Crypto_pricesMinOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  ticker: SortOrder
  timestamp: SortOrder
}

input Crypto_pricesOrderByWithAggregationInput {
  _avg: Crypto_pricesAvgOrderByAggregateInput
  _count: Crypto_pricesCountOrderByAggregateInput
  _max: Crypto_pricesMaxOrderByAggregateInput
  _min: Crypto_pricesMinOrderByAggregateInput
  _sum: Crypto_pricesSumOrderByAggregateInput
  id: SortOrder
  price: SortOrder
  ticker: SortOrderInput
  timestamp: SortOrder
}

input Crypto_pricesOrderByWithRelationInput {
  id: SortOrder
  price: SortOrder
  ticker: SortOrderInput
  timestamp: SortOrder
}

enum Crypto_pricesScalarFieldEnum {
  id
  price
  ticker
  timestamp
}

input Crypto_pricesScalarWhereWithAggregatesInput {
  AND: [Crypto_pricesScalarWhereWithAggregatesInput!]
  NOT: [Crypto_pricesScalarWhereWithAggregatesInput!]
  OR: [Crypto_pricesScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  price: FloatWithAggregatesFilter
  ticker: StringNullableWithAggregatesFilter
  timestamp: DateTimeWithAggregatesFilter
}

type Crypto_pricesSumAggregate {
  id: Int
  price: Float
}

input Crypto_pricesSumOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
}

input Crypto_pricesUpdateInput {
  price: FloatFieldUpdateOperationsInput
  ticker: NullableStringFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
}

input Crypto_pricesUpdateManyMutationInput {
  price: FloatFieldUpdateOperationsInput
  ticker: NullableStringFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
}

input Crypto_pricesWhereInput {
  AND: [Crypto_pricesWhereInput!]
  NOT: [Crypto_pricesWhereInput!]
  OR: [Crypto_pricesWhereInput!]
  id: IntFilter
  price: FloatFilter
  ticker: StringNullableFilter
  timestamp: DateTimeFilter
}

input Crypto_pricesWhereUniqueInput {
  AND: [Crypto_pricesWhereInput!]
  NOT: [Crypto_pricesWhereInput!]
  OR: [Crypto_pricesWhereInput!]
  id: Int
  price: FloatFilter
  ticker: StringNullableFilter
  timestamp: DateTimeFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input DecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal!]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input Enumtransaction_type_enumFieldUpdateOperationsInput {
  set: transaction_type_enum
}

input Enumtransaction_type_enumFilter {
  equals: transaction_type_enum
  in: [transaction_type_enum!]
  not: NestedEnumtransaction_type_enumFilter
  notIn: [transaction_type_enum!]
}

input Enumtransaction_type_enumWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumtransaction_type_enumFilter
  _min: NestedEnumtransaction_type_enumFilter
  equals: transaction_type_enum
  in: [transaction_type_enum!]
  not: NestedEnumtransaction_type_enumWithAggregatesFilter
  notIn: [transaction_type_enum!]
}

type Event {
  blockNumber: Int!
  createdAt: DateTimeISO!
  id: Int!
  logData: JSON!
  logIndex: Int!
  marketGroupId: Int
  timestamp: BigInt!
  transactionHash: String!
}

type EventAvgAggregate {
  blockNumber: Float
  id: Float
  logIndex: Float
  marketGroupId: Float
  timestamp: Float
}

input EventAvgOrderByAggregateInput {
  blockNumber: SortOrder
  id: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrder
  timestamp: SortOrder
}

type EventCountAggregate {
  _all: Int!
  blockNumber: Int!
  createdAt: Int!
  id: Int!
  logData: Int!
  logIndex: Int!
  marketGroupId: Int!
  timestamp: Int!
  transactionHash: Int!
}

input EventCountOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logData: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

input EventCreateInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  logData: JSON!
  logIndex: Int!
  market_group: Market_groupCreateNestedOneWithoutEventInput
  timestamp: BigInt!
  transaction: TransactionCreateNestedOneWithoutEventInput
  transactionHash: String!
}

input EventCreateManyInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  id: Int
  logData: JSON!
  logIndex: Int!
  marketGroupId: Int
  timestamp: BigInt!
  transactionHash: String!
}

input EventCreateManyMarket_groupInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  id: Int
  logData: JSON!
  logIndex: Int!
  timestamp: BigInt!
  transactionHash: String!
}

input EventCreateManyMarket_groupInputEnvelope {
  data: [EventCreateManyMarket_groupInput!]!
  skipDuplicates: Boolean
}

input EventCreateNestedManyWithoutMarket_groupInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutMarket_groupInput!]
  create: [EventCreateWithoutMarket_groupInput!]
  createMany: EventCreateManyMarket_groupInputEnvelope
}

input EventCreateNestedOneWithoutTransactionInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutTransactionInput
  create: EventCreateWithoutTransactionInput
}

input EventCreateOrConnectWithoutMarket_groupInput {
  create: EventCreateWithoutMarket_groupInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutTransactionInput {
  create: EventCreateWithoutTransactionInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutMarket_groupInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  logData: JSON!
  logIndex: Int!
  timestamp: BigInt!
  transaction: TransactionCreateNestedOneWithoutEventInput
  transactionHash: String!
}

input EventCreateWithoutTransactionInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  logData: JSON!
  logIndex: Int!
  market_group: Market_groupCreateNestedOneWithoutEventInput
  timestamp: BigInt!
  transactionHash: String!
}

type EventGroupBy {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
  blockNumber: Int!
  createdAt: DateTimeISO!
  id: Int!
  logData: JSON!
  logIndex: Int!
  marketGroupId: Int
  timestamp: BigInt!
  transactionHash: String!
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

type EventMaxAggregate {
  blockNumber: Int
  createdAt: DateTimeISO
  id: Int
  logIndex: Int
  marketGroupId: Int
  timestamp: BigInt
  transactionHash: String
}

input EventMaxOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

type EventMinAggregate {
  blockNumber: Int
  createdAt: DateTimeISO
  id: Int
  logIndex: Int
  marketGroupId: Int
  timestamp: BigInt
  transactionHash: String
}

input EventMinOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrder
  timestamp: SortOrder
  transactionHash: SortOrder
}

input EventNullableRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithAggregationInput {
  _avg: EventAvgOrderByAggregateInput
  _count: EventCountOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  _sum: EventSumOrderByAggregateInput
  blockNumber: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logData: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrderInput
  timestamp: SortOrder
  transactionHash: SortOrder
}

input EventOrderByWithRelationInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  id: SortOrder
  logData: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrderInput
  market_group: Market_groupOrderByWithRelationInput
  timestamp: SortOrder
  transaction: TransactionOrderByWithRelationInput
  transactionHash: SortOrder
}

enum EventScalarFieldEnum {
  blockNumber
  createdAt
  id
  logData
  logIndex
  marketGroupId
  timestamp
  transactionHash
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  logData: JsonFilter
  logIndex: IntFilter
  marketGroupId: IntNullableFilter
  timestamp: BigIntFilter
  transactionHash: StringFilter
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  blockNumber: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  logData: JsonWithAggregatesFilter
  logIndex: IntWithAggregatesFilter
  marketGroupId: IntNullableWithAggregatesFilter
  timestamp: BigIntWithAggregatesFilter
  transactionHash: StringWithAggregatesFilter
}

type EventSumAggregate {
  blockNumber: Int
  id: Int
  logIndex: Int
  marketGroupId: Int
  timestamp: BigInt
}

input EventSumOrderByAggregateInput {
  blockNumber: SortOrder
  id: SortOrder
  logIndex: SortOrder
  marketGroupId: SortOrder
  timestamp: SortOrder
}

input EventUpdateInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  logData: JSON
  logIndex: IntFieldUpdateOperationsInput
  market_group: Market_groupUpdateOneWithoutEventNestedInput
  timestamp: BigIntFieldUpdateOperationsInput
  transaction: TransactionUpdateOneWithoutEventNestedInput
  transactionHash: StringFieldUpdateOperationsInput
}

input EventUpdateManyMutationInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  logData: JSON
  logIndex: IntFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
  transactionHash: StringFieldUpdateOperationsInput
}

input EventUpdateManyWithWhereWithoutMarket_groupInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithoutMarket_groupNestedInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutMarket_groupInput!]
  create: [EventCreateWithoutMarket_groupInput!]
  createMany: EventCreateManyMarket_groupInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutMarket_groupInput!]
  updateMany: [EventUpdateManyWithWhereWithoutMarket_groupInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutMarket_groupInput!]
}

input EventUpdateOneWithoutTransactionNestedInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutTransactionInput
  create: EventCreateWithoutTransactionInput
  delete: EventWhereInput
  disconnect: EventWhereInput
  update: EventUpdateToOneWithWhereWithoutTransactionInput
  upsert: EventUpsertWithoutTransactionInput
}

input EventUpdateToOneWithWhereWithoutTransactionInput {
  data: EventUpdateWithoutTransactionInput!
  where: EventWhereInput
}

input EventUpdateWithWhereUniqueWithoutMarket_groupInput {
  data: EventUpdateWithoutMarket_groupInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithoutMarket_groupInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  logData: JSON
  logIndex: IntFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
  transaction: TransactionUpdateOneWithoutEventNestedInput
  transactionHash: StringFieldUpdateOperationsInput
}

input EventUpdateWithoutTransactionInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  logData: JSON
  logIndex: IntFieldUpdateOperationsInput
  market_group: Market_groupUpdateOneWithoutEventNestedInput
  timestamp: BigIntFieldUpdateOperationsInput
  transactionHash: StringFieldUpdateOperationsInput
}

input EventUpsertWithWhereUniqueWithoutMarket_groupInput {
  create: EventCreateWithoutMarket_groupInput!
  update: EventUpdateWithoutMarket_groupInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutTransactionInput {
  create: EventCreateWithoutTransactionInput!
  update: EventUpdateWithoutTransactionInput!
  where: EventWhereInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  logData: JsonFilter
  logIndex: IntFilter
  marketGroupId: IntNullableFilter
  market_group: Market_groupNullableRelationFilter
  timestamp: BigIntFilter
  transaction: TransactionNullableRelationFilter
  transactionHash: StringFilter
}

input EventWhereUniqueInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  id: Int
  logData: JsonFilter
  logIndex: IntFilter
  marketGroupId: IntNullableFilter
  market_group: Market_groupNullableRelationFilter
  timestamp: BigIntFilter
  transaction: TransactionNullableRelationFilter
  transactionHash: StringFilter
  transactionHash_marketGroupId_blockNumber_logIndex: eventTransactionHashMarketGroupIdBlockNumberLogIndexCompoundUniqueInput
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Market {
  _count: MarketCount
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO!
  currentPrice: String
  endTimestamp: Int
  id: Int!
  marketGroupId: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean!
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

type MarketAvgAggregate {
  baseAssetMaxPriceTick: Float
  baseAssetMinPriceTick: Float
  endTimestamp: Float
  id: Float
  marketGroupId: Float
  marketId: Float
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsFeerate: Float
  maxPriceD18: Decimal
  minPriceD18: Decimal
  settlementPriceD18: Decimal
  startTimestamp: Float
  startingSqrtPriceX96: Decimal
}

input MarketAvgOrderByAggregateInput {
  baseAssetMaxPriceTick: SortOrder
  baseAssetMinPriceTick: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  marketGroupId: SortOrder
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsFeerate: SortOrder
  maxPriceD18: SortOrder
  minPriceD18: SortOrder
  settlementPriceD18: SortOrder
  startTimestamp: SortOrder
  startingSqrtPriceX96: SortOrder
}

type MarketCount {
  position(where: PositionWhereInput): Int!
}

type MarketCountAggregate {
  _all: Int!
  baseAssetMaxPriceTick: Int!
  baseAssetMinPriceTick: Int!
  createdAt: Int!
  endTimestamp: Int!
  id: Int!
  marketGroupId: Int!
  marketId: Int!
  marketParamsAssertionliveness: Int!
  marketParamsBondamount: Int!
  marketParamsBondcurrency: Int!
  marketParamsClaimstatement: Int!
  marketParamsFeerate: Int!
  marketParamsOptimisticoraclev3: Int!
  marketParamsUniswappositionmanager: Int!
  marketParamsUniswapquoter: Int!
  marketParamsUniswapswaprouter: Int!
  maxPriceD18: Int!
  minPriceD18: Int!
  optionName: Int!
  poolAddress: Int!
  public: Int!
  question: Int!
  rules: Int!
  settled: Int!
  settlementPriceD18: Int!
  startTimestamp: Int!
  startingSqrtPriceX96: Int!
}

input MarketCountOrderByAggregateInput {
  baseAssetMaxPriceTick: SortOrder
  baseAssetMinPriceTick: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  marketGroupId: SortOrder
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  maxPriceD18: SortOrder
  minPriceD18: SortOrder
  optionName: SortOrder
  poolAddress: SortOrder
  public: SortOrder
  question: SortOrder
  rules: SortOrder
  settled: SortOrder
  settlementPriceD18: SortOrder
  startTimestamp: SortOrder
  startingSqrtPriceX96: SortOrder
}

input MarketCreateInput {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  market_group: Market_groupCreateNestedOneWithoutMarketInput
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  position: PositionCreateNestedManyWithoutMarketInput
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketCreateManyInput {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  id: Int
  marketGroupId: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketCreateManyMarket_groupInput {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  id: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketCreateManyMarket_groupInputEnvelope {
  data: [MarketCreateManyMarket_groupInput!]!
  skipDuplicates: Boolean
}

input MarketCreateNestedManyWithoutMarket_groupInput {
  connect: [MarketWhereUniqueInput!]
  connectOrCreate: [MarketCreateOrConnectWithoutMarket_groupInput!]
  create: [MarketCreateWithoutMarket_groupInput!]
  createMany: MarketCreateManyMarket_groupInputEnvelope
}

input MarketCreateNestedOneWithoutPositionInput {
  connect: MarketWhereUniqueInput
  connectOrCreate: MarketCreateOrConnectWithoutPositionInput
  create: MarketCreateWithoutPositionInput
}

input MarketCreateOrConnectWithoutMarket_groupInput {
  create: MarketCreateWithoutMarket_groupInput!
  where: MarketWhereUniqueInput!
}

input MarketCreateOrConnectWithoutPositionInput {
  create: MarketCreateWithoutPositionInput!
  where: MarketWhereUniqueInput!
}

input MarketCreateWithoutMarket_groupInput {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  position: PositionCreateNestedManyWithoutMarketInput
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketCreateWithoutPositionInput {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  market_group: Market_groupCreateNestedOneWithoutMarketInput
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketFilterInput {
  endTimestamp_gt: String
}

type MarketGroupBy {
  _avg: MarketAvgAggregate
  _count: MarketCountAggregate
  _max: MarketMaxAggregate
  _min: MarketMinAggregate
  _sum: MarketSumAggregate
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO!
  endTimestamp: Int
  id: Int!
  marketGroupId: Int
  marketId: Int!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean!
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketListRelationFilter {
  every: MarketWhereInput
  none: MarketWhereInput
  some: MarketWhereInput
}

type MarketMaxAggregate {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  id: Int
  marketGroupId: Int
  marketId: Int
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketMaxOrderByAggregateInput {
  baseAssetMaxPriceTick: SortOrder
  baseAssetMinPriceTick: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  marketGroupId: SortOrder
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  maxPriceD18: SortOrder
  minPriceD18: SortOrder
  optionName: SortOrder
  poolAddress: SortOrder
  public: SortOrder
  question: SortOrder
  rules: SortOrder
  settled: SortOrder
  settlementPriceD18: SortOrder
  startTimestamp: SortOrder
  startingSqrtPriceX96: SortOrder
}

type MarketMinAggregate {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  createdAt: DateTimeISO
  endTimestamp: Int
  id: Int
  marketGroupId: Int
  marketId: Int
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  maxPriceD18: Decimal
  minPriceD18: Decimal
  optionName: String
  poolAddress: String
  public: Boolean
  question: String
  rules: String
  settled: Boolean
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketMinOrderByAggregateInput {
  baseAssetMaxPriceTick: SortOrder
  baseAssetMinPriceTick: SortOrder
  createdAt: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  marketGroupId: SortOrder
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  maxPriceD18: SortOrder
  minPriceD18: SortOrder
  optionName: SortOrder
  poolAddress: SortOrder
  public: SortOrder
  question: SortOrder
  rules: SortOrder
  settled: SortOrder
  settlementPriceD18: SortOrder
  startTimestamp: SortOrder
  startingSqrtPriceX96: SortOrder
}

input MarketNullableRelationFilter {
  is: MarketWhereInput
  isNot: MarketWhereInput
}

input MarketOrderByRelationAggregateInput {
  _count: SortOrder
}

input MarketOrderByWithAggregationInput {
  _avg: MarketAvgOrderByAggregateInput
  _count: MarketCountOrderByAggregateInput
  _max: MarketMaxOrderByAggregateInput
  _min: MarketMinOrderByAggregateInput
  _sum: MarketSumOrderByAggregateInput
  baseAssetMaxPriceTick: SortOrderInput
  baseAssetMinPriceTick: SortOrderInput
  createdAt: SortOrder
  endTimestamp: SortOrderInput
  id: SortOrder
  marketGroupId: SortOrderInput
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrderInput
  marketParamsBondamount: SortOrderInput
  marketParamsBondcurrency: SortOrderInput
  marketParamsClaimstatement: SortOrderInput
  marketParamsFeerate: SortOrderInput
  marketParamsOptimisticoraclev3: SortOrderInput
  marketParamsUniswappositionmanager: SortOrderInput
  marketParamsUniswapquoter: SortOrderInput
  marketParamsUniswapswaprouter: SortOrderInput
  maxPriceD18: SortOrderInput
  minPriceD18: SortOrderInput
  optionName: SortOrderInput
  poolAddress: SortOrderInput
  public: SortOrder
  question: SortOrderInput
  rules: SortOrderInput
  settled: SortOrderInput
  settlementPriceD18: SortOrderInput
  startTimestamp: SortOrderInput
  startingSqrtPriceX96: SortOrderInput
}

input MarketOrderByWithRelationInput {
  baseAssetMaxPriceTick: SortOrderInput
  baseAssetMinPriceTick: SortOrderInput
  createdAt: SortOrder
  endTimestamp: SortOrderInput
  id: SortOrder
  marketGroupId: SortOrderInput
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrderInput
  marketParamsBondamount: SortOrderInput
  marketParamsBondcurrency: SortOrderInput
  marketParamsClaimstatement: SortOrderInput
  marketParamsFeerate: SortOrderInput
  marketParamsOptimisticoraclev3: SortOrderInput
  marketParamsUniswappositionmanager: SortOrderInput
  marketParamsUniswapquoter: SortOrderInput
  marketParamsUniswapswaprouter: SortOrderInput
  market_group: Market_groupOrderByWithRelationInput
  maxPriceD18: SortOrderInput
  minPriceD18: SortOrderInput
  optionName: SortOrderInput
  poolAddress: SortOrderInput
  position: PositionOrderByRelationAggregateInput
  public: SortOrder
  question: SortOrderInput
  rules: SortOrderInput
  settled: SortOrderInput
  settlementPriceD18: SortOrderInput
  startTimestamp: SortOrderInput
  startingSqrtPriceX96: SortOrderInput
}

input MarketOrderInput {
  direction: String!
  field: String!
}

enum MarketScalarFieldEnum {
  baseAssetMaxPriceTick
  baseAssetMinPriceTick
  createdAt
  endTimestamp
  id
  marketGroupId
  marketId
  marketParamsAssertionliveness
  marketParamsBondamount
  marketParamsBondcurrency
  marketParamsClaimstatement
  marketParamsFeerate
  marketParamsOptimisticoraclev3
  marketParamsUniswappositionmanager
  marketParamsUniswapquoter
  marketParamsUniswapswaprouter
  maxPriceD18
  minPriceD18
  optionName
  poolAddress
  public
  question
  rules
  settled
  settlementPriceD18
  startTimestamp
  startingSqrtPriceX96
}

input MarketScalarWhereInput {
  AND: [MarketScalarWhereInput!]
  NOT: [MarketScalarWhereInput!]
  OR: [MarketScalarWhereInput!]
  baseAssetMaxPriceTick: IntNullableFilter
  baseAssetMinPriceTick: IntNullableFilter
  createdAt: DateTimeFilter
  endTimestamp: IntNullableFilter
  id: IntFilter
  marketGroupId: IntNullableFilter
  marketId: IntFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  maxPriceD18: DecimalNullableFilter
  minPriceD18: DecimalNullableFilter
  optionName: StringNullableFilter
  poolAddress: StringNullableFilter
  public: BoolFilter
  question: StringNullableFilter
  rules: StringNullableFilter
  settled: BoolNullableFilter
  settlementPriceD18: DecimalNullableFilter
  startTimestamp: IntNullableFilter
  startingSqrtPriceX96: DecimalNullableFilter
}

input MarketScalarWhereWithAggregatesInput {
  AND: [MarketScalarWhereWithAggregatesInput!]
  NOT: [MarketScalarWhereWithAggregatesInput!]
  OR: [MarketScalarWhereWithAggregatesInput!]
  baseAssetMaxPriceTick: IntNullableWithAggregatesFilter
  baseAssetMinPriceTick: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  endTimestamp: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  marketGroupId: IntNullableWithAggregatesFilter
  marketId: IntWithAggregatesFilter
  marketParamsAssertionliveness: DecimalNullableWithAggregatesFilter
  marketParamsBondamount: DecimalNullableWithAggregatesFilter
  marketParamsBondcurrency: StringNullableWithAggregatesFilter
  marketParamsClaimstatement: StringNullableWithAggregatesFilter
  marketParamsFeerate: IntNullableWithAggregatesFilter
  marketParamsOptimisticoraclev3: StringNullableWithAggregatesFilter
  marketParamsUniswappositionmanager: StringNullableWithAggregatesFilter
  marketParamsUniswapquoter: StringNullableWithAggregatesFilter
  marketParamsUniswapswaprouter: StringNullableWithAggregatesFilter
  maxPriceD18: DecimalNullableWithAggregatesFilter
  minPriceD18: DecimalNullableWithAggregatesFilter
  optionName: StringNullableWithAggregatesFilter
  poolAddress: StringNullableWithAggregatesFilter
  public: BoolWithAggregatesFilter
  question: StringNullableWithAggregatesFilter
  rules: StringNullableWithAggregatesFilter
  settled: BoolNullableWithAggregatesFilter
  settlementPriceD18: DecimalNullableWithAggregatesFilter
  startTimestamp: IntNullableWithAggregatesFilter
  startingSqrtPriceX96: DecimalNullableWithAggregatesFilter
}

type MarketSumAggregate {
  baseAssetMaxPriceTick: Int
  baseAssetMinPriceTick: Int
  endTimestamp: Int
  id: Int
  marketGroupId: Int
  marketId: Int
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsFeerate: Int
  maxPriceD18: Decimal
  minPriceD18: Decimal
  settlementPriceD18: Decimal
  startTimestamp: Int
  startingSqrtPriceX96: Decimal
}

input MarketSumOrderByAggregateInput {
  baseAssetMaxPriceTick: SortOrder
  baseAssetMinPriceTick: SortOrder
  endTimestamp: SortOrder
  id: SortOrder
  marketGroupId: SortOrder
  marketId: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsFeerate: SortOrder
  maxPriceD18: SortOrder
  minPriceD18: SortOrder
  settlementPriceD18: SortOrder
  startTimestamp: SortOrder
  startingSqrtPriceX96: SortOrder
}

input MarketUpdateInput {
  baseAssetMaxPriceTick: NullableIntFieldUpdateOperationsInput
  baseAssetMinPriceTick: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: NullableIntFieldUpdateOperationsInput
  marketId: IntFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  market_group: Market_groupUpdateOneWithoutMarketNestedInput
  maxPriceD18: NullableDecimalFieldUpdateOperationsInput
  minPriceD18: NullableDecimalFieldUpdateOperationsInput
  optionName: NullableStringFieldUpdateOperationsInput
  poolAddress: NullableStringFieldUpdateOperationsInput
  position: PositionUpdateManyWithoutMarketNestedInput
  public: BoolFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  rules: NullableStringFieldUpdateOperationsInput
  settled: NullableBoolFieldUpdateOperationsInput
  settlementPriceD18: NullableDecimalFieldUpdateOperationsInput
  startTimestamp: NullableIntFieldUpdateOperationsInput
  startingSqrtPriceX96: NullableDecimalFieldUpdateOperationsInput
}

input MarketUpdateManyMutationInput {
  baseAssetMaxPriceTick: NullableIntFieldUpdateOperationsInput
  baseAssetMinPriceTick: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: NullableIntFieldUpdateOperationsInput
  marketId: IntFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  maxPriceD18: NullableDecimalFieldUpdateOperationsInput
  minPriceD18: NullableDecimalFieldUpdateOperationsInput
  optionName: NullableStringFieldUpdateOperationsInput
  poolAddress: NullableStringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  rules: NullableStringFieldUpdateOperationsInput
  settled: NullableBoolFieldUpdateOperationsInput
  settlementPriceD18: NullableDecimalFieldUpdateOperationsInput
  startTimestamp: NullableIntFieldUpdateOperationsInput
  startingSqrtPriceX96: NullableDecimalFieldUpdateOperationsInput
}

input MarketUpdateManyWithWhereWithoutMarket_groupInput {
  data: MarketUpdateManyMutationInput!
  where: MarketScalarWhereInput!
}

input MarketUpdateManyWithoutMarket_groupNestedInput {
  connect: [MarketWhereUniqueInput!]
  connectOrCreate: [MarketCreateOrConnectWithoutMarket_groupInput!]
  create: [MarketCreateWithoutMarket_groupInput!]
  createMany: MarketCreateManyMarket_groupInputEnvelope
  delete: [MarketWhereUniqueInput!]
  deleteMany: [MarketScalarWhereInput!]
  disconnect: [MarketWhereUniqueInput!]
  set: [MarketWhereUniqueInput!]
  update: [MarketUpdateWithWhereUniqueWithoutMarket_groupInput!]
  updateMany: [MarketUpdateManyWithWhereWithoutMarket_groupInput!]
  upsert: [MarketUpsertWithWhereUniqueWithoutMarket_groupInput!]
}

input MarketUpdateOneWithoutPositionNestedInput {
  connect: MarketWhereUniqueInput
  connectOrCreate: MarketCreateOrConnectWithoutPositionInput
  create: MarketCreateWithoutPositionInput
  delete: MarketWhereInput
  disconnect: MarketWhereInput
  update: MarketUpdateToOneWithWhereWithoutPositionInput
  upsert: MarketUpsertWithoutPositionInput
}

input MarketUpdateToOneWithWhereWithoutPositionInput {
  data: MarketUpdateWithoutPositionInput!
  where: MarketWhereInput
}

input MarketUpdateWithWhereUniqueWithoutMarket_groupInput {
  data: MarketUpdateWithoutMarket_groupInput!
  where: MarketWhereUniqueInput!
}

input MarketUpdateWithoutMarket_groupInput {
  baseAssetMaxPriceTick: NullableIntFieldUpdateOperationsInput
  baseAssetMinPriceTick: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: NullableIntFieldUpdateOperationsInput
  marketId: IntFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  maxPriceD18: NullableDecimalFieldUpdateOperationsInput
  minPriceD18: NullableDecimalFieldUpdateOperationsInput
  optionName: NullableStringFieldUpdateOperationsInput
  poolAddress: NullableStringFieldUpdateOperationsInput
  position: PositionUpdateManyWithoutMarketNestedInput
  public: BoolFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  rules: NullableStringFieldUpdateOperationsInput
  settled: NullableBoolFieldUpdateOperationsInput
  settlementPriceD18: NullableDecimalFieldUpdateOperationsInput
  startTimestamp: NullableIntFieldUpdateOperationsInput
  startingSqrtPriceX96: NullableDecimalFieldUpdateOperationsInput
}

input MarketUpdateWithoutPositionInput {
  baseAssetMaxPriceTick: NullableIntFieldUpdateOperationsInput
  baseAssetMinPriceTick: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  endTimestamp: NullableIntFieldUpdateOperationsInput
  marketId: IntFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  market_group: Market_groupUpdateOneWithoutMarketNestedInput
  maxPriceD18: NullableDecimalFieldUpdateOperationsInput
  minPriceD18: NullableDecimalFieldUpdateOperationsInput
  optionName: NullableStringFieldUpdateOperationsInput
  poolAddress: NullableStringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  rules: NullableStringFieldUpdateOperationsInput
  settled: NullableBoolFieldUpdateOperationsInput
  settlementPriceD18: NullableDecimalFieldUpdateOperationsInput
  startTimestamp: NullableIntFieldUpdateOperationsInput
  startingSqrtPriceX96: NullableDecimalFieldUpdateOperationsInput
}

input MarketUpsertWithWhereUniqueWithoutMarket_groupInput {
  create: MarketCreateWithoutMarket_groupInput!
  update: MarketUpdateWithoutMarket_groupInput!
  where: MarketWhereUniqueInput!
}

input MarketUpsertWithoutPositionInput {
  create: MarketCreateWithoutPositionInput!
  update: MarketUpdateWithoutPositionInput!
  where: MarketWhereInput
}

input MarketWhereInput {
  AND: [MarketWhereInput!]
  NOT: [MarketWhereInput!]
  OR: [MarketWhereInput!]
  baseAssetMaxPriceTick: IntNullableFilter
  baseAssetMinPriceTick: IntNullableFilter
  createdAt: DateTimeFilter
  endTimestamp: IntNullableFilter
  id: IntFilter
  marketGroupId: IntNullableFilter
  marketId: IntFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  market_group: Market_groupNullableRelationFilter
  maxPriceD18: DecimalNullableFilter
  minPriceD18: DecimalNullableFilter
  optionName: StringNullableFilter
  poolAddress: StringNullableFilter
  position: PositionListRelationFilter
  public: BoolFilter
  question: StringNullableFilter
  rules: StringNullableFilter
  settled: BoolNullableFilter
  settlementPriceD18: DecimalNullableFilter
  startTimestamp: IntNullableFilter
  startingSqrtPriceX96: DecimalNullableFilter
}

input MarketWhereUniqueInput {
  AND: [MarketWhereInput!]
  NOT: [MarketWhereInput!]
  OR: [MarketWhereInput!]
  baseAssetMaxPriceTick: IntNullableFilter
  baseAssetMinPriceTick: IntNullableFilter
  createdAt: DateTimeFilter
  endTimestamp: IntNullableFilter
  id: Int
  marketGroupId: IntNullableFilter
  marketGroupId_marketId: marketMarketGroupIdMarketIdCompoundUniqueInput
  marketId: IntFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  market_group: Market_groupNullableRelationFilter
  maxPriceD18: DecimalNullableFilter
  minPriceD18: DecimalNullableFilter
  optionName: StringNullableFilter
  poolAddress: StringNullableFilter
  position: PositionListRelationFilter
  public: BoolFilter
  question: StringNullableFilter
  rules: StringNullableFilter
  settled: BoolNullableFilter
  settlementPriceD18: DecimalNullableFilter
  startTimestamp: IntNullableFilter
  startingSqrtPriceX96: DecimalNullableFilter
}

type Market_group {
  _count: Market_groupCount
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO!
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int!
  initializationNonce: String
  isCumulative: Boolean!
  isYin: Boolean!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  markets(filter: MarketFilterInput, orderBy: MarketOrderInput): [Market!]!
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

type Market_groupAvgAggregate {
  categoryId: Float
  chainId: Float
  collateralDecimals: Float
  deployTimestamp: Float
  deployTxnBlockNumber: Float
  id: Float
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsFeerate: Float
  minTradeSize: Decimal
  resourceId: Float
}

input Market_groupAvgOrderByAggregateInput {
  categoryId: SortOrder
  chainId: SortOrder
  collateralDecimals: SortOrder
  deployTimestamp: SortOrder
  deployTxnBlockNumber: SortOrder
  id: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsFeerate: SortOrder
  minTradeSize: SortOrder
  resourceId: SortOrder
}

type Market_groupCount {
  event(where: EventWhereInput): Int!
  market(where: MarketWhereInput): Int!
}

type Market_groupCountAggregate {
  _all: Int!
  address: Int!
  baseTokenName: Int!
  categoryId: Int!
  chainId: Int!
  collateralAsset: Int!
  collateralDecimals: Int!
  collateralSymbol: Int!
  createdAt: Int!
  deployTimestamp: Int!
  deployTxnBlockNumber: Int!
  factoryAddress: Int!
  id: Int!
  initializationNonce: Int!
  isCumulative: Int!
  isYin: Int!
  marketParamsAssertionliveness: Int!
  marketParamsBondamount: Int!
  marketParamsBondcurrency: Int!
  marketParamsClaimstatement: Int!
  marketParamsFeerate: Int!
  marketParamsOptimisticoraclev3: Int!
  marketParamsUniswappositionmanager: Int!
  marketParamsUniswapquoter: Int!
  marketParamsUniswapswaprouter: Int!
  minTradeSize: Int!
  owner: Int!
  question: Int!
  quoteTokenName: Int!
  resourceId: Int!
  vaultAddress: Int!
}

input Market_groupCountOrderByAggregateInput {
  address: SortOrder
  baseTokenName: SortOrder
  categoryId: SortOrder
  chainId: SortOrder
  collateralAsset: SortOrder
  collateralDecimals: SortOrder
  collateralSymbol: SortOrder
  createdAt: SortOrder
  deployTimestamp: SortOrder
  deployTxnBlockNumber: SortOrder
  factoryAddress: SortOrder
  id: SortOrder
  initializationNonce: SortOrder
  isCumulative: SortOrder
  isYin: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  minTradeSize: SortOrder
  owner: SortOrder
  question: SortOrder
  quoteTokenName: SortOrder
  resourceId: SortOrder
  vaultAddress: SortOrder
}

input Market_groupCreateInput {
  address: String
  baseTokenName: String
  category: CategoryCreateNestedOneWithoutMarket_groupInput
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  event: EventCreateNestedManyWithoutMarket_groupInput
  factoryAddress: String
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  market: MarketCreateNestedManyWithoutMarket_groupInput
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resource: ResourceCreateNestedOneWithoutMarket_groupInput
  vaultAddress: String
}

input Market_groupCreateManyCategoryInput {
  address: String
  baseTokenName: String
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

input Market_groupCreateManyCategoryInputEnvelope {
  data: [Market_groupCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input Market_groupCreateManyInput {
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

input Market_groupCreateManyResourceInput {
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  vaultAddress: String
}

input Market_groupCreateManyResourceInputEnvelope {
  data: [Market_groupCreateManyResourceInput!]!
  skipDuplicates: Boolean
}

input Market_groupCreateNestedManyWithoutCategoryInput {
  connect: [Market_groupWhereUniqueInput!]
  connectOrCreate: [Market_groupCreateOrConnectWithoutCategoryInput!]
  create: [Market_groupCreateWithoutCategoryInput!]
  createMany: Market_groupCreateManyCategoryInputEnvelope
}

input Market_groupCreateNestedManyWithoutResourceInput {
  connect: [Market_groupWhereUniqueInput!]
  connectOrCreate: [Market_groupCreateOrConnectWithoutResourceInput!]
  create: [Market_groupCreateWithoutResourceInput!]
  createMany: Market_groupCreateManyResourceInputEnvelope
}

input Market_groupCreateNestedOneWithoutEventInput {
  connect: Market_groupWhereUniqueInput
  connectOrCreate: Market_groupCreateOrConnectWithoutEventInput
  create: Market_groupCreateWithoutEventInput
}

input Market_groupCreateNestedOneWithoutMarketInput {
  connect: Market_groupWhereUniqueInput
  connectOrCreate: Market_groupCreateOrConnectWithoutMarketInput
  create: Market_groupCreateWithoutMarketInput
}

input Market_groupCreateOrConnectWithoutCategoryInput {
  create: Market_groupCreateWithoutCategoryInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupCreateOrConnectWithoutEventInput {
  create: Market_groupCreateWithoutEventInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupCreateOrConnectWithoutMarketInput {
  create: Market_groupCreateWithoutMarketInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupCreateOrConnectWithoutResourceInput {
  create: Market_groupCreateWithoutResourceInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupCreateWithoutCategoryInput {
  address: String
  baseTokenName: String
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  event: EventCreateNestedManyWithoutMarket_groupInput
  factoryAddress: String
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  market: MarketCreateNestedManyWithoutMarket_groupInput
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resource: ResourceCreateNestedOneWithoutMarket_groupInput
  vaultAddress: String
}

input Market_groupCreateWithoutEventInput {
  address: String
  baseTokenName: String
  category: CategoryCreateNestedOneWithoutMarket_groupInput
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  market: MarketCreateNestedManyWithoutMarket_groupInput
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resource: ResourceCreateNestedOneWithoutMarket_groupInput
  vaultAddress: String
}

input Market_groupCreateWithoutMarketInput {
  address: String
  baseTokenName: String
  category: CategoryCreateNestedOneWithoutMarket_groupInput
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  event: EventCreateNestedManyWithoutMarket_groupInput
  factoryAddress: String
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resource: ResourceCreateNestedOneWithoutMarket_groupInput
  vaultAddress: String
}

input Market_groupCreateWithoutResourceInput {
  address: String
  baseTokenName: String
  category: CategoryCreateNestedOneWithoutMarket_groupInput
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  event: EventCreateNestedManyWithoutMarket_groupInput
  factoryAddress: String
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  market: MarketCreateNestedManyWithoutMarket_groupInput
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  vaultAddress: String
}

type Market_groupGroupBy {
  _avg: Market_groupAvgAggregate
  _count: Market_groupCountAggregate
  _max: Market_groupMaxAggregate
  _min: Market_groupMinAggregate
  _sum: Market_groupSumAggregate
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int!
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO!
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int!
  initializationNonce: String
  isCumulative: Boolean!
  isYin: Boolean!
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

input Market_groupListRelationFilter {
  every: Market_groupWhereInput
  none: Market_groupWhereInput
  some: Market_groupWhereInput
}

type Market_groupMaxAggregate {
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

input Market_groupMaxOrderByAggregateInput {
  address: SortOrder
  baseTokenName: SortOrder
  categoryId: SortOrder
  chainId: SortOrder
  collateralAsset: SortOrder
  collateralDecimals: SortOrder
  collateralSymbol: SortOrder
  createdAt: SortOrder
  deployTimestamp: SortOrder
  deployTxnBlockNumber: SortOrder
  factoryAddress: SortOrder
  id: SortOrder
  initializationNonce: SortOrder
  isCumulative: SortOrder
  isYin: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  minTradeSize: SortOrder
  owner: SortOrder
  question: SortOrder
  quoteTokenName: SortOrder
  resourceId: SortOrder
  vaultAddress: SortOrder
}

type Market_groupMinAggregate {
  address: String
  baseTokenName: String
  categoryId: Int
  chainId: Int
  collateralAsset: String
  collateralDecimals: Int
  collateralSymbol: String
  createdAt: DateTimeISO
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  factoryAddress: String
  id: Int
  initializationNonce: String
  isCumulative: Boolean
  isYin: Boolean
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsBondcurrency: String
  marketParamsClaimstatement: String
  marketParamsFeerate: Int
  marketParamsOptimisticoraclev3: String
  marketParamsUniswappositionmanager: String
  marketParamsUniswapquoter: String
  marketParamsUniswapswaprouter: String
  minTradeSize: Decimal
  owner: String
  question: String
  quoteTokenName: String
  resourceId: Int
  vaultAddress: String
}

input Market_groupMinOrderByAggregateInput {
  address: SortOrder
  baseTokenName: SortOrder
  categoryId: SortOrder
  chainId: SortOrder
  collateralAsset: SortOrder
  collateralDecimals: SortOrder
  collateralSymbol: SortOrder
  createdAt: SortOrder
  deployTimestamp: SortOrder
  deployTxnBlockNumber: SortOrder
  factoryAddress: SortOrder
  id: SortOrder
  initializationNonce: SortOrder
  isCumulative: SortOrder
  isYin: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsBondcurrency: SortOrder
  marketParamsClaimstatement: SortOrder
  marketParamsFeerate: SortOrder
  marketParamsOptimisticoraclev3: SortOrder
  marketParamsUniswappositionmanager: SortOrder
  marketParamsUniswapquoter: SortOrder
  marketParamsUniswapswaprouter: SortOrder
  minTradeSize: SortOrder
  owner: SortOrder
  question: SortOrder
  quoteTokenName: SortOrder
  resourceId: SortOrder
  vaultAddress: SortOrder
}

input Market_groupNullableRelationFilter {
  is: Market_groupWhereInput
  isNot: Market_groupWhereInput
}

input Market_groupOrderByRelationAggregateInput {
  _count: SortOrder
}

input Market_groupOrderByWithAggregationInput {
  _avg: Market_groupAvgOrderByAggregateInput
  _count: Market_groupCountOrderByAggregateInput
  _max: Market_groupMaxOrderByAggregateInput
  _min: Market_groupMinOrderByAggregateInput
  _sum: Market_groupSumOrderByAggregateInput
  address: SortOrderInput
  baseTokenName: SortOrderInput
  categoryId: SortOrderInput
  chainId: SortOrder
  collateralAsset: SortOrderInput
  collateralDecimals: SortOrderInput
  collateralSymbol: SortOrderInput
  createdAt: SortOrder
  deployTimestamp: SortOrderInput
  deployTxnBlockNumber: SortOrderInput
  factoryAddress: SortOrderInput
  id: SortOrder
  initializationNonce: SortOrderInput
  isCumulative: SortOrder
  isYin: SortOrder
  marketParamsAssertionliveness: SortOrderInput
  marketParamsBondamount: SortOrderInput
  marketParamsBondcurrency: SortOrderInput
  marketParamsClaimstatement: SortOrderInput
  marketParamsFeerate: SortOrderInput
  marketParamsOptimisticoraclev3: SortOrderInput
  marketParamsUniswappositionmanager: SortOrderInput
  marketParamsUniswapquoter: SortOrderInput
  marketParamsUniswapswaprouter: SortOrderInput
  minTradeSize: SortOrderInput
  owner: SortOrderInput
  question: SortOrderInput
  quoteTokenName: SortOrderInput
  resourceId: SortOrderInput
  vaultAddress: SortOrderInput
}

input Market_groupOrderByWithRelationInput {
  address: SortOrderInput
  baseTokenName: SortOrderInput
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrderInput
  chainId: SortOrder
  collateralAsset: SortOrderInput
  collateralDecimals: SortOrderInput
  collateralSymbol: SortOrderInput
  createdAt: SortOrder
  deployTimestamp: SortOrderInput
  deployTxnBlockNumber: SortOrderInput
  event: EventOrderByRelationAggregateInput
  factoryAddress: SortOrderInput
  id: SortOrder
  initializationNonce: SortOrderInput
  isCumulative: SortOrder
  isYin: SortOrder
  market: MarketOrderByRelationAggregateInput
  marketParamsAssertionliveness: SortOrderInput
  marketParamsBondamount: SortOrderInput
  marketParamsBondcurrency: SortOrderInput
  marketParamsClaimstatement: SortOrderInput
  marketParamsFeerate: SortOrderInput
  marketParamsOptimisticoraclev3: SortOrderInput
  marketParamsUniswappositionmanager: SortOrderInput
  marketParamsUniswapquoter: SortOrderInput
  marketParamsUniswapswaprouter: SortOrderInput
  minTradeSize: SortOrderInput
  owner: SortOrderInput
  question: SortOrderInput
  quoteTokenName: SortOrderInput
  resource: ResourceOrderByWithRelationInput
  resourceId: SortOrderInput
  vaultAddress: SortOrderInput
}

enum Market_groupScalarFieldEnum {
  address
  baseTokenName
  categoryId
  chainId
  collateralAsset
  collateralDecimals
  collateralSymbol
  createdAt
  deployTimestamp
  deployTxnBlockNumber
  factoryAddress
  id
  initializationNonce
  isCumulative
  isYin
  marketParamsAssertionliveness
  marketParamsBondamount
  marketParamsBondcurrency
  marketParamsClaimstatement
  marketParamsFeerate
  marketParamsOptimisticoraclev3
  marketParamsUniswappositionmanager
  marketParamsUniswapquoter
  marketParamsUniswapswaprouter
  minTradeSize
  owner
  question
  quoteTokenName
  resourceId
  vaultAddress
}

input Market_groupScalarWhereInput {
  AND: [Market_groupScalarWhereInput!]
  NOT: [Market_groupScalarWhereInput!]
  OR: [Market_groupScalarWhereInput!]
  address: StringNullableFilter
  baseTokenName: StringNullableFilter
  categoryId: IntNullableFilter
  chainId: IntFilter
  collateralAsset: StringNullableFilter
  collateralDecimals: IntNullableFilter
  collateralSymbol: StringNullableFilter
  createdAt: DateTimeFilter
  deployTimestamp: IntNullableFilter
  deployTxnBlockNumber: IntNullableFilter
  factoryAddress: StringNullableFilter
  id: IntFilter
  initializationNonce: StringNullableFilter
  isCumulative: BoolFilter
  isYin: BoolFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  minTradeSize: DecimalNullableFilter
  owner: StringNullableFilter
  question: StringNullableFilter
  quoteTokenName: StringNullableFilter
  resourceId: IntNullableFilter
  vaultAddress: StringNullableFilter
}

input Market_groupScalarWhereWithAggregatesInput {
  AND: [Market_groupScalarWhereWithAggregatesInput!]
  NOT: [Market_groupScalarWhereWithAggregatesInput!]
  OR: [Market_groupScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  baseTokenName: StringNullableWithAggregatesFilter
  categoryId: IntNullableWithAggregatesFilter
  chainId: IntWithAggregatesFilter
  collateralAsset: StringNullableWithAggregatesFilter
  collateralDecimals: IntNullableWithAggregatesFilter
  collateralSymbol: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deployTimestamp: IntNullableWithAggregatesFilter
  deployTxnBlockNumber: IntNullableWithAggregatesFilter
  factoryAddress: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  initializationNonce: StringNullableWithAggregatesFilter
  isCumulative: BoolWithAggregatesFilter
  isYin: BoolWithAggregatesFilter
  marketParamsAssertionliveness: DecimalNullableWithAggregatesFilter
  marketParamsBondamount: DecimalNullableWithAggregatesFilter
  marketParamsBondcurrency: StringNullableWithAggregatesFilter
  marketParamsClaimstatement: StringNullableWithAggregatesFilter
  marketParamsFeerate: IntNullableWithAggregatesFilter
  marketParamsOptimisticoraclev3: StringNullableWithAggregatesFilter
  marketParamsUniswappositionmanager: StringNullableWithAggregatesFilter
  marketParamsUniswapquoter: StringNullableWithAggregatesFilter
  marketParamsUniswapswaprouter: StringNullableWithAggregatesFilter
  minTradeSize: DecimalNullableWithAggregatesFilter
  owner: StringNullableWithAggregatesFilter
  question: StringNullableWithAggregatesFilter
  quoteTokenName: StringNullableWithAggregatesFilter
  resourceId: IntNullableWithAggregatesFilter
  vaultAddress: StringNullableWithAggregatesFilter
}

type Market_groupSumAggregate {
  categoryId: Int
  chainId: Int
  collateralDecimals: Int
  deployTimestamp: Int
  deployTxnBlockNumber: Int
  id: Int
  marketParamsAssertionliveness: Decimal
  marketParamsBondamount: Decimal
  marketParamsFeerate: Int
  minTradeSize: Decimal
  resourceId: Int
}

input Market_groupSumOrderByAggregateInput {
  categoryId: SortOrder
  chainId: SortOrder
  collateralDecimals: SortOrder
  deployTimestamp: SortOrder
  deployTxnBlockNumber: SortOrder
  id: SortOrder
  marketParamsAssertionliveness: SortOrder
  marketParamsBondamount: SortOrder
  marketParamsFeerate: SortOrder
  minTradeSize: SortOrder
  resourceId: SortOrder
}

input Market_groupUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutMarket_groupNestedInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  event: EventUpdateManyWithoutMarket_groupNestedInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  market: MarketUpdateManyWithoutMarket_groupNestedInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  resource: ResourceUpdateOneWithoutMarket_groupNestedInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpdateManyWithWhereWithoutCategoryInput {
  data: Market_groupUpdateManyMutationInput!
  where: Market_groupScalarWhereInput!
}

input Market_groupUpdateManyWithWhereWithoutResourceInput {
  data: Market_groupUpdateManyMutationInput!
  where: Market_groupScalarWhereInput!
}

input Market_groupUpdateManyWithoutCategoryNestedInput {
  connect: [Market_groupWhereUniqueInput!]
  connectOrCreate: [Market_groupCreateOrConnectWithoutCategoryInput!]
  create: [Market_groupCreateWithoutCategoryInput!]
  createMany: Market_groupCreateManyCategoryInputEnvelope
  delete: [Market_groupWhereUniqueInput!]
  deleteMany: [Market_groupScalarWhereInput!]
  disconnect: [Market_groupWhereUniqueInput!]
  set: [Market_groupWhereUniqueInput!]
  update: [Market_groupUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [Market_groupUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [Market_groupUpsertWithWhereUniqueWithoutCategoryInput!]
}

input Market_groupUpdateManyWithoutResourceNestedInput {
  connect: [Market_groupWhereUniqueInput!]
  connectOrCreate: [Market_groupCreateOrConnectWithoutResourceInput!]
  create: [Market_groupCreateWithoutResourceInput!]
  createMany: Market_groupCreateManyResourceInputEnvelope
  delete: [Market_groupWhereUniqueInput!]
  deleteMany: [Market_groupScalarWhereInput!]
  disconnect: [Market_groupWhereUniqueInput!]
  set: [Market_groupWhereUniqueInput!]
  update: [Market_groupUpdateWithWhereUniqueWithoutResourceInput!]
  updateMany: [Market_groupUpdateManyWithWhereWithoutResourceInput!]
  upsert: [Market_groupUpsertWithWhereUniqueWithoutResourceInput!]
}

input Market_groupUpdateOneWithoutEventNestedInput {
  connect: Market_groupWhereUniqueInput
  connectOrCreate: Market_groupCreateOrConnectWithoutEventInput
  create: Market_groupCreateWithoutEventInput
  delete: Market_groupWhereInput
  disconnect: Market_groupWhereInput
  update: Market_groupUpdateToOneWithWhereWithoutEventInput
  upsert: Market_groupUpsertWithoutEventInput
}

input Market_groupUpdateOneWithoutMarketNestedInput {
  connect: Market_groupWhereUniqueInput
  connectOrCreate: Market_groupCreateOrConnectWithoutMarketInput
  create: Market_groupCreateWithoutMarketInput
  delete: Market_groupWhereInput
  disconnect: Market_groupWhereInput
  update: Market_groupUpdateToOneWithWhereWithoutMarketInput
  upsert: Market_groupUpsertWithoutMarketInput
}

input Market_groupUpdateToOneWithWhereWithoutEventInput {
  data: Market_groupUpdateWithoutEventInput!
  where: Market_groupWhereInput
}

input Market_groupUpdateToOneWithWhereWithoutMarketInput {
  data: Market_groupUpdateWithoutMarketInput!
  where: Market_groupWhereInput
}

input Market_groupUpdateWithWhereUniqueWithoutCategoryInput {
  data: Market_groupUpdateWithoutCategoryInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupUpdateWithWhereUniqueWithoutResourceInput {
  data: Market_groupUpdateWithoutResourceInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupUpdateWithoutCategoryInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  event: EventUpdateManyWithoutMarket_groupNestedInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  market: MarketUpdateManyWithoutMarket_groupNestedInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  resource: ResourceUpdateOneWithoutMarket_groupNestedInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpdateWithoutEventInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutMarket_groupNestedInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  market: MarketUpdateManyWithoutMarket_groupNestedInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  resource: ResourceUpdateOneWithoutMarket_groupNestedInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpdateWithoutMarketInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutMarket_groupNestedInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  event: EventUpdateManyWithoutMarket_groupNestedInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  resource: ResourceUpdateOneWithoutMarket_groupNestedInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpdateWithoutResourceInput {
  address: NullableStringFieldUpdateOperationsInput
  baseTokenName: NullableStringFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutMarket_groupNestedInput
  chainId: IntFieldUpdateOperationsInput
  collateralAsset: NullableStringFieldUpdateOperationsInput
  collateralDecimals: NullableIntFieldUpdateOperationsInput
  collateralSymbol: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deployTimestamp: NullableIntFieldUpdateOperationsInput
  deployTxnBlockNumber: NullableIntFieldUpdateOperationsInput
  event: EventUpdateManyWithoutMarket_groupNestedInput
  factoryAddress: NullableStringFieldUpdateOperationsInput
  initializationNonce: NullableStringFieldUpdateOperationsInput
  isCumulative: BoolFieldUpdateOperationsInput
  isYin: BoolFieldUpdateOperationsInput
  market: MarketUpdateManyWithoutMarket_groupNestedInput
  marketParamsAssertionliveness: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondamount: NullableDecimalFieldUpdateOperationsInput
  marketParamsBondcurrency: NullableStringFieldUpdateOperationsInput
  marketParamsClaimstatement: NullableStringFieldUpdateOperationsInput
  marketParamsFeerate: NullableIntFieldUpdateOperationsInput
  marketParamsOptimisticoraclev3: NullableStringFieldUpdateOperationsInput
  marketParamsUniswappositionmanager: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapquoter: NullableStringFieldUpdateOperationsInput
  marketParamsUniswapswaprouter: NullableStringFieldUpdateOperationsInput
  minTradeSize: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  question: NullableStringFieldUpdateOperationsInput
  quoteTokenName: NullableStringFieldUpdateOperationsInput
  vaultAddress: NullableStringFieldUpdateOperationsInput
}

input Market_groupUpsertWithWhereUniqueWithoutCategoryInput {
  create: Market_groupCreateWithoutCategoryInput!
  update: Market_groupUpdateWithoutCategoryInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupUpsertWithWhereUniqueWithoutResourceInput {
  create: Market_groupCreateWithoutResourceInput!
  update: Market_groupUpdateWithoutResourceInput!
  where: Market_groupWhereUniqueInput!
}

input Market_groupUpsertWithoutEventInput {
  create: Market_groupCreateWithoutEventInput!
  update: Market_groupUpdateWithoutEventInput!
  where: Market_groupWhereInput
}

input Market_groupUpsertWithoutMarketInput {
  create: Market_groupCreateWithoutMarketInput!
  update: Market_groupUpdateWithoutMarketInput!
  where: Market_groupWhereInput
}

input Market_groupWhereInput {
  AND: [Market_groupWhereInput!]
  NOT: [Market_groupWhereInput!]
  OR: [Market_groupWhereInput!]
  address: StringNullableFilter
  baseTokenName: StringNullableFilter
  category: CategoryNullableRelationFilter
  categoryId: IntNullableFilter
  chainId: IntFilter
  collateralAsset: StringNullableFilter
  collateralDecimals: IntNullableFilter
  collateralSymbol: StringNullableFilter
  createdAt: DateTimeFilter
  deployTimestamp: IntNullableFilter
  deployTxnBlockNumber: IntNullableFilter
  event: EventListRelationFilter
  factoryAddress: StringNullableFilter
  id: IntFilter
  initializationNonce: StringNullableFilter
  isCumulative: BoolFilter
  isYin: BoolFilter
  market: MarketListRelationFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  minTradeSize: DecimalNullableFilter
  owner: StringNullableFilter
  question: StringNullableFilter
  quoteTokenName: StringNullableFilter
  resource: ResourceNullableRelationFilter
  resourceId: IntNullableFilter
  vaultAddress: StringNullableFilter
}

input Market_groupWhereUniqueInput {
  AND: [Market_groupWhereInput!]
  NOT: [Market_groupWhereInput!]
  OR: [Market_groupWhereInput!]
  address: StringNullableFilter
  address_chainId: market_groupAddressChainIdCompoundUniqueInput
  baseTokenName: StringNullableFilter
  category: CategoryNullableRelationFilter
  categoryId: IntNullableFilter
  chainId: IntFilter
  collateralAsset: StringNullableFilter
  collateralDecimals: IntNullableFilter
  collateralSymbol: StringNullableFilter
  createdAt: DateTimeFilter
  deployTimestamp: IntNullableFilter
  deployTxnBlockNumber: IntNullableFilter
  event: EventListRelationFilter
  factoryAddress: StringNullableFilter
  id: Int
  initializationNonce: StringNullableFilter
  isCumulative: BoolFilter
  isYin: BoolFilter
  market: MarketListRelationFilter
  marketParamsAssertionliveness: DecimalNullableFilter
  marketParamsBondamount: DecimalNullableFilter
  marketParamsBondcurrency: StringNullableFilter
  marketParamsClaimstatement: StringNullableFilter
  marketParamsFeerate: IntNullableFilter
  marketParamsOptimisticoraclev3: StringNullableFilter
  marketParamsUniswappositionmanager: StringNullableFilter
  marketParamsUniswapquoter: StringNullableFilter
  marketParamsUniswapswaprouter: StringNullableFilter
  minTradeSize: DecimalNullableFilter
  owner: StringNullableFilter
  question: StringNullableFilter
  quoteTokenName: StringNullableFilter
  resource: ResourceNullableRelationFilter
  resourceId: IntNullableFilter
  vaultAddress: StringNullableFilter
}

type Market_price {
  createdAt: DateTimeISO!
  id: Int!
  timestamp: BigInt!
  value: Decimal!
}

type Market_priceAvgAggregate {
  id: Float
  timestamp: Float
  value: Decimal
}

input Market_priceAvgOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

type Market_priceCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  timestamp: Int!
  value: Int!
}

input Market_priceCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

input Market_priceCreateInput {
  createdAt: DateTimeISO
  timestamp: BigInt!
  transaction: TransactionCreateNestedOneWithoutMarket_priceInput
  value: Decimal!
}

input Market_priceCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  timestamp: BigInt!
  value: Decimal!
}

input Market_priceCreateNestedOneWithoutTransactionInput {
  connect: Market_priceWhereUniqueInput
  connectOrCreate: Market_priceCreateOrConnectWithoutTransactionInput
  create: Market_priceCreateWithoutTransactionInput
}

input Market_priceCreateOrConnectWithoutTransactionInput {
  create: Market_priceCreateWithoutTransactionInput!
  where: Market_priceWhereUniqueInput!
}

input Market_priceCreateWithoutTransactionInput {
  createdAt: DateTimeISO
  timestamp: BigInt!
  value: Decimal!
}

type Market_priceGroupBy {
  _avg: Market_priceAvgAggregate
  _count: Market_priceCountAggregate
  _max: Market_priceMaxAggregate
  _min: Market_priceMinAggregate
  _sum: Market_priceSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  timestamp: BigInt!
  value: Decimal!
}

type Market_priceMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  timestamp: BigInt
  value: Decimal
}

input Market_priceMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

type Market_priceMinAggregate {
  createdAt: DateTimeISO
  id: Int
  timestamp: BigInt
  value: Decimal
}

input Market_priceMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

input Market_priceNullableRelationFilter {
  is: Market_priceWhereInput
  isNot: Market_priceWhereInput
}

input Market_priceOrderByWithAggregationInput {
  _avg: Market_priceAvgOrderByAggregateInput
  _count: Market_priceCountOrderByAggregateInput
  _max: Market_priceMaxOrderByAggregateInput
  _min: Market_priceMinOrderByAggregateInput
  _sum: Market_priceSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

input Market_priceOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  timestamp: SortOrder
  transaction: TransactionOrderByWithRelationInput
  value: SortOrder
}

enum Market_priceScalarFieldEnum {
  createdAt
  id
  timestamp
  value
}

input Market_priceScalarWhereWithAggregatesInput {
  AND: [Market_priceScalarWhereWithAggregatesInput!]
  NOT: [Market_priceScalarWhereWithAggregatesInput!]
  OR: [Market_priceScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  timestamp: BigIntWithAggregatesFilter
  value: DecimalWithAggregatesFilter
}

type Market_priceSumAggregate {
  id: Int
  timestamp: BigInt
  value: Decimal
}

input Market_priceSumOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
  value: SortOrder
}

input Market_priceUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
  transaction: TransactionUpdateOneWithoutMarket_priceNestedInput
  value: DecimalFieldUpdateOperationsInput
}

input Market_priceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
}

input Market_priceUpdateOneWithoutTransactionNestedInput {
  connect: Market_priceWhereUniqueInput
  connectOrCreate: Market_priceCreateOrConnectWithoutTransactionInput
  create: Market_priceCreateWithoutTransactionInput
  delete: Market_priceWhereInput
  disconnect: Market_priceWhereInput
  update: Market_priceUpdateToOneWithWhereWithoutTransactionInput
  upsert: Market_priceUpsertWithoutTransactionInput
}

input Market_priceUpdateToOneWithWhereWithoutTransactionInput {
  data: Market_priceUpdateWithoutTransactionInput!
  where: Market_priceWhereInput
}

input Market_priceUpdateWithoutTransactionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
}

input Market_priceUpsertWithoutTransactionInput {
  create: Market_priceCreateWithoutTransactionInput!
  update: Market_priceUpdateWithoutTransactionInput!
  where: Market_priceWhereInput
}

input Market_priceWhereInput {
  AND: [Market_priceWhereInput!]
  NOT: [Market_priceWhereInput!]
  OR: [Market_priceWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  timestamp: BigIntFilter
  transaction: TransactionNullableRelationFilter
  value: DecimalFilter
}

input Market_priceWhereUniqueInput {
  AND: [Market_priceWhereInput!]
  NOT: [Market_priceWhereInput!]
  OR: [Market_priceWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  timestamp: BigIntFilter
  transaction: TransactionNullableRelationFilter
  value: DecimalFilter
}

type Migrations {
  id: Int!
  name: String!
  timestamp: BigInt!
}

type MigrationsAvgAggregate {
  id: Float
  timestamp: Float
}

input MigrationsAvgOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
}

type MigrationsCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  timestamp: Int!
}

input MigrationsCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  timestamp: SortOrder
}

input MigrationsCreateInput {
  name: String!
  timestamp: BigInt!
}

input MigrationsCreateManyInput {
  id: Int
  name: String!
  timestamp: BigInt!
}

type MigrationsGroupBy {
  _avg: MigrationsAvgAggregate
  _count: MigrationsCountAggregate
  _max: MigrationsMaxAggregate
  _min: MigrationsMinAggregate
  _sum: MigrationsSumAggregate
  id: Int!
  name: String!
  timestamp: BigInt!
}

type MigrationsMaxAggregate {
  id: Int
  name: String
  timestamp: BigInt
}

input MigrationsMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  timestamp: SortOrder
}

type MigrationsMinAggregate {
  id: Int
  name: String
  timestamp: BigInt
}

input MigrationsMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  timestamp: SortOrder
}

input MigrationsOrderByWithAggregationInput {
  _avg: MigrationsAvgOrderByAggregateInput
  _count: MigrationsCountOrderByAggregateInput
  _max: MigrationsMaxOrderByAggregateInput
  _min: MigrationsMinOrderByAggregateInput
  _sum: MigrationsSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  timestamp: SortOrder
}

input MigrationsOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  timestamp: SortOrder
}

enum MigrationsScalarFieldEnum {
  id
  name
  timestamp
}

input MigrationsScalarWhereWithAggregatesInput {
  AND: [MigrationsScalarWhereWithAggregatesInput!]
  NOT: [MigrationsScalarWhereWithAggregatesInput!]
  OR: [MigrationsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  timestamp: BigIntWithAggregatesFilter
}

type MigrationsSumAggregate {
  id: Int
  timestamp: BigInt
}

input MigrationsSumOrderByAggregateInput {
  id: SortOrder
  timestamp: SortOrder
}

input MigrationsUpdateInput {
  name: StringFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
}

input MigrationsUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  timestamp: BigIntFieldUpdateOperationsInput
}

input MigrationsWhereInput {
  AND: [MigrationsWhereInput!]
  NOT: [MigrationsWhereInput!]
  OR: [MigrationsWhereInput!]
  id: IntFilter
  name: StringFilter
  timestamp: BigIntFilter
}

input MigrationsWhereUniqueInput {
  AND: [MigrationsWhereInput!]
  NOT: [MigrationsWhereInput!]
  OR: [MigrationsWhereInput!]
  id: Int
  name: StringFilter
  timestamp: BigIntFilter
}

type Mutation {
  createManyAndReturnCache_candle(data: [Cache_candleCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnCache_candle!]!
  createManyAndReturnCache_param(data: [Cache_paramCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnCache_param!]!
  createManyAndReturnCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnCategory!]!
  createManyAndReturnCollateral_transfer(data: [Collateral_transferCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnCollateral_transfer!]!
  createManyAndReturnCrypto_prices(data: [Crypto_pricesCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnCrypto_prices!]!
  createManyAndReturnEvent(data: [EventCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnEvent!]!
  createManyAndReturnMarket(data: [MarketCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnMarket!]!
  createManyAndReturnMarket_group(data: [Market_groupCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnMarket_group!]!
  createManyAndReturnMarket_price(data: [Market_priceCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnMarket_price!]!
  createManyAndReturnMigrations(data: [MigrationsCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnMigrations!]!
  createManyAndReturnPosition(data: [PositionCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnPosition!]!
  createManyAndReturnRender_job(data: [Render_jobCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnRender_job!]!
  createManyAndReturnResource(data: [ResourceCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnResource!]!
  createManyAndReturnResource_price(data: [Resource_priceCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnResource_price!]!
  createManyAndReturnTransaction(data: [TransactionCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnTransaction!]!
  createManyCache_candle(data: [Cache_candleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCache_param(data: [Cache_paramCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCollateral_transfer(data: [Collateral_transferCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCrypto_prices(data: [Crypto_pricesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEvent(data: [EventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMarket(data: [MarketCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMarket_group(data: [Market_groupCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMarket_price(data: [Market_priceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMigrations(data: [MigrationsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPosition(data: [PositionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRender_job(data: [Render_jobCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyResource(data: [ResourceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyResource_price(data: [Resource_priceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTransaction(data: [TransactionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneCache_candle(data: Cache_candleCreateInput!): Cache_candle!
  createOneCache_param(data: Cache_paramCreateInput!): Cache_param!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneCollateral_transfer(data: Collateral_transferCreateInput!): Collateral_transfer!
  createOneCrypto_prices(data: Crypto_pricesCreateInput!): Crypto_prices!
  createOneEvent(data: EventCreateInput!): Event!
  createOneMarket(data: MarketCreateInput!): Market!
  createOneMarket_group(data: Market_groupCreateInput!): Market_group!
  createOneMarket_price(data: Market_priceCreateInput!): Market_price!
  createOneMigrations(data: MigrationsCreateInput!): Migrations!
  createOnePosition(data: PositionCreateInput!): Position!
  createOneRender_job(data: Render_jobCreateInput!): Render_job!
  createOneResource(data: ResourceCreateInput!): Resource!
  createOneResource_price(data: Resource_priceCreateInput!): Resource_price!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  deleteManyCache_candle(where: Cache_candleWhereInput): AffectedRowsOutput!
  deleteManyCache_param(where: Cache_paramWhereInput): AffectedRowsOutput!
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyCollateral_transfer(where: Collateral_transferWhereInput): AffectedRowsOutput!
  deleteManyCrypto_prices(where: Crypto_pricesWhereInput): AffectedRowsOutput!
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  deleteManyMarket(where: MarketWhereInput): AffectedRowsOutput!
  deleteManyMarket_group(where: Market_groupWhereInput): AffectedRowsOutput!
  deleteManyMarket_price(where: Market_priceWhereInput): AffectedRowsOutput!
  deleteManyMigrations(where: MigrationsWhereInput): AffectedRowsOutput!
  deleteManyPosition(where: PositionWhereInput): AffectedRowsOutput!
  deleteManyRender_job(where: Render_jobWhereInput): AffectedRowsOutput!
  deleteManyResource(where: ResourceWhereInput): AffectedRowsOutput!
  deleteManyResource_price(where: Resource_priceWhereInput): AffectedRowsOutput!
  deleteManyTransaction(where: TransactionWhereInput): AffectedRowsOutput!
  deleteOneCache_candle(where: Cache_candleWhereUniqueInput!): Cache_candle
  deleteOneCache_param(where: Cache_paramWhereUniqueInput!): Cache_param
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneCollateral_transfer(where: Collateral_transferWhereUniqueInput!): Collateral_transfer
  deleteOneCrypto_prices(where: Crypto_pricesWhereUniqueInput!): Crypto_prices
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneMarket(where: MarketWhereUniqueInput!): Market
  deleteOneMarket_group(where: Market_groupWhereUniqueInput!): Market_group
  deleteOneMarket_price(where: Market_priceWhereUniqueInput!): Market_price
  deleteOneMigrations(where: MigrationsWhereUniqueInput!): Migrations
  deleteOnePosition(where: PositionWhereUniqueInput!): Position
  deleteOneRender_job(where: Render_jobWhereUniqueInput!): Render_job
  deleteOneResource(where: ResourceWhereUniqueInput!): Resource
  deleteOneResource_price(where: Resource_priceWhereUniqueInput!): Resource_price
  deleteOneTransaction(where: TransactionWhereUniqueInput!): Transaction
  updateManyCache_candle(data: Cache_candleUpdateManyMutationInput!, where: Cache_candleWhereInput): AffectedRowsOutput!
  updateManyCache_param(data: Cache_paramUpdateManyMutationInput!, where: Cache_paramWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyCollateral_transfer(data: Collateral_transferUpdateManyMutationInput!, where: Collateral_transferWhereInput): AffectedRowsOutput!
  updateManyCrypto_prices(data: Crypto_pricesUpdateManyMutationInput!, where: Crypto_pricesWhereInput): AffectedRowsOutput!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): AffectedRowsOutput!
  updateManyMarket(data: MarketUpdateManyMutationInput!, where: MarketWhereInput): AffectedRowsOutput!
  updateManyMarket_group(data: Market_groupUpdateManyMutationInput!, where: Market_groupWhereInput): AffectedRowsOutput!
  updateManyMarket_price(data: Market_priceUpdateManyMutationInput!, where: Market_priceWhereInput): AffectedRowsOutput!
  updateManyMigrations(data: MigrationsUpdateManyMutationInput!, where: MigrationsWhereInput): AffectedRowsOutput!
  updateManyPosition(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): AffectedRowsOutput!
  updateManyRender_job(data: Render_jobUpdateManyMutationInput!, where: Render_jobWhereInput): AffectedRowsOutput!
  updateManyResource(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): AffectedRowsOutput!
  updateManyResource_price(data: Resource_priceUpdateManyMutationInput!, where: Resource_priceWhereInput): AffectedRowsOutput!
  updateManyTransaction(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): AffectedRowsOutput!
  updateOneCache_candle(data: Cache_candleUpdateInput!, where: Cache_candleWhereUniqueInput!): Cache_candle
  updateOneCache_param(data: Cache_paramUpdateInput!, where: Cache_paramWhereUniqueInput!): Cache_param
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneCollateral_transfer(data: Collateral_transferUpdateInput!, where: Collateral_transferWhereUniqueInput!): Collateral_transfer
  updateOneCrypto_prices(data: Crypto_pricesUpdateInput!, where: Crypto_pricesWhereUniqueInput!): Crypto_prices
  updateOneEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateOneMarket(data: MarketUpdateInput!, where: MarketWhereUniqueInput!): Market
  updateOneMarket_group(data: Market_groupUpdateInput!, where: Market_groupWhereUniqueInput!): Market_group
  updateOneMarket_price(data: Market_priceUpdateInput!, where: Market_priceWhereUniqueInput!): Market_price
  updateOneMigrations(data: MigrationsUpdateInput!, where: MigrationsWhereUniqueInput!): Migrations
  updateOnePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateOneRender_job(data: Render_jobUpdateInput!, where: Render_jobWhereUniqueInput!): Render_job
  updateOneResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateOneResource_price(data: Resource_priceUpdateInput!, where: Resource_priceWhereUniqueInput!): Resource_price
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  upsertOneCache_candle(create: Cache_candleCreateInput!, update: Cache_candleUpdateInput!, where: Cache_candleWhereUniqueInput!): Cache_candle!
  upsertOneCache_param(create: Cache_paramCreateInput!, update: Cache_paramUpdateInput!, where: Cache_paramWhereUniqueInput!): Cache_param!
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneCollateral_transfer(create: Collateral_transferCreateInput!, update: Collateral_transferUpdateInput!, where: Collateral_transferWhereUniqueInput!): Collateral_transfer!
  upsertOneCrypto_prices(create: Crypto_pricesCreateInput!, update: Crypto_pricesUpdateInput!, where: Crypto_pricesWhereUniqueInput!): Crypto_prices!
  upsertOneEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertOneMarket(create: MarketCreateInput!, update: MarketUpdateInput!, where: MarketWhereUniqueInput!): Market!
  upsertOneMarket_group(create: Market_groupCreateInput!, update: Market_groupUpdateInput!, where: Market_groupWhereUniqueInput!): Market_group!
  upsertOneMarket_price(create: Market_priceCreateInput!, update: Market_priceUpdateInput!, where: Market_priceWhereUniqueInput!): Market_price!
  upsertOneMigrations(create: MigrationsCreateInput!, update: MigrationsUpdateInput!, where: MigrationsWhereUniqueInput!): Migrations!
  upsertOnePosition(create: PositionCreateInput!, update: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position!
  upsertOneRender_job(create: Render_jobCreateInput!, update: Render_jobUpdateInput!, where: Render_jobWhereUniqueInput!): Render_job!
  upsertOneResource(create: ResourceCreateInput!, update: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource!
  upsertOneResource_price(create: Resource_priceCreateInput!, update: Resource_priceUpdateInput!, where: Resource_priceWhereUniqueInput!): Resource_price!
  upsertOneTransaction(create: TransactionCreateInput!, update: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction!
}

input NestedBigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt!]
}

input NestedBigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableWithAggregatesFilter {
  _avg: NestedDecimalNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedDecimalNullableFilter
  _min: NestedDecimalNullableFilter
  _sum: NestedDecimalNullableFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedEnumtransaction_type_enumFilter {
  equals: transaction_type_enum
  in: [transaction_type_enum!]
  not: NestedEnumtransaction_type_enumFilter
  notIn: [transaction_type_enum!]
}

input NestedEnumtransaction_type_enumWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumtransaction_type_enumFilter
  _min: NestedEnumtransaction_type_enumFilter
  equals: transaction_type_enum
  in: [transaction_type_enum!]
  not: NestedEnumtransaction_type_enumWithAggregatesFilter
  notIn: [transaction_type_enum!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type PnLType {
  marketId: Int!
  openPositionsPnL: String!
  owner: String!
  positionCount: Int!
  positions: [Int!]!
  totalDeposits: String!
  totalPnL: String!
  totalWithdrawals: String!
}

type Position {
  _count: PositionCount
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO!
  highPriceTick: Decimal
  id: Int!
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

type PositionAvgAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  highPriceTick: Decimal
  id: Float
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Float
  positionId: Float
  quoteToken: Decimal
}

input PositionAvgOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  highPriceTick: SortOrder
  id: SortOrder
  lowPriceTick: SortOrder
  lpBaseToken: SortOrder
  lpQuoteToken: SortOrder
  marketId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
}

type PositionCount {
  transaction(where: TransactionWhereInput): Int!
}

type PositionCountAggregate {
  _all: Int!
  baseToken: Int!
  borrowedBaseToken: Int!
  borrowedQuoteToken: Int!
  collateral: Int!
  createdAt: Int!
  highPriceTick: Int!
  id: Int!
  isLP: Int!
  isSettled: Int!
  lowPriceTick: Int!
  lpBaseToken: Int!
  lpQuoteToken: Int!
  marketId: Int!
  owner: Int!
  positionId: Int!
  quoteToken: Int!
}

input PositionCountOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  createdAt: SortOrder
  highPriceTick: SortOrder
  id: SortOrder
  isLP: SortOrder
  isSettled: SortOrder
  lowPriceTick: SortOrder
  lpBaseToken: SortOrder
  lpQuoteToken: SortOrder
  marketId: SortOrder
  owner: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
}

input PositionCreateInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  highPriceTick: Decimal
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  market: MarketCreateNestedOneWithoutPositionInput
  owner: String
  positionId: Int!
  quoteToken: Decimal
  transaction: TransactionCreateNestedManyWithoutPositionInput
}

input PositionCreateManyInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  highPriceTick: Decimal
  id: Int
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

input PositionCreateManyMarketInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  highPriceTick: Decimal
  id: Int
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

input PositionCreateManyMarketInputEnvelope {
  data: [PositionCreateManyMarketInput!]!
  skipDuplicates: Boolean
}

input PositionCreateNestedManyWithoutMarketInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutMarketInput!]
  create: [PositionCreateWithoutMarketInput!]
  createMany: PositionCreateManyMarketInputEnvelope
}

input PositionCreateNestedOneWithoutTransactionInput {
  connect: PositionWhereUniqueInput
  connectOrCreate: PositionCreateOrConnectWithoutTransactionInput
  create: PositionCreateWithoutTransactionInput
}

input PositionCreateOrConnectWithoutMarketInput {
  create: PositionCreateWithoutMarketInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateOrConnectWithoutTransactionInput {
  create: PositionCreateWithoutTransactionInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateWithoutMarketInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  highPriceTick: Decimal
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  owner: String
  positionId: Int!
  quoteToken: Decimal
  transaction: TransactionCreateNestedManyWithoutPositionInput
}

input PositionCreateWithoutTransactionInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  highPriceTick: Decimal
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  market: MarketCreateNestedOneWithoutPositionInput
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

type PositionGroupBy {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO!
  highPriceTick: Decimal
  id: Int!
  isLP: Boolean!
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  owner: String
  positionId: Int!
  quoteToken: Decimal
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

type PositionMaxAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  createdAt: DateTimeISO
  highPriceTick: Decimal
  id: Int
  isLP: Boolean
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  owner: String
  positionId: Int
  quoteToken: Decimal
}

input PositionMaxOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  createdAt: SortOrder
  highPriceTick: SortOrder
  id: SortOrder
  isLP: SortOrder
  isSettled: SortOrder
  lowPriceTick: SortOrder
  lpBaseToken: SortOrder
  lpQuoteToken: SortOrder
  marketId: SortOrder
  owner: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
}

type PositionMinAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  createdAt: DateTimeISO
  highPriceTick: Decimal
  id: Int
  isLP: Boolean
  isSettled: Boolean
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  owner: String
  positionId: Int
  quoteToken: Decimal
}

input PositionMinOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  createdAt: SortOrder
  highPriceTick: SortOrder
  id: SortOrder
  isLP: SortOrder
  isSettled: SortOrder
  lowPriceTick: SortOrder
  lpBaseToken: SortOrder
  lpQuoteToken: SortOrder
  marketId: SortOrder
  owner: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
}

input PositionNullableRelationFilter {
  is: PositionWhereInput
  isNot: PositionWhereInput
}

input PositionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionOrderByWithAggregationInput {
  _avg: PositionAvgOrderByAggregateInput
  _count: PositionCountOrderByAggregateInput
  _max: PositionMaxOrderByAggregateInput
  _min: PositionMinOrderByAggregateInput
  _sum: PositionSumOrderByAggregateInput
  baseToken: SortOrderInput
  borrowedBaseToken: SortOrderInput
  borrowedQuoteToken: SortOrderInput
  collateral: SortOrder
  createdAt: SortOrder
  highPriceTick: SortOrderInput
  id: SortOrder
  isLP: SortOrder
  isSettled: SortOrderInput
  lowPriceTick: SortOrderInput
  lpBaseToken: SortOrderInput
  lpQuoteToken: SortOrderInput
  marketId: SortOrderInput
  owner: SortOrderInput
  positionId: SortOrder
  quoteToken: SortOrderInput
}

input PositionOrderByWithRelationInput {
  baseToken: SortOrderInput
  borrowedBaseToken: SortOrderInput
  borrowedQuoteToken: SortOrderInput
  collateral: SortOrder
  createdAt: SortOrder
  highPriceTick: SortOrderInput
  id: SortOrder
  isLP: SortOrder
  isSettled: SortOrderInput
  lowPriceTick: SortOrderInput
  lpBaseToken: SortOrderInput
  lpQuoteToken: SortOrderInput
  market: MarketOrderByWithRelationInput
  marketId: SortOrderInput
  owner: SortOrderInput
  positionId: SortOrder
  quoteToken: SortOrderInput
  transaction: TransactionOrderByRelationAggregateInput
}

enum PositionScalarFieldEnum {
  baseToken
  borrowedBaseToken
  borrowedQuoteToken
  collateral
  createdAt
  highPriceTick
  id
  isLP
  isSettled
  lowPriceTick
  lpBaseToken
  lpQuoteToken
  marketId
  owner
  positionId
  quoteToken
}

input PositionScalarWhereInput {
  AND: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  createdAt: DateTimeFilter
  highPriceTick: DecimalNullableFilter
  id: IntFilter
  isLP: BoolFilter
  isSettled: BoolNullableFilter
  lowPriceTick: DecimalNullableFilter
  lpBaseToken: DecimalNullableFilter
  lpQuoteToken: DecimalNullableFilter
  marketId: IntNullableFilter
  owner: StringNullableFilter
  positionId: IntFilter
  quoteToken: DecimalNullableFilter
}

input PositionScalarWhereWithAggregatesInput {
  AND: [PositionScalarWhereWithAggregatesInput!]
  NOT: [PositionScalarWhereWithAggregatesInput!]
  OR: [PositionScalarWhereWithAggregatesInput!]
  baseToken: DecimalNullableWithAggregatesFilter
  borrowedBaseToken: DecimalNullableWithAggregatesFilter
  borrowedQuoteToken: DecimalNullableWithAggregatesFilter
  collateral: DecimalWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  highPriceTick: DecimalNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  isLP: BoolWithAggregatesFilter
  isSettled: BoolNullableWithAggregatesFilter
  lowPriceTick: DecimalNullableWithAggregatesFilter
  lpBaseToken: DecimalNullableWithAggregatesFilter
  lpQuoteToken: DecimalNullableWithAggregatesFilter
  marketId: IntNullableWithAggregatesFilter
  owner: StringNullableWithAggregatesFilter
  positionId: IntWithAggregatesFilter
  quoteToken: DecimalNullableWithAggregatesFilter
}

type PositionSumAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  highPriceTick: Decimal
  id: Int
  lowPriceTick: Decimal
  lpBaseToken: Decimal
  lpQuoteToken: Decimal
  marketId: Int
  positionId: Int
  quoteToken: Decimal
}

input PositionSumOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  highPriceTick: SortOrder
  id: SortOrder
  lowPriceTick: SortOrder
  lpBaseToken: SortOrder
  lpQuoteToken: SortOrder
  marketId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
}

input PositionUpdateInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  highPriceTick: NullableDecimalFieldUpdateOperationsInput
  isLP: BoolFieldUpdateOperationsInput
  isSettled: NullableBoolFieldUpdateOperationsInput
  lowPriceTick: NullableDecimalFieldUpdateOperationsInput
  lpBaseToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteToken: NullableDecimalFieldUpdateOperationsInput
  market: MarketUpdateOneWithoutPositionNestedInput
  owner: NullableStringFieldUpdateOperationsInput
  positionId: IntFieldUpdateOperationsInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  transaction: TransactionUpdateManyWithoutPositionNestedInput
}

input PositionUpdateManyMutationInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  highPriceTick: NullableDecimalFieldUpdateOperationsInput
  isLP: BoolFieldUpdateOperationsInput
  isSettled: NullableBoolFieldUpdateOperationsInput
  lowPriceTick: NullableDecimalFieldUpdateOperationsInput
  lpBaseToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteToken: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  positionId: IntFieldUpdateOperationsInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
}

input PositionUpdateManyWithWhereWithoutMarketInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithoutMarketNestedInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutMarketInput!]
  create: [PositionCreateWithoutMarketInput!]
  createMany: PositionCreateManyMarketInputEnvelope
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutMarketInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutMarketInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutMarketInput!]
}

input PositionUpdateOneWithoutTransactionNestedInput {
  connect: PositionWhereUniqueInput
  connectOrCreate: PositionCreateOrConnectWithoutTransactionInput
  create: PositionCreateWithoutTransactionInput
  delete: PositionWhereInput
  disconnect: PositionWhereInput
  update: PositionUpdateToOneWithWhereWithoutTransactionInput
  upsert: PositionUpsertWithoutTransactionInput
}

input PositionUpdateToOneWithWhereWithoutTransactionInput {
  data: PositionUpdateWithoutTransactionInput!
  where: PositionWhereInput
}

input PositionUpdateWithWhereUniqueWithoutMarketInput {
  data: PositionUpdateWithoutMarketInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithoutMarketInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  highPriceTick: NullableDecimalFieldUpdateOperationsInput
  isLP: BoolFieldUpdateOperationsInput
  isSettled: NullableBoolFieldUpdateOperationsInput
  lowPriceTick: NullableDecimalFieldUpdateOperationsInput
  lpBaseToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteToken: NullableDecimalFieldUpdateOperationsInput
  owner: NullableStringFieldUpdateOperationsInput
  positionId: IntFieldUpdateOperationsInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  transaction: TransactionUpdateManyWithoutPositionNestedInput
}

input PositionUpdateWithoutTransactionInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  highPriceTick: NullableDecimalFieldUpdateOperationsInput
  isLP: BoolFieldUpdateOperationsInput
  isSettled: NullableBoolFieldUpdateOperationsInput
  lowPriceTick: NullableDecimalFieldUpdateOperationsInput
  lpBaseToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteToken: NullableDecimalFieldUpdateOperationsInput
  market: MarketUpdateOneWithoutPositionNestedInput
  owner: NullableStringFieldUpdateOperationsInput
  positionId: IntFieldUpdateOperationsInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
}

input PositionUpsertWithWhereUniqueWithoutMarketInput {
  create: PositionCreateWithoutMarketInput!
  update: PositionUpdateWithoutMarketInput!
  where: PositionWhereUniqueInput!
}

input PositionUpsertWithoutTransactionInput {
  create: PositionCreateWithoutTransactionInput!
  update: PositionUpdateWithoutTransactionInput!
  where: PositionWhereInput
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  createdAt: DateTimeFilter
  highPriceTick: DecimalNullableFilter
  id: IntFilter
  isLP: BoolFilter
  isSettled: BoolNullableFilter
  lowPriceTick: DecimalNullableFilter
  lpBaseToken: DecimalNullableFilter
  lpQuoteToken: DecimalNullableFilter
  market: MarketNullableRelationFilter
  marketId: IntNullableFilter
  owner: StringNullableFilter
  positionId: IntFilter
  quoteToken: DecimalNullableFilter
  transaction: TransactionListRelationFilter
}

input PositionWhereUniqueInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  createdAt: DateTimeFilter
  highPriceTick: DecimalNullableFilter
  id: Int
  isLP: BoolFilter
  isSettled: BoolNullableFilter
  lowPriceTick: DecimalNullableFilter
  lpBaseToken: DecimalNullableFilter
  lpQuoteToken: DecimalNullableFilter
  market: MarketNullableRelationFilter
  marketId: IntNullableFilter
  owner: StringNullableFilter
  positionId: IntFilter
  positionId_marketId: positionPositionIdMarketIdCompoundUniqueInput
  quoteToken: DecimalNullableFilter
  transaction: TransactionListRelationFilter
}

type Query {
  aggregateCache_candle(cursor: Cache_candleWhereUniqueInput, orderBy: [Cache_candleOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_candleWhereInput): AggregateCache_candle!
  aggregateCache_param(cursor: Cache_paramWhereUniqueInput, orderBy: [Cache_paramOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_paramWhereInput): AggregateCache_param!
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateCollateral_transfer(cursor: Collateral_transferWhereUniqueInput, orderBy: [Collateral_transferOrderByWithRelationInput!], skip: Int, take: Int, where: Collateral_transferWhereInput): AggregateCollateral_transfer!
  aggregateCrypto_prices(cursor: Crypto_pricesWhereUniqueInput, orderBy: [Crypto_pricesOrderByWithRelationInput!], skip: Int, take: Int, where: Crypto_pricesWhereInput): AggregateCrypto_prices!
  aggregateEvent(cursor: EventWhereUniqueInput, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): AggregateEvent!
  aggregateMarket(cursor: MarketWhereUniqueInput, orderBy: [MarketOrderByWithRelationInput!], skip: Int, take: Int, where: MarketWhereInput): AggregateMarket!
  aggregateMarket_group(cursor: Market_groupWhereUniqueInput, orderBy: [Market_groupOrderByWithRelationInput!], skip: Int, take: Int, where: Market_groupWhereInput): AggregateMarket_group!
  aggregateMarket_price(cursor: Market_priceWhereUniqueInput, orderBy: [Market_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Market_priceWhereInput): AggregateMarket_price!
  aggregateMigrations(cursor: MigrationsWhereUniqueInput, orderBy: [MigrationsOrderByWithRelationInput!], skip: Int, take: Int, where: MigrationsWhereInput): AggregateMigrations!
  aggregatePosition(cursor: PositionWhereUniqueInput, orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): AggregatePosition!
  aggregateRender_job(cursor: Render_jobWhereUniqueInput, orderBy: [Render_jobOrderByWithRelationInput!], skip: Int, take: Int, where: Render_jobWhereInput): AggregateRender_job!
  aggregateResource(cursor: ResourceWhereUniqueInput, orderBy: [ResourceOrderByWithRelationInput!], skip: Int, take: Int, where: ResourceWhereInput): AggregateResource!
  aggregateResource_price(cursor: Resource_priceWhereUniqueInput, orderBy: [Resource_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Resource_priceWhereInput): AggregateResource_price!
  aggregateTransaction(cursor: TransactionWhereUniqueInput, orderBy: [TransactionOrderByWithRelationInput!], skip: Int, take: Int, where: TransactionWhereInput): AggregateTransaction!
  cache_candle(where: Cache_candleWhereUniqueInput!): Cache_candle
  cache_candles(cursor: Cache_candleWhereUniqueInput, distinct: [Cache_candleScalarFieldEnum!], orderBy: [Cache_candleOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_candleWhereInput): [Cache_candle!]!
  cache_param(where: Cache_paramWhereUniqueInput!): Cache_param
  cache_params(cursor: Cache_paramWhereUniqueInput, distinct: [Cache_paramScalarFieldEnum!], orderBy: [Cache_paramOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_paramWhereInput): [Cache_param!]!
  categories: [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  collateral_transfer(where: Collateral_transferWhereUniqueInput!): Collateral_transfer
  collateral_transfers(cursor: Collateral_transferWhereUniqueInput, distinct: [Collateral_transferScalarFieldEnum!], orderBy: [Collateral_transferOrderByWithRelationInput!], skip: Int, take: Int, where: Collateral_transferWhereInput): [Collateral_transfer!]!
  event(where: EventWhereUniqueInput!): Event
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  findFirstCache_candle(cursor: Cache_candleWhereUniqueInput, distinct: [Cache_candleScalarFieldEnum!], orderBy: [Cache_candleOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_candleWhereInput): Cache_candle
  findFirstCache_candleOrThrow(cursor: Cache_candleWhereUniqueInput, distinct: [Cache_candleScalarFieldEnum!], orderBy: [Cache_candleOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_candleWhereInput): Cache_candle
  findFirstCache_param(cursor: Cache_paramWhereUniqueInput, distinct: [Cache_paramScalarFieldEnum!], orderBy: [Cache_paramOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_paramWhereInput): Cache_param
  findFirstCache_paramOrThrow(cursor: Cache_paramWhereUniqueInput, distinct: [Cache_paramScalarFieldEnum!], orderBy: [Cache_paramOrderByWithRelationInput!], skip: Int, take: Int, where: Cache_paramWhereInput): Cache_param
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCategoryOrThrow(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCollateral_transfer(cursor: Collateral_transferWhereUniqueInput, distinct: [Collateral_transferScalarFieldEnum!], orderBy: [Collateral_transferOrderByWithRelationInput!], skip: Int, take: Int, where: Collateral_transferWhereInput): Collateral_transfer
  findFirstCollateral_transferOrThrow(cursor: Collateral_transferWhereUniqueInput, distinct: [Collateral_transferScalarFieldEnum!], orderBy: [Collateral_transferOrderByWithRelationInput!], skip: Int, take: Int, where: Collateral_transferWhereInput): Collateral_transfer
  findFirstCrypto_prices(cursor: Crypto_pricesWhereUniqueInput, distinct: [Crypto_pricesScalarFieldEnum!], orderBy: [Crypto_pricesOrderByWithRelationInput!], skip: Int, take: Int, where: Crypto_pricesWhereInput): Crypto_prices
  findFirstCrypto_pricesOrThrow(cursor: Crypto_pricesWhereUniqueInput, distinct: [Crypto_pricesScalarFieldEnum!], orderBy: [Crypto_pricesOrderByWithRelationInput!], skip: Int, take: Int, where: Crypto_pricesWhereInput): Crypto_prices
  findFirstEvent(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  findFirstEventOrThrow(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  findFirstMarket(cursor: MarketWhereUniqueInput, distinct: [MarketScalarFieldEnum!], orderBy: [MarketOrderByWithRelationInput!], skip: Int, take: Int, where: MarketWhereInput): Market
  findFirstMarketOrThrow(cursor: MarketWhereUniqueInput, distinct: [MarketScalarFieldEnum!], orderBy: [MarketOrderByWithRelationInput!], skip: Int, take: Int, where: MarketWhereInput): Market
  findFirstMarket_group(cursor: Market_groupWhereUniqueInput, distinct: [Market_groupScalarFieldEnum!], orderBy: [Market_groupOrderByWithRelationInput!], skip: Int, take: Int, where: Market_groupWhereInput): Market_group
  findFirstMarket_groupOrThrow(cursor: Market_groupWhereUniqueInput, distinct: [Market_groupScalarFieldEnum!], orderBy: [Market_groupOrderByWithRelationInput!], skip: Int, take: Int, where: Market_groupWhereInput): Market_group
  findFirstMarket_price(cursor: Market_priceWhereUniqueInput, distinct: [Market_priceScalarFieldEnum!], orderBy: [Market_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Market_priceWhereInput): Market_price
  findFirstMarket_priceOrThrow(cursor: Market_priceWhereUniqueInput, distinct: [Market_priceScalarFieldEnum!], orderBy: [Market_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Market_priceWhereInput): Market_price
  findFirstMigrations(cursor: MigrationsWhereUniqueInput, distinct: [MigrationsScalarFieldEnum!], orderBy: [MigrationsOrderByWithRelationInput!], skip: Int, take: Int, where: MigrationsWhereInput): Migrations
  findFirstMigrationsOrThrow(cursor: MigrationsWhereUniqueInput, distinct: [MigrationsScalarFieldEnum!], orderBy: [MigrationsOrderByWithRelationInput!], skip: Int, take: Int, where: MigrationsWhereInput): Migrations
  findFirstPosition(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstPositionOrThrow(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstRender_job(cursor: Render_jobWhereUniqueInput, distinct: [Render_jobScalarFieldEnum!], orderBy: [Render_jobOrderByWithRelationInput!], skip: Int, take: Int, where: Render_jobWhereInput): Render_job
  findFirstRender_jobOrThrow(cursor: Render_jobWhereUniqueInput, distinct: [Render_jobScalarFieldEnum!], orderBy: [Render_jobOrderByWithRelationInput!], skip: Int, take: Int, where: Render_jobWhereInput): Render_job
  findFirstResource(cursor: ResourceWhereUniqueInput, distinct: [ResourceScalarFieldEnum!], orderBy: [ResourceOrderByWithRelationInput!], skip: Int, take: Int, where: ResourceWhereInput): Resource
  findFirstResourceOrThrow(cursor: ResourceWhereUniqueInput, distinct: [ResourceScalarFieldEnum!], orderBy: [ResourceOrderByWithRelationInput!], skip: Int, take: Int, where: ResourceWhereInput): Resource
  findFirstResource_price(cursor: Resource_priceWhereUniqueInput, distinct: [Resource_priceScalarFieldEnum!], orderBy: [Resource_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Resource_priceWhereInput): Resource_price
  findFirstResource_priceOrThrow(cursor: Resource_priceWhereUniqueInput, distinct: [Resource_priceScalarFieldEnum!], orderBy: [Resource_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Resource_priceWhereInput): Resource_price
  findFirstTransaction(cursor: TransactionWhereUniqueInput, distinct: [TransactionScalarFieldEnum!], orderBy: [TransactionOrderByWithRelationInput!], skip: Int, take: Int, where: TransactionWhereInput): Transaction
  findFirstTransactionOrThrow(cursor: TransactionWhereUniqueInput, distinct: [TransactionScalarFieldEnum!], orderBy: [TransactionOrderByWithRelationInput!], skip: Int, take: Int, where: TransactionWhereInput): Transaction
  findManyCrypto_prices(cursor: Crypto_pricesWhereUniqueInput, distinct: [Crypto_pricesScalarFieldEnum!], orderBy: [Crypto_pricesOrderByWithRelationInput!], skip: Int, take: Int, where: Crypto_pricesWhereInput): [Crypto_prices!]!
  findManyMigrations(cursor: MigrationsWhereUniqueInput, distinct: [MigrationsScalarFieldEnum!], orderBy: [MigrationsOrderByWithRelationInput!], skip: Int, take: Int, where: MigrationsWhereInput): [Migrations!]!
  findUniqueCrypto_prices(where: Crypto_pricesWhereUniqueInput!): Crypto_prices
  findUniqueCrypto_pricesOrThrow(where: Crypto_pricesWhereUniqueInput!): Crypto_prices
  findUniqueMigrations(where: MigrationsWhereUniqueInput!): Migrations
  findUniqueMigrationsOrThrow(where: MigrationsWhereUniqueInput!): Migrations
  getCache_candle(where: Cache_candleWhereUniqueInput!): Cache_candle
  getCache_param(where: Cache_paramWhereUniqueInput!): Cache_param
  getCategory(where: CategoryWhereUniqueInput!): Category
  getCollateral_transfer(where: Collateral_transferWhereUniqueInput!): Collateral_transfer
  getEvent(where: EventWhereUniqueInput!): Event
  getMarket(where: MarketWhereUniqueInput!): Market
  getMarketLeaderboard(address: String!, chainId: Int!, marketId: String!): [PnLType!]!
  getMarket_group(where: Market_groupWhereUniqueInput!): Market_group
  getMarket_price(where: Market_priceWhereUniqueInput!): Market_price
  getPosition(where: PositionWhereUniqueInput!): Position
  getRender_job(where: Render_jobWhereUniqueInput!): Render_job
  getResource(where: ResourceWhereUniqueInput!): Resource
  getResource_price(where: Resource_priceWhereUniqueInput!): Resource_price
  getTransaction(where: TransactionWhereUniqueInput!): Transaction
  groupByCache_candle(by: [Cache_candleScalarFieldEnum!]!, having: Cache_candleScalarWhereWithAggregatesInput, orderBy: [Cache_candleOrderByWithAggregationInput!], skip: Int, take: Int, where: Cache_candleWhereInput): [Cache_candleGroupBy!]!
  groupByCache_param(by: [Cache_paramScalarFieldEnum!]!, having: Cache_paramScalarWhereWithAggregatesInput, orderBy: [Cache_paramOrderByWithAggregationInput!], skip: Int, take: Int, where: Cache_paramWhereInput): [Cache_paramGroupBy!]!
  groupByCategory(by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByCollateral_transfer(by: [Collateral_transferScalarFieldEnum!]!, having: Collateral_transferScalarWhereWithAggregatesInput, orderBy: [Collateral_transferOrderByWithAggregationInput!], skip: Int, take: Int, where: Collateral_transferWhereInput): [Collateral_transferGroupBy!]!
  groupByCrypto_prices(by: [Crypto_pricesScalarFieldEnum!]!, having: Crypto_pricesScalarWhereWithAggregatesInput, orderBy: [Crypto_pricesOrderByWithAggregationInput!], skip: Int, take: Int, where: Crypto_pricesWhereInput): [Crypto_pricesGroupBy!]!
  groupByEvent(by: [EventScalarFieldEnum!]!, having: EventScalarWhereWithAggregatesInput, orderBy: [EventOrderByWithAggregationInput!], skip: Int, take: Int, where: EventWhereInput): [EventGroupBy!]!
  groupByMarket(by: [MarketScalarFieldEnum!]!, having: MarketScalarWhereWithAggregatesInput, orderBy: [MarketOrderByWithAggregationInput!], skip: Int, take: Int, where: MarketWhereInput): [MarketGroupBy!]!
  groupByMarket_group(by: [Market_groupScalarFieldEnum!]!, having: Market_groupScalarWhereWithAggregatesInput, orderBy: [Market_groupOrderByWithAggregationInput!], skip: Int, take: Int, where: Market_groupWhereInput): [Market_groupGroupBy!]!
  groupByMarket_price(by: [Market_priceScalarFieldEnum!]!, having: Market_priceScalarWhereWithAggregatesInput, orderBy: [Market_priceOrderByWithAggregationInput!], skip: Int, take: Int, where: Market_priceWhereInput): [Market_priceGroupBy!]!
  groupByMigrations(by: [MigrationsScalarFieldEnum!]!, having: MigrationsScalarWhereWithAggregatesInput, orderBy: [MigrationsOrderByWithAggregationInput!], skip: Int, take: Int, where: MigrationsWhereInput): [MigrationsGroupBy!]!
  groupByPosition(by: [PositionScalarFieldEnum!]!, having: PositionScalarWhereWithAggregatesInput, orderBy: [PositionOrderByWithAggregationInput!], skip: Int, take: Int, where: PositionWhereInput): [PositionGroupBy!]!
  groupByRender_job(by: [Render_jobScalarFieldEnum!]!, having: Render_jobScalarWhereWithAggregatesInput, orderBy: [Render_jobOrderByWithAggregationInput!], skip: Int, take: Int, where: Render_jobWhereInput): [Render_jobGroupBy!]!
  groupByResource(by: [ResourceScalarFieldEnum!]!, having: ResourceScalarWhereWithAggregatesInput, orderBy: [ResourceOrderByWithAggregationInput!], skip: Int, take: Int, where: ResourceWhereInput): [ResourceGroupBy!]!
  groupByResource_price(by: [Resource_priceScalarFieldEnum!]!, having: Resource_priceScalarWhereWithAggregatesInput, orderBy: [Resource_priceOrderByWithAggregationInput!], skip: Int, take: Int, where: Resource_priceWhereInput): [Resource_priceGroupBy!]!
  groupByTransaction(by: [TransactionScalarFieldEnum!]!, having: TransactionScalarWhereWithAggregatesInput, orderBy: [TransactionOrderByWithAggregationInput!], skip: Int, take: Int, where: TransactionWhereInput): [TransactionGroupBy!]!
  indexCandlesFromCache(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): CandleAndTimestampType!
  indexPriceAtTime(address: String!, chainId: Int!, marketId: String!, timestamp: Int!): CandleType
  legacyMarketCandles(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): [CandleType!]!
  market(where: MarketWhereUniqueInput!): Market
  marketCandlesFromCache(address: String!, chainId: Int!, from: Int!, interval: Int!, marketId: String!, to: Int!): CandleAndTimestampType!
  marketGroup(address: String!, chainId: Int!): Market_group
  marketGroups(baseTokenName: String, chainId: Int, collateralAsset: String): [Market_group!]!
  marketGroupsByCategory(slug: String!): [Market_group!]!
  market_group(where: Market_groupWhereUniqueInput!): Market_group
  market_groups(cursor: Market_groupWhereUniqueInput, distinct: [Market_groupScalarFieldEnum!], orderBy: [Market_groupOrderByWithRelationInput!], skip: Int, take: Int, where: Market_groupWhereInput): [Market_group!]!
  market_price(where: Market_priceWhereUniqueInput!): Market_price
  market_prices(cursor: Market_priceWhereUniqueInput, distinct: [Market_priceScalarFieldEnum!], orderBy: [Market_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Market_priceWhereInput): [Market_price!]!
  markets(chainId: Int!, marketAddress: String!, marketId: Int!): [Market!]!
  position(where: PositionWhereUniqueInput!): Position
  positions(chainId: Int, marketAddress: String, owner: String): [Position!]!
  render_job(where: Render_jobWhereUniqueInput!): Render_job
  render_jobs(cursor: Render_jobWhereUniqueInput, distinct: [Render_jobScalarFieldEnum!], orderBy: [Render_jobOrderByWithRelationInput!], skip: Int, take: Int, where: Render_jobWhereInput): [Render_job!]!
  resource(slug: String!): Resource
  resourceCandlesFromCache(from: Int!, interval: Int!, slug: String!, to: Int!): CandleAndTimestampType!
  resourcePrices: [Resource_price!]!
  resourceTrailingAverageCandlesFromCache(from: Int!, interval: Int!, slug: String!, to: Int!, trailingAvgTime: Int!): CandleAndTimestampType!
  resource_price(where: Resource_priceWhereUniqueInput!): Resource_price
  resource_prices(cursor: Resource_priceWhereUniqueInput, distinct: [Resource_priceScalarFieldEnum!], orderBy: [Resource_priceOrderByWithRelationInput!], skip: Int, take: Int, where: Resource_priceWhereInput): [Resource_price!]!
  resources(categorySlug: String): [Resource!]!
  totalVolumeByMarket(chainId: Int!, marketAddress: String!, marketId: Int!): Float!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(positionId: Int): [Transaction!]!
}

enum QueryMode {
  default
  insensitive
}

type Render_job {
  createdAt: DateTimeISO!
  id: Int!
  jobId: String!
  serviceId: String!
}

type Render_jobAvgAggregate {
  id: Float
}

input Render_jobAvgOrderByAggregateInput {
  id: SortOrder
}

type Render_jobCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  jobId: Int!
  serviceId: Int!
}

input Render_jobCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  serviceId: SortOrder
}

input Render_jobCreateInput {
  createdAt: DateTimeISO
  jobId: String!
  serviceId: String!
}

input Render_jobCreateManyInput {
  createdAt: DateTimeISO
  id: Int
  jobId: String!
  serviceId: String!
}

type Render_jobGroupBy {
  _avg: Render_jobAvgAggregate
  _count: Render_jobCountAggregate
  _max: Render_jobMaxAggregate
  _min: Render_jobMinAggregate
  _sum: Render_jobSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  jobId: String!
  serviceId: String!
}

type Render_jobMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  jobId: String
  serviceId: String
}

input Render_jobMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  serviceId: SortOrder
}

type Render_jobMinAggregate {
  createdAt: DateTimeISO
  id: Int
  jobId: String
  serviceId: String
}

input Render_jobMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  serviceId: SortOrder
}

input Render_jobOrderByWithAggregationInput {
  _avg: Render_jobAvgOrderByAggregateInput
  _count: Render_jobCountOrderByAggregateInput
  _max: Render_jobMaxOrderByAggregateInput
  _min: Render_jobMinOrderByAggregateInput
  _sum: Render_jobSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  serviceId: SortOrder
}

input Render_jobOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  jobId: SortOrder
  serviceId: SortOrder
}

enum Render_jobScalarFieldEnum {
  createdAt
  id
  jobId
  serviceId
}

input Render_jobScalarWhereWithAggregatesInput {
  AND: [Render_jobScalarWhereWithAggregatesInput!]
  NOT: [Render_jobScalarWhereWithAggregatesInput!]
  OR: [Render_jobScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  jobId: StringWithAggregatesFilter
  serviceId: StringWithAggregatesFilter
}

type Render_jobSumAggregate {
  id: Int
}

input Render_jobSumOrderByAggregateInput {
  id: SortOrder
}

input Render_jobUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  jobId: StringFieldUpdateOperationsInput
  serviceId: StringFieldUpdateOperationsInput
}

input Render_jobUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  jobId: StringFieldUpdateOperationsInput
  serviceId: StringFieldUpdateOperationsInput
}

input Render_jobWhereInput {
  AND: [Render_jobWhereInput!]
  NOT: [Render_jobWhereInput!]
  OR: [Render_jobWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  jobId: StringFilter
  serviceId: StringFilter
}

input Render_jobWhereUniqueInput {
  AND: [Render_jobWhereInput!]
  NOT: [Render_jobWhereInput!]
  OR: [Render_jobWhereInput!]
  createdAt: DateTimeFilter
  id: Int
  jobId: StringFilter
  serviceId: StringFilter
}

type Resource {
  _count: ResourceCount
  categoryId: Int
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

type ResourceAvgAggregate {
  categoryId: Float
  id: Float
}

input ResourceAvgOrderByAggregateInput {
  categoryId: SortOrder
  id: SortOrder
}

type ResourceCount {
  market_group(where: Market_groupWhereInput): Int!
  resource_price(where: Resource_priceWhereInput): Int!
}

type ResourceCountAggregate {
  _all: Int!
  categoryId: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
}

input ResourceCountOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ResourceCreateInput {
  category: CategoryCreateNestedOneWithoutResourceInput
  createdAt: DateTimeISO
  market_group: Market_groupCreateNestedManyWithoutResourceInput
  name: String!
  resource_price: Resource_priceCreateNestedManyWithoutResourceInput
  slug: String!
}

input ResourceCreateManyCategoryInput {
  createdAt: DateTimeISO
  id: Int
  name: String!
  slug: String!
}

input ResourceCreateManyCategoryInputEnvelope {
  data: [ResourceCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input ResourceCreateManyInput {
  categoryId: Int
  createdAt: DateTimeISO
  id: Int
  name: String!
  slug: String!
}

input ResourceCreateNestedManyWithoutCategoryInput {
  connect: [ResourceWhereUniqueInput!]
  connectOrCreate: [ResourceCreateOrConnectWithoutCategoryInput!]
  create: [ResourceCreateWithoutCategoryInput!]
  createMany: ResourceCreateManyCategoryInputEnvelope
}

input ResourceCreateNestedOneWithoutMarket_groupInput {
  connect: ResourceWhereUniqueInput
  connectOrCreate: ResourceCreateOrConnectWithoutMarket_groupInput
  create: ResourceCreateWithoutMarket_groupInput
}

input ResourceCreateNestedOneWithoutResource_priceInput {
  connect: ResourceWhereUniqueInput
  connectOrCreate: ResourceCreateOrConnectWithoutResource_priceInput
  create: ResourceCreateWithoutResource_priceInput
}

input ResourceCreateOrConnectWithoutCategoryInput {
  create: ResourceCreateWithoutCategoryInput!
  where: ResourceWhereUniqueInput!
}

input ResourceCreateOrConnectWithoutMarket_groupInput {
  create: ResourceCreateWithoutMarket_groupInput!
  where: ResourceWhereUniqueInput!
}

input ResourceCreateOrConnectWithoutResource_priceInput {
  create: ResourceCreateWithoutResource_priceInput!
  where: ResourceWhereUniqueInput!
}

input ResourceCreateWithoutCategoryInput {
  createdAt: DateTimeISO
  market_group: Market_groupCreateNestedManyWithoutResourceInput
  name: String!
  resource_price: Resource_priceCreateNestedManyWithoutResourceInput
  slug: String!
}

input ResourceCreateWithoutMarket_groupInput {
  category: CategoryCreateNestedOneWithoutResourceInput
  createdAt: DateTimeISO
  name: String!
  resource_price: Resource_priceCreateNestedManyWithoutResourceInput
  slug: String!
}

input ResourceCreateWithoutResource_priceInput {
  category: CategoryCreateNestedOneWithoutResourceInput
  createdAt: DateTimeISO
  market_group: Market_groupCreateNestedManyWithoutResourceInput
  name: String!
  slug: String!
}

type ResourceGroupBy {
  _avg: ResourceAvgAggregate
  _count: ResourceCountAggregate
  _max: ResourceMaxAggregate
  _min: ResourceMinAggregate
  _sum: ResourceSumAggregate
  categoryId: Int
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  slug: String!
}

input ResourceListRelationFilter {
  every: ResourceWhereInput
  none: ResourceWhereInput
  some: ResourceWhereInput
}

type ResourceMaxAggregate {
  categoryId: Int
  createdAt: DateTimeISO
  id: Int
  name: String
  slug: String
}

input ResourceMaxOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

type ResourceMinAggregate {
  categoryId: Int
  createdAt: DateTimeISO
  id: Int
  name: String
  slug: String
}

input ResourceMinOrderByAggregateInput {
  categoryId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ResourceNullableRelationFilter {
  is: ResourceWhereInput
  isNot: ResourceWhereInput
}

input ResourceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ResourceOrderByWithAggregationInput {
  _avg: ResourceAvgOrderByAggregateInput
  _count: ResourceCountOrderByAggregateInput
  _max: ResourceMaxOrderByAggregateInput
  _min: ResourceMinOrderByAggregateInput
  _sum: ResourceSumOrderByAggregateInput
  categoryId: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
}

input ResourceOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  market_group: Market_groupOrderByRelationAggregateInput
  name: SortOrder
  resource_price: Resource_priceOrderByRelationAggregateInput
  slug: SortOrder
}

enum ResourceScalarFieldEnum {
  categoryId
  createdAt
  id
  name
  slug
}

input ResourceScalarWhereInput {
  AND: [ResourceScalarWhereInput!]
  NOT: [ResourceScalarWhereInput!]
  OR: [ResourceScalarWhereInput!]
  categoryId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
}

input ResourceScalarWhereWithAggregatesInput {
  AND: [ResourceScalarWhereWithAggregatesInput!]
  NOT: [ResourceScalarWhereWithAggregatesInput!]
  OR: [ResourceScalarWhereWithAggregatesInput!]
  categoryId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
}

type ResourceSumAggregate {
  categoryId: Int
  id: Int
}

input ResourceSumOrderByAggregateInput {
  categoryId: SortOrder
  id: SortOrder
}

input ResourceUpdateInput {
  category: CategoryUpdateOneWithoutResourceNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  market_group: Market_groupUpdateManyWithoutResourceNestedInput
  name: StringFieldUpdateOperationsInput
  resource_price: Resource_priceUpdateManyWithoutResourceNestedInput
  slug: StringFieldUpdateOperationsInput
}

input ResourceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input ResourceUpdateManyWithWhereWithoutCategoryInput {
  data: ResourceUpdateManyMutationInput!
  where: ResourceScalarWhereInput!
}

input ResourceUpdateManyWithoutCategoryNestedInput {
  connect: [ResourceWhereUniqueInput!]
  connectOrCreate: [ResourceCreateOrConnectWithoutCategoryInput!]
  create: [ResourceCreateWithoutCategoryInput!]
  createMany: ResourceCreateManyCategoryInputEnvelope
  delete: [ResourceWhereUniqueInput!]
  deleteMany: [ResourceScalarWhereInput!]
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ResourceUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ResourceUpdateOneWithoutMarket_groupNestedInput {
  connect: ResourceWhereUniqueInput
  connectOrCreate: ResourceCreateOrConnectWithoutMarket_groupInput
  create: ResourceCreateWithoutMarket_groupInput
  delete: ResourceWhereInput
  disconnect: ResourceWhereInput
  update: ResourceUpdateToOneWithWhereWithoutMarket_groupInput
  upsert: ResourceUpsertWithoutMarket_groupInput
}

input ResourceUpdateOneWithoutResource_priceNestedInput {
  connect: ResourceWhereUniqueInput
  connectOrCreate: ResourceCreateOrConnectWithoutResource_priceInput
  create: ResourceCreateWithoutResource_priceInput
  delete: ResourceWhereInput
  disconnect: ResourceWhereInput
  update: ResourceUpdateToOneWithWhereWithoutResource_priceInput
  upsert: ResourceUpsertWithoutResource_priceInput
}

input ResourceUpdateToOneWithWhereWithoutMarket_groupInput {
  data: ResourceUpdateWithoutMarket_groupInput!
  where: ResourceWhereInput
}

input ResourceUpdateToOneWithWhereWithoutResource_priceInput {
  data: ResourceUpdateWithoutResource_priceInput!
  where: ResourceWhereInput
}

input ResourceUpdateWithWhereUniqueWithoutCategoryInput {
  data: ResourceUpdateWithoutCategoryInput!
  where: ResourceWhereUniqueInput!
}

input ResourceUpdateWithoutCategoryInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  market_group: Market_groupUpdateManyWithoutResourceNestedInput
  name: StringFieldUpdateOperationsInput
  resource_price: Resource_priceUpdateManyWithoutResourceNestedInput
  slug: StringFieldUpdateOperationsInput
}

input ResourceUpdateWithoutMarket_groupInput {
  category: CategoryUpdateOneWithoutResourceNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resource_price: Resource_priceUpdateManyWithoutResourceNestedInput
  slug: StringFieldUpdateOperationsInput
}

input ResourceUpdateWithoutResource_priceInput {
  category: CategoryUpdateOneWithoutResourceNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  market_group: Market_groupUpdateManyWithoutResourceNestedInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input ResourceUpsertWithWhereUniqueWithoutCategoryInput {
  create: ResourceCreateWithoutCategoryInput!
  update: ResourceUpdateWithoutCategoryInput!
  where: ResourceWhereUniqueInput!
}

input ResourceUpsertWithoutMarket_groupInput {
  create: ResourceCreateWithoutMarket_groupInput!
  update: ResourceUpdateWithoutMarket_groupInput!
  where: ResourceWhereInput
}

input ResourceUpsertWithoutResource_priceInput {
  create: ResourceCreateWithoutResource_priceInput!
  update: ResourceUpdateWithoutResource_priceInput!
  where: ResourceWhereInput
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  category: CategoryNullableRelationFilter
  categoryId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  market_group: Market_groupListRelationFilter
  name: StringFilter
  resource_price: Resource_priceListRelationFilter
  slug: StringFilter
}

input ResourceWhereUniqueInput {
  AND: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  category: CategoryNullableRelationFilter
  categoryId: IntNullableFilter
  createdAt: DateTimeFilter
  id: Int
  market_group: Market_groupListRelationFilter
  name: String
  resource_price: Resource_priceListRelationFilter
  slug: String
}

type Resource_price {
  blockNumber: Int!
  createdAt: DateTimeISO!
  feePaid: Decimal!
  id: Int!
  resourceId: Int
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

type Resource_priceAvgAggregate {
  blockNumber: Float
  feePaid: Decimal
  id: Float
  resourceId: Float
  timestamp: Float
  used: Decimal
  value: Decimal
}

input Resource_priceAvgOrderByAggregateInput {
  blockNumber: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrder
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

type Resource_priceCountAggregate {
  _all: Int!
  blockNumber: Int!
  createdAt: Int!
  feePaid: Int!
  id: Int!
  resourceId: Int!
  timestamp: Int!
  used: Int!
  value: Int!
}

input Resource_priceCountOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrder
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

input Resource_priceCreateInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  feePaid: Decimal!
  resource: ResourceCreateNestedOneWithoutResource_priceInput
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

input Resource_priceCreateManyInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  feePaid: Decimal!
  id: Int
  resourceId: Int
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

input Resource_priceCreateManyResourceInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  feePaid: Decimal!
  id: Int
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

input Resource_priceCreateManyResourceInputEnvelope {
  data: [Resource_priceCreateManyResourceInput!]!
  skipDuplicates: Boolean
}

input Resource_priceCreateNestedManyWithoutResourceInput {
  connect: [Resource_priceWhereUniqueInput!]
  connectOrCreate: [Resource_priceCreateOrConnectWithoutResourceInput!]
  create: [Resource_priceCreateWithoutResourceInput!]
  createMany: Resource_priceCreateManyResourceInputEnvelope
}

input Resource_priceCreateOrConnectWithoutResourceInput {
  create: Resource_priceCreateWithoutResourceInput!
  where: Resource_priceWhereUniqueInput!
}

input Resource_priceCreateWithoutResourceInput {
  blockNumber: Int!
  createdAt: DateTimeISO
  feePaid: Decimal!
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

type Resource_priceGroupBy {
  _avg: Resource_priceAvgAggregate
  _count: Resource_priceCountAggregate
  _max: Resource_priceMaxAggregate
  _min: Resource_priceMinAggregate
  _sum: Resource_priceSumAggregate
  blockNumber: Int!
  createdAt: DateTimeISO!
  feePaid: Decimal!
  id: Int!
  resourceId: Int
  timestamp: Int!
  used: Decimal!
  value: Decimal!
}

input Resource_priceListRelationFilter {
  every: Resource_priceWhereInput
  none: Resource_priceWhereInput
  some: Resource_priceWhereInput
}

type Resource_priceMaxAggregate {
  blockNumber: Int
  createdAt: DateTimeISO
  feePaid: Decimal
  id: Int
  resourceId: Int
  timestamp: Int
  used: Decimal
  value: Decimal
}

input Resource_priceMaxOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrder
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

type Resource_priceMinAggregate {
  blockNumber: Int
  createdAt: DateTimeISO
  feePaid: Decimal
  id: Int
  resourceId: Int
  timestamp: Int
  used: Decimal
  value: Decimal
}

input Resource_priceMinOrderByAggregateInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrder
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

input Resource_priceOrderByRelationAggregateInput {
  _count: SortOrder
}

input Resource_priceOrderByWithAggregationInput {
  _avg: Resource_priceAvgOrderByAggregateInput
  _count: Resource_priceCountOrderByAggregateInput
  _max: Resource_priceMaxOrderByAggregateInput
  _min: Resource_priceMinOrderByAggregateInput
  _sum: Resource_priceSumOrderByAggregateInput
  blockNumber: SortOrder
  createdAt: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrderInput
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

input Resource_priceOrderByWithRelationInput {
  blockNumber: SortOrder
  createdAt: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resource: ResourceOrderByWithRelationInput
  resourceId: SortOrderInput
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

enum Resource_priceScalarFieldEnum {
  blockNumber
  createdAt
  feePaid
  id
  resourceId
  timestamp
  used
  value
}

input Resource_priceScalarWhereInput {
  AND: [Resource_priceScalarWhereInput!]
  NOT: [Resource_priceScalarWhereInput!]
  OR: [Resource_priceScalarWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  feePaid: DecimalFilter
  id: IntFilter
  resourceId: IntNullableFilter
  timestamp: IntFilter
  used: DecimalFilter
  value: DecimalFilter
}

input Resource_priceScalarWhereWithAggregatesInput {
  AND: [Resource_priceScalarWhereWithAggregatesInput!]
  NOT: [Resource_priceScalarWhereWithAggregatesInput!]
  OR: [Resource_priceScalarWhereWithAggregatesInput!]
  blockNumber: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  feePaid: DecimalWithAggregatesFilter
  id: IntWithAggregatesFilter
  resourceId: IntNullableWithAggregatesFilter
  timestamp: IntWithAggregatesFilter
  used: DecimalWithAggregatesFilter
  value: DecimalWithAggregatesFilter
}

type Resource_priceSumAggregate {
  blockNumber: Int
  feePaid: Decimal
  id: Int
  resourceId: Int
  timestamp: Int
  used: Decimal
  value: Decimal
}

input Resource_priceSumOrderByAggregateInput {
  blockNumber: SortOrder
  feePaid: SortOrder
  id: SortOrder
  resourceId: SortOrder
  timestamp: SortOrder
  used: SortOrder
  value: SortOrder
}

input Resource_priceUpdateInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePaid: DecimalFieldUpdateOperationsInput
  resource: ResourceUpdateOneWithoutResource_priceNestedInput
  timestamp: IntFieldUpdateOperationsInput
  used: DecimalFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
}

input Resource_priceUpdateManyMutationInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePaid: DecimalFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  used: DecimalFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
}

input Resource_priceUpdateManyWithWhereWithoutResourceInput {
  data: Resource_priceUpdateManyMutationInput!
  where: Resource_priceScalarWhereInput!
}

input Resource_priceUpdateManyWithoutResourceNestedInput {
  connect: [Resource_priceWhereUniqueInput!]
  connectOrCreate: [Resource_priceCreateOrConnectWithoutResourceInput!]
  create: [Resource_priceCreateWithoutResourceInput!]
  createMany: Resource_priceCreateManyResourceInputEnvelope
  delete: [Resource_priceWhereUniqueInput!]
  deleteMany: [Resource_priceScalarWhereInput!]
  disconnect: [Resource_priceWhereUniqueInput!]
  set: [Resource_priceWhereUniqueInput!]
  update: [Resource_priceUpdateWithWhereUniqueWithoutResourceInput!]
  updateMany: [Resource_priceUpdateManyWithWhereWithoutResourceInput!]
  upsert: [Resource_priceUpsertWithWhereUniqueWithoutResourceInput!]
}

input Resource_priceUpdateWithWhereUniqueWithoutResourceInput {
  data: Resource_priceUpdateWithoutResourceInput!
  where: Resource_priceWhereUniqueInput!
}

input Resource_priceUpdateWithoutResourceInput {
  blockNumber: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feePaid: DecimalFieldUpdateOperationsInput
  timestamp: IntFieldUpdateOperationsInput
  used: DecimalFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
}

input Resource_priceUpsertWithWhereUniqueWithoutResourceInput {
  create: Resource_priceCreateWithoutResourceInput!
  update: Resource_priceUpdateWithoutResourceInput!
  where: Resource_priceWhereUniqueInput!
}

input Resource_priceWhereInput {
  AND: [Resource_priceWhereInput!]
  NOT: [Resource_priceWhereInput!]
  OR: [Resource_priceWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  feePaid: DecimalFilter
  id: IntFilter
  resource: ResourceNullableRelationFilter
  resourceId: IntNullableFilter
  timestamp: IntFilter
  used: DecimalFilter
  value: DecimalFilter
}

input Resource_priceWhereUniqueInput {
  AND: [Resource_priceWhereInput!]
  NOT: [Resource_priceWhereInput!]
  OR: [Resource_priceWhereInput!]
  blockNumber: IntFilter
  createdAt: DateTimeFilter
  feePaid: DecimalFilter
  id: Int
  resource: ResourceNullableRelationFilter
  resourceId: IntNullableFilter
  resourceId_timestamp: resource_priceResourceIdTimestampCompoundUniqueInput
  timestamp: IntFilter
  used: DecimalFilter
  value: DecimalFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Transaction {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateralTransferId: Int
  createdAt: DateTimeISO!
  eventId: Int
  id: Int!
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

type TransactionAvgAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  collateralTransferId: Float
  eventId: Float
  id: Float
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Float
  positionId: Float
  quoteToken: Decimal
  tradeRatioD18: Decimal
}

input TransactionAvgOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  collateralTransferId: SortOrder
  eventId: SortOrder
  id: SortOrder
  lpBaseDeltaToken: SortOrder
  lpQuoteDeltaToken: SortOrder
  marketPriceId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
  tradeRatioD18: SortOrder
}

type TransactionCountAggregate {
  _all: Int!
  baseToken: Int!
  borrowedBaseToken: Int!
  borrowedQuoteToken: Int!
  collateral: Int!
  collateralTransferId: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  lpBaseDeltaToken: Int!
  lpQuoteDeltaToken: Int!
  marketPriceId: Int!
  positionId: Int!
  quoteToken: Int!
  tradeRatioD18: Int!
  type: Int!
}

input TransactionCountOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  collateralTransferId: SortOrder
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  lpBaseDeltaToken: SortOrder
  lpQuoteDeltaToken: SortOrder
  marketPriceId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
  tradeRatioD18: SortOrder
  type: SortOrder
}

input TransactionCreateInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateral_transfer: Collateral_transferCreateNestedOneWithoutTransactionInput
  createdAt: DateTimeISO
  event: EventCreateNestedOneWithoutTransactionInput
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  market_price: Market_priceCreateNestedOneWithoutTransactionInput
  position: PositionCreateNestedOneWithoutTransactionInput
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateManyInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateralTransferId: Int
  createdAt: DateTimeISO
  eventId: Int
  id: Int
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateManyPositionInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateralTransferId: Int
  createdAt: DateTimeISO
  eventId: Int
  id: Int
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateManyPositionInputEnvelope {
  data: [TransactionCreateManyPositionInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutPositionInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutPositionInput!]
  create: [TransactionCreateWithoutPositionInput!]
  createMany: TransactionCreateManyPositionInputEnvelope
}

input TransactionCreateNestedOneWithoutCollateral_transferInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutCollateral_transferInput
  create: TransactionCreateWithoutCollateral_transferInput
}

input TransactionCreateNestedOneWithoutEventInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutEventInput
  create: TransactionCreateWithoutEventInput
}

input TransactionCreateNestedOneWithoutMarket_priceInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutMarket_priceInput
  create: TransactionCreateWithoutMarket_priceInput
}

input TransactionCreateOrConnectWithoutCollateral_transferInput {
  create: TransactionCreateWithoutCollateral_transferInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutEventInput {
  create: TransactionCreateWithoutEventInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutMarket_priceInput {
  create: TransactionCreateWithoutMarket_priceInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutPositionInput {
  create: TransactionCreateWithoutPositionInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutCollateral_transferInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  createdAt: DateTimeISO
  event: EventCreateNestedOneWithoutTransactionInput
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  market_price: Market_priceCreateNestedOneWithoutTransactionInput
  position: PositionCreateNestedOneWithoutTransactionInput
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateWithoutEventInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateral_transfer: Collateral_transferCreateNestedOneWithoutTransactionInput
  createdAt: DateTimeISO
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  market_price: Market_priceCreateNestedOneWithoutTransactionInput
  position: PositionCreateNestedOneWithoutTransactionInput
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateWithoutMarket_priceInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateral_transfer: Collateral_transferCreateNestedOneWithoutTransactionInput
  createdAt: DateTimeISO
  event: EventCreateNestedOneWithoutTransactionInput
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  position: PositionCreateNestedOneWithoutTransactionInput
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionCreateWithoutPositionInput {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateral_transfer: Collateral_transferCreateNestedOneWithoutTransactionInput
  createdAt: DateTimeISO
  event: EventCreateNestedOneWithoutTransactionInput
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  market_price: Market_priceCreateNestedOneWithoutTransactionInput
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

type TransactionGroupBy {
  _avg: TransactionAvgAggregate
  _count: TransactionCountAggregate
  _max: TransactionMaxAggregate
  _min: TransactionMinAggregate
  _sum: TransactionSumAggregate
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal!
  collateralTransferId: Int
  createdAt: DateTimeISO!
  eventId: Int
  id: Int!
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum!
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

type TransactionMaxAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  collateralTransferId: Int
  createdAt: DateTimeISO
  eventId: Int
  id: Int
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum
}

input TransactionMaxOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  collateralTransferId: SortOrder
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  lpBaseDeltaToken: SortOrder
  lpQuoteDeltaToken: SortOrder
  marketPriceId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
  tradeRatioD18: SortOrder
  type: SortOrder
}

type TransactionMinAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  collateralTransferId: Int
  createdAt: DateTimeISO
  eventId: Int
  id: Int
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
  type: transaction_type_enum
}

input TransactionMinOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  collateralTransferId: SortOrder
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  lpBaseDeltaToken: SortOrder
  lpQuoteDeltaToken: SortOrder
  marketPriceId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
  tradeRatioD18: SortOrder
  type: SortOrder
}

input TransactionNullableRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionOrderByWithAggregationInput {
  _avg: TransactionAvgOrderByAggregateInput
  _count: TransactionCountOrderByAggregateInput
  _max: TransactionMaxOrderByAggregateInput
  _min: TransactionMinOrderByAggregateInput
  _sum: TransactionSumOrderByAggregateInput
  baseToken: SortOrderInput
  borrowedBaseToken: SortOrderInput
  borrowedQuoteToken: SortOrderInput
  collateral: SortOrder
  collateralTransferId: SortOrderInput
  createdAt: SortOrder
  eventId: SortOrderInput
  id: SortOrder
  lpBaseDeltaToken: SortOrderInput
  lpQuoteDeltaToken: SortOrderInput
  marketPriceId: SortOrderInput
  positionId: SortOrderInput
  quoteToken: SortOrderInput
  tradeRatioD18: SortOrderInput
  type: SortOrder
}

input TransactionOrderByWithRelationInput {
  baseToken: SortOrderInput
  borrowedBaseToken: SortOrderInput
  borrowedQuoteToken: SortOrderInput
  collateral: SortOrder
  collateralTransferId: SortOrderInput
  collateral_transfer: Collateral_transferOrderByWithRelationInput
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrderInput
  id: SortOrder
  lpBaseDeltaToken: SortOrderInput
  lpQuoteDeltaToken: SortOrderInput
  marketPriceId: SortOrderInput
  market_price: Market_priceOrderByWithRelationInput
  position: PositionOrderByWithRelationInput
  positionId: SortOrderInput
  quoteToken: SortOrderInput
  tradeRatioD18: SortOrderInput
  type: SortOrder
}

enum TransactionScalarFieldEnum {
  baseToken
  borrowedBaseToken
  borrowedQuoteToken
  collateral
  collateralTransferId
  createdAt
  eventId
  id
  lpBaseDeltaToken
  lpQuoteDeltaToken
  marketPriceId
  positionId
  quoteToken
  tradeRatioD18
  type
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  collateralTransferId: IntNullableFilter
  createdAt: DateTimeFilter
  eventId: IntNullableFilter
  id: IntFilter
  lpBaseDeltaToken: DecimalNullableFilter
  lpQuoteDeltaToken: DecimalNullableFilter
  marketPriceId: IntNullableFilter
  positionId: IntNullableFilter
  quoteToken: DecimalNullableFilter
  tradeRatioD18: DecimalNullableFilter
  type: Enumtransaction_type_enumFilter
}

input TransactionScalarWhereWithAggregatesInput {
  AND: [TransactionScalarWhereWithAggregatesInput!]
  NOT: [TransactionScalarWhereWithAggregatesInput!]
  OR: [TransactionScalarWhereWithAggregatesInput!]
  baseToken: DecimalNullableWithAggregatesFilter
  borrowedBaseToken: DecimalNullableWithAggregatesFilter
  borrowedQuoteToken: DecimalNullableWithAggregatesFilter
  collateral: DecimalWithAggregatesFilter
  collateralTransferId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  eventId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  lpBaseDeltaToken: DecimalNullableWithAggregatesFilter
  lpQuoteDeltaToken: DecimalNullableWithAggregatesFilter
  marketPriceId: IntNullableWithAggregatesFilter
  positionId: IntNullableWithAggregatesFilter
  quoteToken: DecimalNullableWithAggregatesFilter
  tradeRatioD18: DecimalNullableWithAggregatesFilter
  type: Enumtransaction_type_enumWithAggregatesFilter
}

type TransactionSumAggregate {
  baseToken: Decimal
  borrowedBaseToken: Decimal
  borrowedQuoteToken: Decimal
  collateral: Decimal
  collateralTransferId: Int
  eventId: Int
  id: Int
  lpBaseDeltaToken: Decimal
  lpQuoteDeltaToken: Decimal
  marketPriceId: Int
  positionId: Int
  quoteToken: Decimal
  tradeRatioD18: Decimal
}

input TransactionSumOrderByAggregateInput {
  baseToken: SortOrder
  borrowedBaseToken: SortOrder
  borrowedQuoteToken: SortOrder
  collateral: SortOrder
  collateralTransferId: SortOrder
  eventId: SortOrder
  id: SortOrder
  lpBaseDeltaToken: SortOrder
  lpQuoteDeltaToken: SortOrder
  marketPriceId: SortOrder
  positionId: SortOrder
  quoteToken: SortOrder
  tradeRatioD18: SortOrder
}

input TransactionUpdateInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  collateral_transfer: Collateral_transferUpdateOneWithoutTransactionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutTransactionNestedInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  market_price: Market_priceUpdateOneWithoutTransactionNestedInput
  position: PositionUpdateOneWithoutTransactionNestedInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpdateManyMutationInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutPositionInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutPositionNestedInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutPositionInput!]
  create: [TransactionCreateWithoutPositionInput!]
  createMany: TransactionCreateManyPositionInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutPositionInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutPositionInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutPositionInput!]
}

input TransactionUpdateOneWithoutCollateral_transferNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutCollateral_transferInput
  create: TransactionCreateWithoutCollateral_transferInput
  delete: TransactionWhereInput
  disconnect: TransactionWhereInput
  update: TransactionUpdateToOneWithWhereWithoutCollateral_transferInput
  upsert: TransactionUpsertWithoutCollateral_transferInput
}

input TransactionUpdateOneWithoutEventNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutEventInput
  create: TransactionCreateWithoutEventInput
  delete: TransactionWhereInput
  disconnect: TransactionWhereInput
  update: TransactionUpdateToOneWithWhereWithoutEventInput
  upsert: TransactionUpsertWithoutEventInput
}

input TransactionUpdateOneWithoutMarket_priceNestedInput {
  connect: TransactionWhereUniqueInput
  connectOrCreate: TransactionCreateOrConnectWithoutMarket_priceInput
  create: TransactionCreateWithoutMarket_priceInput
  delete: TransactionWhereInput
  disconnect: TransactionWhereInput
  update: TransactionUpdateToOneWithWhereWithoutMarket_priceInput
  upsert: TransactionUpsertWithoutMarket_priceInput
}

input TransactionUpdateToOneWithWhereWithoutCollateral_transferInput {
  data: TransactionUpdateWithoutCollateral_transferInput!
  where: TransactionWhereInput
}

input TransactionUpdateToOneWithWhereWithoutEventInput {
  data: TransactionUpdateWithoutEventInput!
  where: TransactionWhereInput
}

input TransactionUpdateToOneWithWhereWithoutMarket_priceInput {
  data: TransactionUpdateWithoutMarket_priceInput!
  where: TransactionWhereInput
}

input TransactionUpdateWithWhereUniqueWithoutPositionInput {
  data: TransactionUpdateWithoutPositionInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutCollateral_transferInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutTransactionNestedInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  market_price: Market_priceUpdateOneWithoutTransactionNestedInput
  position: PositionUpdateOneWithoutTransactionNestedInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpdateWithoutEventInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  collateral_transfer: Collateral_transferUpdateOneWithoutTransactionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  market_price: Market_priceUpdateOneWithoutTransactionNestedInput
  position: PositionUpdateOneWithoutTransactionNestedInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpdateWithoutMarket_priceInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  collateral_transfer: Collateral_transferUpdateOneWithoutTransactionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutTransactionNestedInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  position: PositionUpdateOneWithoutTransactionNestedInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpdateWithoutPositionInput {
  baseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedBaseToken: NullableDecimalFieldUpdateOperationsInput
  borrowedQuoteToken: NullableDecimalFieldUpdateOperationsInput
  collateral: DecimalFieldUpdateOperationsInput
  collateral_transfer: Collateral_transferUpdateOneWithoutTransactionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneWithoutTransactionNestedInput
  lpBaseDeltaToken: NullableDecimalFieldUpdateOperationsInput
  lpQuoteDeltaToken: NullableDecimalFieldUpdateOperationsInput
  market_price: Market_priceUpdateOneWithoutTransactionNestedInput
  quoteToken: NullableDecimalFieldUpdateOperationsInput
  tradeRatioD18: NullableDecimalFieldUpdateOperationsInput
  type: Enumtransaction_type_enumFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutPositionInput {
  create: TransactionCreateWithoutPositionInput!
  update: TransactionUpdateWithoutPositionInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithoutCollateral_transferInput {
  create: TransactionCreateWithoutCollateral_transferInput!
  update: TransactionUpdateWithoutCollateral_transferInput!
  where: TransactionWhereInput
}

input TransactionUpsertWithoutEventInput {
  create: TransactionCreateWithoutEventInput!
  update: TransactionUpdateWithoutEventInput!
  where: TransactionWhereInput
}

input TransactionUpsertWithoutMarket_priceInput {
  create: TransactionCreateWithoutMarket_priceInput!
  update: TransactionUpdateWithoutMarket_priceInput!
  where: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  collateralTransferId: IntNullableFilter
  collateral_transfer: Collateral_transferNullableRelationFilter
  createdAt: DateTimeFilter
  event: EventNullableRelationFilter
  eventId: IntNullableFilter
  id: IntFilter
  lpBaseDeltaToken: DecimalNullableFilter
  lpQuoteDeltaToken: DecimalNullableFilter
  marketPriceId: IntNullableFilter
  market_price: Market_priceNullableRelationFilter
  position: PositionNullableRelationFilter
  positionId: IntNullableFilter
  quoteToken: DecimalNullableFilter
  tradeRatioD18: DecimalNullableFilter
  type: Enumtransaction_type_enumFilter
}

input TransactionWhereUniqueInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  baseToken: DecimalNullableFilter
  borrowedBaseToken: DecimalNullableFilter
  borrowedQuoteToken: DecimalNullableFilter
  collateral: DecimalFilter
  collateralTransferId: Int
  collateral_transfer: Collateral_transferNullableRelationFilter
  createdAt: DateTimeFilter
  event: EventNullableRelationFilter
  eventId: Int
  id: Int
  lpBaseDeltaToken: DecimalNullableFilter
  lpQuoteDeltaToken: DecimalNullableFilter
  marketPriceId: Int
  market_price: Market_priceNullableRelationFilter
  position: PositionNullableRelationFilter
  positionId: IntNullableFilter
  quoteToken: DecimalNullableFilter
  tradeRatioD18: DecimalNullableFilter
  type: Enumtransaction_type_enumFilter
}

input cache_candleCandleTypeIntervalTimestampResourceSlugMarketIdxTrailingAvgTimeCompoundUniqueInput {
  candleType: String!
  interval: Int!
  marketIdx: Int!
  resourceSlug: String!
  timestamp: Int!
  trailingAvgTime: Int!
}

input eventTransactionHashMarketGroupIdBlockNumberLogIndexCompoundUniqueInput {
  blockNumber: Int!
  logIndex: Int!
  marketGroupId: Int!
  transactionHash: String!
}

input marketMarketGroupIdMarketIdCompoundUniqueInput {
  marketGroupId: Int!
  marketId: Int!
}

input market_groupAddressChainIdCompoundUniqueInput {
  address: String!
  chainId: Int!
}

input positionPositionIdMarketIdCompoundUniqueInput {
  marketId: Int!
  positionId: Int!
}

input resource_priceResourceIdTimestampCompoundUniqueInput {
  resourceId: Int!
  timestamp: Int!
}

enum transaction_type_enum {
  addLiquidity
  long
  removeLiquidity
  settledPosition
  short
}