interface BlockchainClient {
    getBlockNumber(): Promise<bigint>;
    getBlock(params: { blockNumber: bigint }): Promise<{ number: bigint; timestamp: bigint; price: bigint }>;
}

async function getBlockByTimestamp(client: BlockchainClient, timestamp: bigint): Promise<{ number: bigint; timestamp: bigint; price: bigint }> {
    const latestBlockNumber = await client.getBlockNumber();
    const latestBlock = await client.getBlock({ blockNumber: latestBlockNumber });

    let low = 0n;
    let high = latestBlock.number;
    let closestBlock: { number: bigint; timestamp: bigint; price: bigint } | null = null;

    while (low <= high) {
        const mid = (low + high) / 2n;
        const block = await client.getBlock({ blockNumber: mid });

        if (block.timestamp < timestamp) {
            low = mid + 1n;
        } else {
            high = mid - 1n;
            closestBlock = block;
        }
    }

    if (closestBlock && closestBlock.timestamp < timestamp) {
        const nextBlock = await client.getBlock({ blockNumber: closestBlock.number + 1n });
        if (nextBlock.timestamp >= timestamp) {
            closestBlock = nextBlock;
        }
    }

    return closestBlock!;
}

async function getPrices(client: BlockchainClient, startBlock: bigint, endBlock: bigint): Promise<{ timestamp: bigint; value: bigint }[]> {
    const prices: Promise<{ timestamp: bigint; value: bigint }>[] = [];
    for (let i = startBlock; i <= endBlock; i++) {
        prices.push(getPrice(client, i));
    }
    return Promise.all(prices);
}

function getPrice(client: BlockchainClient, blockNumber: bigint): Promise<{ timestamp: bigint; value: bigint }> {
    return client.getBlock({ blockNumber }).then(block => ({
        timestamp: block.timestamp,
        value: block.price
    }));
}

export default async function calculateSettlementPrice(client: BlockchainClient, startTime: bigint, endTime: bigint): Promise<bigint> {
    const startBlock = await getBlockByTimestamp(client, startTime);
    const endBlock = await getBlockByTimestamp(client, endTime);

    const prices = await getPrices(client, startBlock.number, endBlock.number);

    let totalWeight = 0n;
    let weightedSum = 0n;

    for (let i = 0; i < prices.length - 1; i++) {
        const currentPrice = prices[i];
        const nextPrice = prices[i + 1];
        const timeDiff = nextPrice.timestamp - currentPrice.timestamp;

        totalWeight += timeDiff;
        weightedSum += currentPrice.value * timeDiff;
    }

    const lastPrice = prices[prices.length - 1];
    const actualEndTime = endTime || lastPrice.timestamp;
    const timeDiff = actualEndTime - lastPrice.timestamp;

    totalWeight += timeDiff;
    weightedSum += lastPrice.value * timeDiff;

    return weightedSum / totalWeight;
}