name="foil"
version="1.0.1"
preset="test"

[var.settings]
deployer="0xdb5af497a73620d881561edb508012a5f84e9ba2"
settlementPriceSubmitter="0x66aB20e98fcACfadB298C0741dFddA92568B5826"
feeRate = "10000" # 1%
startingSqrtPriceX96 = "345347553882095649185803010048" # 19
assertionLiveness = "21600"
bondAmount = "5000000000"
claimStatement = "<%= stringToHex('The sum of gas used divided by the sum of base fees paid on Ethereum Mainnet across all blocks, divided by the wstETH/ETH ratio at the end of the period, represented with 18 decimal places') %>"
minTradeSize = "10000"
# Integration addresses
optimisticOracleV3 = "0x2aBf1Bd76655de80eDB3086114315Eec75AF500c" # UMA Optimistic Oracle V3 
uniswapPositionManager = "0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1" # Uniswap V3 NonfungiblePositionManager 
uniswapSwapRouter = "0xAf5ead464aFFB12dD4CDFB98c9D2C490194FE5d0" # Using our deployed SwapRouter // "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45" # Uniswap V3 SwapRouter 
uniswapQuoter = "0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a" # Uniswap V3 QuoterV2 
# Vaults Settings
vault1Name="Foil Vault Yin"
vault1Symbol = "fYIN"
vault2Name="Foil Vault Yang"
vault2Symbol = "fYANG"
lowerBoundMultiplier = "0.5773502691896257" # sqrt(1/3) 
upperBoundMultiplier = "1.7320508075688772" # sqrt(3)
duration = "18000" # 5 hours
totalVaults = "2"
startTime = "1737482400" #	Tue Jan 21 2025 13:00:00 GMT-0500 (Eastern Standard Time)
# tokens
wstETH = "0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452"
USDC = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
depends = []

[deploy.ConfigurationModule]
artifact="ConfigurationModule"
args=["<%= settings.deployer %>"]

[deploy.LiquidityModule]
artifact="LiquidityModule"

[deploy.UMASettlementModule]
artifact="UMASettlementModule"

[deploy.TradeModule]
artifact="TradeModule"

[deploy.NftModule]
artifact="NftModule"

[deploy.ViewsModule]
artifact="ViewsModule"

[deploy.ERC165Module]
artifact="ERC165Module"

[deploy.SettlementModule]
artifact="SettlementModule"

[router.FoilYin]
contracts=[
  "ConfigurationModule",
  "LiquidityModule",
  "UMASettlementModule",
  "TradeModule",
  "NftModule",
  "ViewsModule",
  "ERC165Module",
  "SettlementModule"
]
highlight=true

[router.FoilYang]
contracts=[
  "ConfigurationModule",
  "LiquidityModule",
  "UMASettlementModule",
  "TradeModule",
  "NftModule",
  "ViewsModule",
  "ERC165Module",
  "SettlementModule"
]
highlight=true

# VAULT 1
[deploy.VaultYin]
highlight=true
artifact="Vault"
from="<%= settings.deployer %>"
args=[ "<%= settings.vault1Name %>", "<%= settings.vault1Symbol %>", "<%= FoilYin.address %>", "<%= settings.wstETH %>", "<%= parseEther(settings.lowerBoundMultiplier) %>", "<%= parseEther(settings.upperBoundMultiplier) %>", "<%= settings.duration %>", "0", "<%= settings.totalVaults %>", "<%= settings.settlementPriceSubmitter %>"  ]
depends = ['router.FoilYin', 'var.settings']

[invoke.initializeMarketForVaultYin]
target="FoilYin"
func="initializeMarket"
from="<%= settings.deployer %>"
args=[
  "<%= VaultYin.address %>",
  "<%= settings.wstETH %>",
  [],
  "<%= VaultYin.address %>",
  "<%= settings.minTradeSize %>",
  { feeRate = "<%= settings.feeRate %>", assertionLiveness= "<%= settings.assertionLiveness %>", bondCurrency = "<%= settings.USDC %>", bondAmount = "<%= settings.bondAmount %>", claimStatement = "<%= settings.claimStatement %>", uniswapPositionManager = "<%= settings.uniswapPositionManager %>", uniswapSwapRouter = "<%= settings.uniswapSwapRouter %>", uniswapQuoter = "<%= settings.uniswapQuoter %>", optimisticOracleV3 = "<%= settings.optimisticOracleV3 %>" }
]
depends=["deploy.VaultYin"]

# VAULT 2
[deploy.VaultYang]
highlight=true
artifact="Vault"
from="<%= settings.deployer %>"
args=[ "<%= settings.vault2Name %>", "<%= settings.vault2Symbol %>", "<%= FoilYang.address %>", "<%= settings.wstETH %>", "<%= parseEther(settings.lowerBoundMultiplier) %>", "<%= parseEther(settings.upperBoundMultiplier) %>", "<%= settings.duration %>", "1", "<%= settings.totalVaults %>", "<%= settings.settlementPriceSubmitter %>"  ]
depends = ['router.FoilYang',  'var.settings']

[invoke.initializeMarketForVaultYang]
target="FoilYang"
func="initializeMarket"
from="<%= settings.deployer %>"
args=[
  "<%= VaultYang.address %>",
  "<%= settings.wstETH %>",
  [],
  "<%= VaultYang.address %>", 
  "<%= settings.minTradeSize %>",
  { feeRate = "<%= settings.feeRate %>", assertionLiveness= "<%= settings.assertionLiveness %>", bondCurrency = "<%= settings.USDC %>", bondAmount = "<%= settings.bondAmount %>", claimStatement = "<%= settings.claimStatement %>", uniswapPositionManager = "<%= settings.uniswapPositionManager %>", uniswapSwapRouter = "<%= settings.uniswapSwapRouter %>", uniswapQuoter = "<%= settings.uniswapQuoter %>", optimisticOracleV3 = "<%= settings.optimisticOracleV3 %>" }
]
depends=["deploy.VaultYang"]


# START EPOCHS
[invoke.initializeFirstEpochForVaultYin]
target="VaultYin"
from = "<%= settings.deployer %>"
func="initializeFirstEpoch"
args=[
  "<%= settings.startingSqrtPriceX96 %>",
  "<%= settings.startTime %>"
]
depends=["invoke.initializeMarketForVaultYin"]

[invoke.initializeFirstEpochForVaultYang]
target="VaultYang"
from = "<%= settings.deployer %>"
func="initializeFirstEpoch"
args=[
  "<%= settings.startingSqrtPriceX96 %>",
  "<%= settings.startTime %>"
]
depends=["invoke.initializeMarketForVaultYang"]