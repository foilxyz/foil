name="foil"
version="<%= package.version %>"

[var.settings]
owner = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
baseAssetMinPriceTick = "16000" # 5
baseAssetMaxPriceTick = "39000" # 50
feeRate = "10000" # 1%
startingSqrtPriceX96 = "345347553882095649185803010048" # 19
assertionLiveness = "21600"
bondAmount = "5000000000"
claimStatement = "<%= stringToHex('The sum of gas used divided by the sum of base fees paid on Ethereum Mainnet across all blocks, divided by the wstETH/ETH ratio at the end of the period, represented with 18 decimal places') %>"
callbackRecipient = "0x0000000000000000000000000000000000000000"
minTradeSize = "10000"
# Vault Settings
vault1Name="Foil Vault Yin"
vault1Symbol = "fYIN"
vault2Name="Foil Vault Yang"
vault2Symbol = "fYANG"
lowerBoundMultiplier = "0.5773502691896257" # sqrt(1/3) 
upperBoundMultiplier = "1.7320508075688772" # sqrt(3)
duration = "86400" # 1 day in seconds
totalVaults = "2"
depends=[]

[clone.UMA]
source="uma-oov3"
target="foil@uma-mock"
options.defaultCurrency = "<%= BondCurrency.Token.address %>"
options.minimumBond = "0"

[clone.Uniswap]
source="uniswap:3.0.1"
target="foil@uniswap"

[clone.CollateralAsset]
source="mintable-token@permissionless-mint"
target="foil@test-collateral-asset"
var.symbol="wstETH"

[clone.BondCurrency]
source="mintable-token@permissionless-mint"
target="foil@test-bond-currency"
var.symbol="USDC"
var.decimals = "6"

[deploy.ConfigurationModule]
artifact="ConfigurationModule"
args=["<%= settings.owner %>"]

[deploy.LiquidityModule]
artifact="LiquidityModule"

[deploy.UMASettlementModule]
artifact="UMASettlementModule"

[deploy.TradeModule]
artifact="TradeModule"

[deploy.NftModule]
artifact="NftModule"

[deploy.ViewsModule]
artifact="ViewsModule"

[deploy.ERC165Module]
artifact="ERC165Module"

[deploy.SettlementModule]
artifact="SettlementModule"

[router.FoilYin]
contracts=[
  "ConfigurationModule",
  "LiquidityModule",
  "UMASettlementModule",
  "TradeModule",
  "NftModule",
  "ViewsModule",
  "ERC165Module",
  "SettlementModule"
]
highlight=true

[router.FoilYang]
contracts=[
  "ConfigurationModule",
  "LiquidityModule",
  "UMASettlementModule",
  "TradeModule",
  "NftModule",
  "ViewsModule",
  "ERC165Module",
  "SettlementModule"
]
highlight=true

# VAULT 1
[deploy.VaultYin]
highlight=true
artifact="Vault"
from="<%= settings.owner %>"
args=[ "<%= settings.vault1Name %>", "<%= settings.vault1Symbol %>", "<%= FoilYin.address %>", "<%= CollateralAsset.Token.address %>", "<%= parseEther(settings.lowerBoundMultiplier) %>", "<%= parseEther(settings.upperBoundMultiplier) %>", "<%= settings.duration %>", "0", "<%= settings.totalVaults %>", "<%= settings.owner %>" ]
depends = ['router.FoilYin', 'clone.CollateralAsset', 'var.settings']

[invoke.initializeMarketForVault1]
target="FoilYin"
func="initializeMarket"
from="<%= settings.owner %>"
args=[
  "<%= VaultYin.address %>",
  "<%= CollateralAsset.Token.address %>",
  [],
  "<%= VaultYin.address %>",
  "<%= settings.minTradeSize %>",
  { feeRate = "<%= settings.feeRate %>", assertionLiveness= "<%= settings.assertionLiveness %>", bondCurrency = "<%= imports.BondCurrency.contracts.Token.address %>", bondAmount= "<%= settings.bondAmount %>", claimStatement= "<%= settings.claimStatement %>",  uniswapPositionManager =  "<%= imports.Uniswap.contracts.NonfungiblePositionManager.address %>", uniswapSwapRouter = "<%= imports.Uniswap.contracts.SwapRouter.address %>", uniswapQuoter = "<%= imports.Uniswap.contracts.QuoterV2.address %>", optimisticOracleV3 = "<%= imports.UMA.contracts.OptimisticOracleV3.address %>" }
]
depends=["deploy.VaultYin", "clone.BondCurrency"]

# VAULT 2
[deploy.VaultYang]
highlight=true
artifact="Vault"
from="<%= settings.owner %>"
args=[ "<%= settings.vault2Name %>", "<%= settings.vault2Symbol %>", "<%= FoilYang.address %>", "<%= CollateralAsset.Token.address %>", "<%= parseEther(settings.lowerBoundMultiplier) %>", "<%= parseEther(settings.upperBoundMultiplier) %>", "<%= settings.duration %>", "1", "<%= settings.totalVaults %>", "<%= settings.owner %>" ]
depends = ['router.FoilYang', 'clone.CollateralAsset', 'var.settings']

[invoke.initializeMarketForVault2]
target="FoilYang"
func="initializeMarket"
from="<%= settings.owner %>"
args=[
  "<%= VaultYang.address %>",
  "<%= CollateralAsset.Token.address %>",
  [],
  "<%= VaultYang.address %>", 
  "<%= settings.minTradeSize %>",
  { feeRate = "<%= settings.feeRate %>", assertionLiveness= "<%= settings.assertionLiveness %>", bondCurrency = "<%= imports.BondCurrency.contracts.Token.address %>", bondAmount= "<%= settings.bondAmount %>", claimStatement= "<%= settings.claimStatement %>",  uniswapPositionManager =  "<%= imports.Uniswap.contracts.NonfungiblePositionManager.address %>", uniswapSwapRouter = "<%= imports.Uniswap.contracts.SwapRouter.address %>", uniswapQuoter = "<%= imports.Uniswap.contracts.QuoterV2.address %>", optimisticOracleV3 = "<%= imports.UMA.contracts.OptimisticOracleV3.address %>" }
]
depends=["deploy.VaultYang", "clone.BondCurrency"]

# START EPOCHS
[invoke.initializeFirstEpochForVault1]
target="VaultYin"
from = "<%= settings.owner %>"
func="initializeFirstEpoch"
args=[
  "<%= settings.startingSqrtPriceX96 %>",
  "0"
]
depends=["invoke.initializeMarketForVault1"]

[invoke.initializeFirstEpochForVault2]
target="VaultYang"
from = "<%= settings.owner %>"
func="initializeFirstEpoch"
args=[
  "<%= settings.startingSqrtPriceX96 %>",
  "0"
]
depends=["invoke.initializeMarketForVault2"]


[invoke.gimmeTokens]
target="CollateralAsset.Token"
func="mint"
args=["<%= parseEther('1000') %>", "<%= settings.owner %>"]
depends=["clone.CollateralAsset"]


[invoke.gimmeTokens2]
target="CollateralAsset.Token"
func="mint"
args=["<%= parseEther('1000') %>", "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"]
depends=["clone.CollateralAsset"]


[invoke.gimmeTokens3]
target="CollateralAsset.Token"
func="mint"
args=["<%= parseEther('1000') %>", "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC"]
depends=["clone.CollateralAsset"]
