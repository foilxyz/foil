{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f6534f3ea9b21a56d8e6fefb901d208a98cc04a63ba47cfd5ee2726547be96d664736f6c63430008180033","sourceMap":"444:8835:61:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;444:8835:61;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f6534f3ea9b21a56d8e6fefb901d208a98cc04a63ba47cfd5ee2726547be96d664736f6c63430008180033","sourceMap":"444:8835:61:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"based on Uniswap V3's TickMath library, but migrated to use Solidity 0.8.2 onwardsComputes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/external/univ3/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/external/univ3/MigrationMathUtils.sol\":{\"keccak256\":\"0xd1cfbacca2c722e1eb9ee0f559dc902396ef3d4941cbe63e0183bc482cfe7655\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e7e90eec955982ea57f58e1a4e537bfe2b8c95b206b7cd26a5a9956f1a06df65\",\"dweb:/ipfs/Qmf7bn6A1DAUUVzf4RH2SEBgr5x8h9hemB17L4i7jbDzs4\"]},\"src/external/univ3/TickMath.sol\":{\"keccak256\":\"0x1d1c626617b6412b773ff1baef5ce0c4ccbf8817cd262cec53eca8458e600f5c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2f0a5392390e1c5688cb147db31481bc70a96b45a4128e2ca277f8c513f13f08\",\"dweb:/ipfs/QmdaT9PAnn8noCm5BNyPACyVZqL8nqSrfmFu8XtdZR1YNd\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@uniswap/=node_modules/@uniswap/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/external/univ3/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/external/univ3/MigrationMathUtils.sol":{"keccak256":"0xd1cfbacca2c722e1eb9ee0f559dc902396ef3d4941cbe63e0183bc482cfe7655","urls":["bzz-raw://e7e90eec955982ea57f58e1a4e537bfe2b8c95b206b7cd26a5a9956f1a06df65","dweb:/ipfs/Qmf7bn6A1DAUUVzf4RH2SEBgr5x8h9hemB17L4i7jbDzs4"],"license":"GPL-3.0"},"src/external/univ3/TickMath.sol":{"keccak256":"0x1d1c626617b6412b773ff1baef5ce0c4ccbf8817cd262cec53eca8458e600f5c","urls":["bzz-raw://2f0a5392390e1c5688cb147db31481bc70a96b45a4128e2ca277f8c513f13f08","dweb:/ipfs/QmdaT9PAnn8noCm5BNyPACyVZqL8nqSrfmFu8XtdZR1YNd"],"license":"GPL-2.0-or-later"}},"version":1},"id":61}